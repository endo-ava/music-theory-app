<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="910" failures="0" errors="0" time="2.183462346">
    <testsuite name="src/stores/test/circleOfFifthsStore.test.ts" timestamp="2025-09-28T12:38:09.276Z" hostname="runnervm3ublj" tests="1" failures="0" errors="0" skipped="0" time="0.005409366">
        <testcase classname="src/stores/test/circleOfFifthsStore.test.ts" name="Zustandストアの基本動作確認 &gt; ストアが正常に初期化される" time="0.003248483">
        </testcase>
    </testsuite>
    <testsuite name="src/stores/test/currentScaleStore.test.ts" timestamp="2025-09-28T12:38:09.278Z" hostname="runnervm3ublj" tests="4" failures="0" errors="0" skipped="0" time="0.045788727">
        <testcase classname="src/stores/test/currentScaleStore.test.ts" name="currentKeyStore &gt; 初期状態はC Majorキーである" time="0.024076992">
        </testcase>
        <testcase classname="src/stores/test/currentScaleStore.test.ts" name="currentKeyStore &gt; 音楽キーを設定できる" time="0.008347478">
        </testcase>
        <testcase classname="src/stores/test/currentScaleStore.test.ts" name="currentKeyStore &gt; デフォルトにリセットできる" time="0.006211462">
        </testcase>
        <testcase classname="src/stores/test/currentScaleStore.test.ts" name="currentKeyStore &gt; メジャーキーとマイナーキーを正しく区別する" time="0.004756843">
        </testcase>
    </testsuite>
    <testsuite name="src/stores/test/hubStore.test.ts" timestamp="2025-09-28T12:38:09.280Z" hostname="runnervm3ublj" tests="13" failures="0" errors="0" skipped="0" time="0.019575499">
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 初期状態 &gt; 正常ケース: デフォルトでcircle-of-fifthsが設定される" time="0.006224169">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 初期状態 &gt; 正常ケース: setHubType関数が定義されている" time="0.000300904">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 初期状態 &gt; 正常ケース: ストアの型構造が正しい" time="0.004592156">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; setHubType関数 &gt; 正常ケース: circle-of-fifthsに設定できる" time="0.000301756">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; setHubType関数 &gt; 正常ケース: chromatic-circleに設定できる" time="0.000211527">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; setHubType関数 &gt; 正常ケース: 状態変更後もsetHubType関数が同じ参照を保持" time="0.00034112">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; setHubType関数 &gt; 境界値ケース: 全てのHubTypeを正しく設定できる" time="0.000412414">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 状態変更の動作 &gt; 正常ケース: 複数回の状態変更が正しく処理される" time="0.000415079">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 状態変更の動作 &gt; 正常ケース: 同じ値を設定しても状態は変更される" time="0.000352963">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; ストア購読の動作 &gt; 正常ケース: 状態変更時にリスナーが呼ばれる" time="0.003534862">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; ストアの独立性 &gt; 正常ケース: 複数のgetState()呼び出しが同じオブジェクトを参照" time="0.000283742">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; ストアの独立性 &gt; 正常ケース: ストアの状態が適切に分離されている" time="0.000224812">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 型安全性 &gt; 正常ケース: HubType以外の値は型エラーとなる（TypeScript）" time="0.000221705">
        </testcase>
    </testsuite>
    <testsuite name="src/stores/test/layerStore.test.ts" timestamp="2025-09-28T12:38:09.284Z" hostname="runnervm3ublj" tests="11" failures="0" errors="0" skipped="0" time="0.018574571">
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; initial state &gt; 正常ケース: 初期状態でダイアトニックコード非表示" time="0.005162596">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; toggleDiatonicChords action &gt; 正常ケース: falseからtrueに切り替わる" time="0.000436089">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; toggleDiatonicChords action &gt; 正常ケース: trueからfalseに切り替わる" time="0.000510518">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; toggleDiatonicChords action &gt; 正常ケース: 複数回のトグル動作" time="0.000540014">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; toggleDiatonicChords action &gt; 正常ケース: 関数の参照が安定している" time="0.000270277">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; state immutability &gt; 正常ケース: setState後に元のstateが変更されない" time="0.003581891">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; state immutability &gt; 正常ケース: toggleDiatonicChords後の不変性" time="0.001269612">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; store subscription &gt; 正常ケース: 状態変更時にsubscriberが呼ばれる" time="0.000468158">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; direct state manipulation &gt; 正常ケース: setStateによる直接的な状態変更" time="0.000381265">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; direct state manipulation &gt; 正常ケース: 部分的な状態更新" time="0.003336931">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; type safety &gt; 正常ケース: 型安全な状態アクセス" time="0.000346631">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/chord/test/Chord.test.ts" timestamp="2025-09-28T12:38:09.290Z" hostname="runnervm3ublj" tests="30" failures="0" errors="0" skipped="0" time="0.022913358">
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; コンストラクタ（ファクトリメソッド経由） &gt; 正常ケース: メジャーコードを生成" time="0.004754899">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; コンストラクタ（ファクトリメソッド経由） &gt; 正常ケース: マイナーコードを生成" time="0.000497482">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; コンストラクタ（ファクトリメソッド経由） &gt; 正常ケース: ドミナント7thコードを生成" time="0.000448349">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 構成音生成テスト &gt; 正常ケース: 各メジャートライアドの構成音" time="0.001007957">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 構成音生成テスト &gt; 正常ケース: 各マイナートライアドの構成音" time="0.000820506">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; KeyDTOファクトリメソッド &gt; 正常ケース: KeyDTOからメジャーコード生成" time="0.000904964">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; KeyDTOファクトリメソッド &gt; 正常ケース: KeyDTOからマイナーコード生成" time="0.000546814">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; オクターブ処理 &gt; 正常ケース: オクターブを跨ぐ音程の処理" time="0.000267461">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; オクターブ処理 &gt; 正常ケース: 低いオクターブでの和音" time="0.00035775">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; オクターブ処理 &gt; 正常ケース: 高いオクターブでの和音" time="0.000270557">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; 正常ケース: メジャートライアドの構成音から生成" time="0.000640319">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; 正常ケース: マイナートライアドの構成音から生成" time="0.000385211">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; 正常ケース: ドミナント7thコードの構成音から生成" time="0.000428032">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; 正常ケース: ディミニッシュトライアドの構成音から生成" time="0.000533018">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; エラーケース: 空の構成音配列" time="0.001188515">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; エラーケース: 認識できないコード品質" time="0.0005025">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; ChordPattern.from ファクトリメソッド &gt; 正常ケース: MajorSeventhコード" time="0.000506839">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; ChordPattern.from ファクトリメソッド &gt; 正常ケース: MinorSeventhコード" time="0.000360285">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; ChordPattern.from ファクトリメソッド &gt; 正常ケース: DiminishedTriadコード" time="0.000359022">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 同じルート音と同じ品質のChordは等しい" time="0.000276037">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 同じChord同士は等しい" time="0.000175128">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 異なる品質のChordは等しくない" time="0.00024081">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 異なるルート音のChordは等しくない" time="0.000278482">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 異なるオクターブでも同じピッチクラスと品質なら等しい" time="0.0002137">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; エッジケース: null、undefined、非Chordオブジェクトとの比較" time="0.000269755">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 異なる生成方法で作られた同じChordは等しい" time="0.00019764">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: fromNotesで生成したChordとの比較" time="0.000210915">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 音楽理論的検証 &gt; 正常ケース: 基本トライアドの音程関係" time="0.000308257">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 音楽理論的検証 &gt; 正常ケース: セブンスコードの音程関係" time="0.000406531">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 音楽理論的検証 &gt; 正常ケース: KeyDTOを使った和音進行" time="0.000642603">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/AbstractMusicalContext.test.ts" timestamp="2025-09-28T12:38:09.307Z" hostname="runnervm3ublj" tests="287" failures="0" errors="0" skipped="0" time="0.239976964">
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 正常ケース: 1-7度の各度数で正しいローマ数字を返す" time="0.003730274">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 正常ケース: sharp記号付き度数名を正しく返す" time="0.000383157">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 正常ケース: flat記号付き度数名を正しく返す" time="0.000410529">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 異常ケース: 範囲外の度数でエラーをスロー" time="0.001509997">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 境界値ケース: 最小値と最大値で正しく動作" time="0.000302857">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (C Major) &gt; centerPitchが正しく設定されている" time="0.000368981">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (C Major) &gt; scaleが正しく設定されている" time="0.000275196">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (C Major) &gt; contextNameが生成される" time="0.000387475">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (C Major) &gt; shortNameが生成される" time="0.001470304">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (G Major - Sharp) &gt; centerPitchが正しく設定されている" time="0.000341129">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (G Major - Sharp) &gt; scaleが正しく設定されている" time="0.000207198">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (G Major - Sharp) &gt; contextNameが生成される" time="0.000201387">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (G Major - Sharp) &gt; shortNameが生成される" time="0.000232395">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (F Major - Flat) &gt; centerPitchが正しく設定されている" time="0.00040602">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (F Major - Flat) &gt; scaleが正しく設定されている" time="0.000229159">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (F Major - Flat) &gt; contextNameが生成される" time="0.000292648">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (F Major - Flat) &gt; shortNameが生成される" time="0.000188683">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (A Minor) &gt; centerPitchが正しく設定されている" time="0.000174177">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (A Minor) &gt; scaleが正しく設定されている" time="0.000154981">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (A Minor) &gt; contextNameが生成される" time="0.000297597">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (A Minor) &gt; shortNameが生成される" time="0.000174857">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (E Minor - Sharp) &gt; centerPitchが正しく設定されている" time="0.00016035">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (E Minor - Sharp) &gt; scaleが正しく設定されている" time="0.000144982">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (E Minor - Sharp) &gt; contextNameが生成される" time="0.000259065">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (E Minor - Sharp) &gt; shortNameが生成される" time="0.000176861">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (D Minor - Flat) &gt; centerPitchが正しく設定されている" time="0.000161854">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (D Minor - Flat) &gt; scaleが正しく設定されている" time="0.000159278">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (D Minor - Flat) &gt; contextNameが生成される" time="0.000189065">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (D Minor - Flat) &gt; shortNameが生成される" time="0.000221664">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (D Dorian) &gt; centerPitchが正しく設定されている" time="0.000141154">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (D Dorian) &gt; scaleが正しく設定されている" time="0.000139772">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (D Dorian) &gt; contextNameが生成される" time="0.000157885">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (D Dorian) &gt; shortNameが生成される" time="0.000173464">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (E Phrygian) &gt; centerPitchが正しく設定されている" time="0.000164919">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (E Phrygian) &gt; scaleが正しく設定されている" time="0.000184696">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (E Phrygian) &gt; contextNameが生成される" time="0.000166812">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (E Phrygian) &gt; shortNameが生成される" time="0.000169558">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (F Lydian) &gt; centerPitchが正しく設定されている" time="0.000206357">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (F Lydian) &gt; scaleが正しく設定されている" time="0.000165099">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (F Lydian) &gt; contextNameが生成される" time="0.000188713">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (F Lydian) &gt; shortNameが生成される" time="0.00012323">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (G Mixolydian) &gt; centerPitchが正しく設定されている" time="0.000121458">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (G Mixolydian) &gt; scaleが正しく設定されている" time="0.000108153">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (G Mixolydian) &gt; contextNameが生成される" time="0.000122189">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (G Mixolydian) &gt; shortNameが生成される" time="0.000142015">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (C Major) &gt; 1-7度の三和音を構築できる" time="0.007556014">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (C Major) &gt; 範囲外の度数でエラーが投げられる" time="0.000616915">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (G Major - Sharp) &gt; 1-7度の三和音を構築できる" time="0.0013677">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (G Major - Sharp) &gt; 範囲外の度数でエラーが投げられる" time="0.00049696">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (F Major - Flat) &gt; 1-7度の三和音を構築できる" time="0.001211448">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (F Major - Flat) &gt; 範囲外の度数でエラーが投げられる" time="0.000361897">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (A Minor) &gt; 1-7度の三和音を構築できる" time="0.000975436">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (A Minor) &gt; 範囲外の度数でエラーが投げられる" time="0.000424214">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (E Minor - Sharp) &gt; 1-7度の三和音を構築できる" time="0.000944709">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (E Minor - Sharp) &gt; 範囲外の度数でエラーが投げられる" time="0.000382897">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (D Minor - Flat) &gt; 1-7度の三和音を構築できる" time="0.00099319">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (D Minor - Flat) &gt; 範囲外の度数でエラーが投げられる" time="0.000375363">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (D Dorian) &gt; 1-7度の三和音を構築できる" time="0.00110045">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (D Dorian) &gt; 範囲外の度数でエラーが投げられる" time="0.000432169">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (E Phrygian) &gt; 1-7度の三和音を構築できる" time="0.002757082">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (E Phrygian) &gt; 範囲外の度数でエラーが投げられる" time="0.000442558">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (F Lydian) &gt; 1-7度の三和音を構築できる" time="0.001121099">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (F Lydian) &gt; 範囲外の度数でエラーが投げられる" time="0.000325189">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (G Mixolydian) &gt; 1-7度の三和音を構築できる" time="0.000921545">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (G Mixolydian) &gt; 範囲外の度数でエラーが投げられる" time="0.000406251">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; 特定キーの完全一致検証 &gt; 正常ケース: C Majorの7つのダイアトニック和音を完全検証" time="0.00074747">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; 特定キーの完全一致検証 &gt; 正常ケース: A Minorの7つのダイアトニック和音を完全検証" time="0.000593952">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; 特定キーの完全一致検証 &gt; 正常ケース: G Majorの7つのダイアトニック和音を完全検証" time="0.000519373">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (C Major) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000963634">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (C Major) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000155341">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (C Major) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000198772">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (C Major) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000969485">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (G Major - Sharp) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000973473">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (G Major - Sharp) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000115015">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (G Major - Sharp) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.00011734">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (G Major - Sharp) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.00060402">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (F Major - Flat) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.003087019">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (F Major - Flat) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000115497">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (F Major - Flat) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000108423">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (F Major - Flat) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000615462">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (A Minor) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.003183691">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (A Minor) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000092653">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (A Minor) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000079558">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (A Minor) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000460111">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000777275">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (E Minor - Sharp) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000126767">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000107932">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000635961">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (D Minor - Flat) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000802632">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (D Minor - Flat) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.0001224">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (D Minor - Flat) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.00010645">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (D Minor - Flat) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.003645014">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (D Dorian) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000839491">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (D Dorian) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.00010174">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (D Dorian) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000093956">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (D Dorian) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000621414">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000825757">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (E Phrygian) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.004130904">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.00012793">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000692236">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (F Lydian) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000911076">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (F Lydian) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000119163">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (F Lydian) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000147466">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (F Lydian) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000665325">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.002712781">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000099095">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000086502">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.00051806">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; 特定キーの分析結果完全検証 &gt; 正常ケース: C Majorの各ダイアトニック和音分析を完全検証" time="0.001144853">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; 特定キーの分析結果完全検証 &gt; 正常ケース: A Minorの各ダイアトニック和音分析を完全検証" time="0.000746558">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (C Major) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000378208">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (C Major) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.001119636">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (C Major) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.002931067">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (G Major - Sharp) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000269915">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (G Major - Sharp) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000745877">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (G Major - Sharp) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001710022">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (F Major - Flat) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000246773">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (F Major - Flat) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000654255">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (F Major - Flat) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001849362">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (A Minor) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000270917">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (A Minor) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000863196">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (A Minor) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.00190691">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (E Minor - Sharp) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000280585">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000781012">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001931666">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (D Minor - Flat) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000290674">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (D Minor - Flat) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000842537">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (D Minor - Flat) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.002020262">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (D Dorian) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000330048">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (D Dorian) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.009427826">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (D Dorian) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001651713">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (E Phrygian) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000214973">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.003903448">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001755717">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (F Lydian) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000217808">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (F Lydian) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.003772082">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (F Lydian) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.004276792">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000273612">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.003139197">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.003424552">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: C Majorにおけるセカンダリードミナント（V/V = D major）の分析" time="0.000612436">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: A Minorにおけるナポリタン6度（♭Ⅱ = B♭ major）の分析" time="0.001337224">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: C Majorにおける借用和音（ⅵ♭ = A♭ major）の分析" time="0.000453519">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: G Majorにおけるクロマチック和音（F diminished）の分析" time="0.000415127">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: F Majorにおける増六和音（ドイツ増六 = D♭ major）の分析" time="0.00044844">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (C Major) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.00043275">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (C Major) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000302065">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (C Major) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000394739">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (G Major - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000275556">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (G Major - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000173325">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (G Major - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000301785">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (F Major - Flat) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.00029331">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (F Major - Flat) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000214502">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (F Major - Flat) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000364873">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (A Minor) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000302005">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (A Minor) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.0002193">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (A Minor) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000366666">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (E Minor - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000399898">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (E Minor - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000240891">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (E Minor - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000371304">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (D Minor - Flat) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000293971">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (D Minor - Flat) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000221415">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (D Minor - Flat) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.00036853">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (D Dorian) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000273642">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (D Dorian) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000206867">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (D Dorian) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000350536">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (E Phrygian) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000270767">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (E Phrygian) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000188663">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (E Phrygian) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000327172">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (F Lydian) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000304691">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (F Lydian) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000276698">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (F Lydian) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000297798">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (G Mixolydian) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000287408">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (G Mixolydian) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.00020313">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (G Mixolydian) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000364953">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; 特定キーの和音情報完全検証 &gt; 正常ケース: C Majorの和音情報を完全検証" time="0.00100412">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; 特定キーの和音情報完全検証 &gt; 正常ケース: A Minorの和音情報を完全検証" time="0.000781002">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (C Major) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000359983">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (C Major) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001584536">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (C Major) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001339438">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (G Major - Sharp) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000287218">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (G Major - Sharp) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001658054">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (G Major - Sharp) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001342884">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (F Major - Flat) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000281276">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (F Major - Flat) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.003522053">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (F Major - Flat) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001162286">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (A Minor) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000297257">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (A Minor) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.00460401">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (A Minor) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001286419">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000307816">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.004945108">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001395453">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (D Minor - Flat) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000319508">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (D Minor - Flat) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.00149554">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (D Minor - Flat) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001366238">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (D Dorian) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000324698">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (D Dorian) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001363673">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (D Dorian) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001423665">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000300532">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001421251">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001383069">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (F Lydian) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000332612">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (F Lydian) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001408767">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (F Lydian) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001166484">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000331551">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001431019">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.00449445">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; 特定キーでの判定完全検証 &gt; 正常ケース: C Majorダイアトニック和音を正しく判定" time="0.00056115">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; 特定キーでの判定完全検証 &gt; 正常ケース: A Minorダイアトニック和音を正しく判定" time="0.000555039">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (C Major) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000273021">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (C Major) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000254587">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (G Major - Sharp) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000273442">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (G Major - Sharp) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000171962">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (F Major - Flat) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000200976">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (F Major - Flat) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000179987">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (A Minor) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000254827">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (A Minor) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000168124">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.00023531">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000196828">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (D Minor - Flat) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000233587">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (D Minor - Flat) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000207919">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (D Dorian) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000265006">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (D Dorian) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000160851">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000204903">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000179686">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (F Lydian) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000213731">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (F Lydian) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000228718">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000259405">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000200526">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; 音楽理論的エッジケース &gt; 正常ケース: 関係調の共通和音を正しく判定" time="0.00028848">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; 音楽理論的エッジケース &gt; 正常ケース: 異なるモードの和音をfalseと判定" time="0.000275255">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000657001">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000163236">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000119263">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: JSON文字列化が可能" time="0.000429855">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: JSONから復元可能な形式" time="0.001078259">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000382316">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000148769">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000101801">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: JSON文字列化が可能" time="0.000255248">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: JSONから復元可能な形式" time="0.000316643">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000443741">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000146434">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000107391">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: JSON文字列化が可能" time="0.000217116">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: JSONから復元可能な形式" time="0.000315681">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: JSON形式で正しく出力される" time="0.00034756">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000113082">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.00008505">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: JSON文字列化が可能" time="0.000244879">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: JSONから復元可能な形式" time="0.000294702">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000328515">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000126738">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000140373">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: JSON文字列化が可能" time="0.000222396">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: JSONから復元可能な形式" time="0.000324347">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000289272">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000119093">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000090229">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: JSON文字列化が可能" time="0.000200416">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: JSONから復元可能な形式" time="0.000404337">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000355176">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000137177">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000102071">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: JSON文字列化が可能" time="0.000270897">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: JSONから復元可能な形式" time="0.000291285">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000329437">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000175108">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000097593">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: JSON文字列化が可能" time="0.000233167">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: JSONから復元可能な形式" time="0.000325249">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000746077">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000186349">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.00011241">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: JSON文字列化が可能" time="0.000309379">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: JSONから復元可能な形式" time="0.00027761">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: JSON形式で正しく出力される" time="0.00470541">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000150812">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000102141">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: JSON文字列化が可能" time="0.000264536">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: JSONから復元可能な形式" time="0.000321142">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 型固有のプロパティ検証 &gt; 正常ケース: Keyタイプの場合type=&quot;key&quot;とisMajorが適切に設定" time="0.00031535">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 型固有のプロパティ検証 &gt; 正常ケース: ModalContextタイプの場合type=&quot;modal&quot;" time="0.000190085">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 境界値とエッジケース &gt; 正常ケース: 全ての五度圏ポジションでの出力" time="0.010121169">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 境界値とエッジケース &gt; 正常ケース: 特殊文字を含む名前での出力" time="0.000351759">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 境界値とエッジケース &gt; 正常ケース: AbstractMusicalContextの基本実装" time="0.000248936">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 不変性の確認 &gt; 正常ケース: toJSONで返されるオブジェクトの変更が元オブジェクトに影響しない" time="0.000601576">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/Accidental.test.ts" timestamp="2025-09-28T12:38:09.394Z" hostname="runnervm3ublj" tests="24" failures="0" errors="0" skipped="0" time="0.019217347">
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 基本プロパティ &gt; 正常ケース: sharp変化記号の基本プロパティ" time="0.001719667">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 基本プロパティ &gt; 正常ケース: flat変化記号の基本プロパティ" time="0.000837041">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 基本プロパティ &gt; 正常ケース: natural変化記号の基本プロパティ" time="0.000406012">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンス &gt; 正常ケース: SHARP静的インスタンス" time="0.000288832">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンス &gt; 正常ケース: FLAT静的インスタンス" time="0.000267551">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンス &gt; 正常ケース: NATURAL静的インスタンス" time="0.000266741">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンスの一意性 &gt; 正常ケース: 静的インスタンスが常に同じ参照を返す" time="0.000441499">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンスの一意性 &gt; 正常ケース: 新しいインスタンスとは異なる参照" time="0.00140715">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; getSymbol メソッド &gt; 正常ケース: sharp記号の正しい文字" time="0.000331041">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; getSymbol メソッド &gt; 正常ケース: flat記号の正しい文字" time="0.00026141">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; getSymbol メソッド &gt; 正常ケース: natural記号は空文字" time="0.000194935">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; getSymbol メソッド &gt; 正常ケース: 記号文字列の型確認" time="0.000495039">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 音楽理論的検証 &gt; 正常ケース: 全ての変化記号タイプが適切に処理される" time="0.000456607">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 音楽理論的検証 &gt; 正常ケース: 変化記号の表記が音楽記号として正しい" time="0.000520105">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 音楽理論的検証 &gt; 正常ケース: 変化記号の組み合わせテスト" time="0.00327198">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 不変性の確認 &gt; 正常ケース: valueプロパティの不変性" time="0.00024492">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 不変性の確認 &gt; 正常ケース: 静的インスタンスの不変性" time="0.000248417">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; TypeScript型安全性の確認 &gt; 正常ケース: AccidentalType型の制約" time="0.001376863">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; TypeScript型安全性の確認 &gt; 正常ケース: getSymbolメソッドの戻り値型" time="0.000244198">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 境界値・エッジケース &gt; 正常ケース: 全ての有効なAccidentalTypeをテスト" time="0.000407024">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 境界値・エッジケース &gt; 正常ケース: 静的インスタンスと動的インスタンスの値の一致" time="0.000368922">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; ユーティリティ用途での検証 &gt; 正常ケース: 文字列連結での使用" time="0.000231113">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; ユーティリティ用途での検証 &gt; 正常ケース: 条件分岐での使用" time="0.000464812">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; ユーティリティ用途での検証 &gt; 正常ケース: 配列やコレクションでの使用" time="0.000163286">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/Interval.test.ts" timestamp="2025-09-28T12:38:09.399Z" hostname="runnervm3ublj" tests="25" failures="0" errors="0" skipped="0" time="0.020126753">
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; constructor &gt; 正常ケース: セミトーン数でインスタンスを作成" time="0.002695919">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; constructor &gt; 正常ケース: 負の値も受け入れる（下行音程）" time="0.000493336">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的プロパティ &gt; 正常ケース: 基本的な音程の定義が正しい" time="0.001517718">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的プロパティ &gt; 正常ケース: 便宜上の別名も正しく定義されている" time="0.000263033">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; invert メソッド &gt; 正常ケース: 音程の方向を反転する" time="0.000234791">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; invert メソッド &gt; 正常ケース: 様々な音程の反転" time="0.000381095">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; invert メソッド &gt; 正常ケース: 二重反転で元に戻る" time="0.000198282">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 音楽理論的特性 &gt; 正常ケース: トライアド構築に必要な音程" time="0.000259668">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 音楽理論的特性 &gt; 正常ケース: マイナートライアド構築に必要な音程" time="0.000354835">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 音楽理論的特性 &gt; 正常ケース: セブンスコード構築に必要な音程" time="0.001019623">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 音楽理論的特性 &gt; 境界値ケース: 12音階内での音程の特殊性" time="0.000285566">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 実用例 &gt; 正常ケース: 様々な音程の組み合わせ" time="0.000265278">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 実用例 &gt; 正常ケース: 音程の算術演算" time="0.000227818">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; equals メソッド &gt; 正常ケース: 同じ半音数のIntervalは等しい" time="0.000484519">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; equals メソッド &gt; 正常ケース: 異なる半音数のIntervalは等しくない" time="0.000344907">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; equals メソッド &gt; 正常ケース: 負の値を含む比較" time="0.000274836">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; equals メソッド &gt; 正常ケース: 静的プロパティとの比較" time="0.000232777">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; compare &gt; 正常ケース: 半音数による比較" time="0.000482316">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; compare &gt; 正常ケース: 負の値を含む比較" time="0.000247485">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; 正常ケース: 半音数昇順でソート" time="0.000638618">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; 正常ケース: 元の配列は変更されない" time="0.000366858">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; 正常ケース: 負の値を含むソート" time="0.005443774">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; エッジケース: 空の配列" time="0.000303499">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; エッジケース: 単一要素" time="0.000241533">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; 正常ケース: 同じ半音数の場合は元の順序を保持" time="0.000203893">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/KeySignature.test.ts" timestamp="2025-09-28T12:38:09.410Z" hostname="runnervm3ublj" tests="23" failures="0" errors="0" skipped="0" time="0.026379104">
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; fromFifthsIndex &gt; 正常ケース: 有効なfifthsIndex（0-11）でKeySignatureを作成" time="0.001859278">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; fromFifthsIndex &gt; 異常ケース: 負の数でErrorをスロー" time="0.001705209">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; fromFifthsIndex &gt; 異常ケース: 11より大きい数でErrorをスロー" time="0.000459602">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; fromFifthsIndex &gt; 異常ケース: 非整数でErrorをスロー" time="0.000385584">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; キャッシング機能 &gt; 正常ケース: 同じfifthsIndexで同一インスタンスを返す" time="0.000222778">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; キャッシング機能 &gt; 正常ケース: 異なるfifthsIndexで異なるインスタンスを返す" time="0.001067382">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; 不変性 &gt; 正常ケース: インスタンスがfrozenされている" time="0.000267512">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; 不変性 &gt; 正常ケース: accidentalsがReadonlyMapとして機能" time="0.000382708">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; 変化記号なし（C Major / A minor） &gt; 正常ケース: fifthsIndex 0で変化記号なし" time="0.000843162">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: G Major（fifthsIndex 1）でF#を含む" time="0.000351339">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: D Major（fifthsIndex 2）でF#, C#を含む" time="0.000332224">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: A Major（fifthsIndex 3）でF#, C#, G#を含む" time="0.007098279">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: E Major（fifthsIndex 4）でF#, C#, G#, D#を含む" time="0.000525927">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: B Major（fifthsIndex 5）でF#, C#, G#, D#, A#を含む" time="0.000637175">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: G♭ Major（fifthsIndex 6）でB♭, E♭, A♭, D♭, G♭, C♭を含む" time="0.000535284">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: F Major（fifthsIndex 11）でB♭を含む" time="0.000343584">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: B♭ Major（fifthsIndex 10）でB♭, E♭を含む" time="0.000267302">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: E♭ Major（fifthsIndex 9）でB♭, E♭, A♭を含む" time="0.000302708">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: A♭ Major（fifthsIndex 8）でB♭, E♭, A♭, D♭を含む" time="0.000330621">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: D♭ Major（fifthsIndex 7）でB♭, E♭, A♭, D♭, G♭を含む" time="0.000381696">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; エッジケースと音楽理論検証 &gt; 正常ケース: 同じ調号内でシャープとフラットが同時に存在しない" time="0.000804199">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; エッジケースと音楽理論検証 &gt; 正常ケース: シャープ系調号で五度圈の順序を守る" time="0.003256359">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; エッジケースと音楽理論検証 &gt; 正常ケース: フラット系調号で五度圈の順序を守る" time="0.001313535">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/Note.test.ts" timestamp="2025-09-28T12:38:09.415Z" hostname="runnervm3ublj" tests="36" failures="0" errors="0" skipped="0" time="0.021851169">
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; constructor &gt; 正常ケース: PitchClassとオクターブでインスタンスを作成" time="0.001772428">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; constructor &gt; 正常ケース: 全音名でインスタンス作成可能" time="0.001422102">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; getNameFor メソッド &gt; 正常ケース: sharp調号での音名取得" time="0.001059553">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; getNameFor メソッド &gt; 正常ケース: flat調号での音名取得" time="0.000627104">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; getNameFor メソッド &gt; 正常ケース: natural調号での音名取得" time="0.000213609">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; getNameFor メソッド &gt; 正常ケース: エンハーモニック等価性の確認" time="0.000221705">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; toString getter &gt; 正常ケース: Tone.js用の正しい文字列表現を返す" time="0.000390401">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; transposeBy メソッド &gt; 正常ケース: 上行移調" time="0.000311604">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; transposeBy メソッド &gt; 正常ケース: オクターブを跨ぐ移調" time="0.0003686">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; transposeBy メソッド &gt; 正常ケース: 下行移調" time="0.000363621">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; transposeBy メソッド &gt; 正常ケース: オクターブ移調" time="0.000254727">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 境界値テスト &gt; 境界値ケース: 最低オクターブ（0）" time="0.000206086">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 境界値テスト &gt; 境界値ケース: 最高オクターブ（8）" time="0.000235641">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 境界値テスト &gt; 境界値ケース: 基準オクターブ（4）での全音名" time="0.001717666">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 音楽理論的特性 &gt; 正常ケース: 中央C（C4）の特性" time="0.000355937">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 音楽理論的特性 &gt; 正常ケース: オクターブ関係の音符" time="0.002988596">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 音楽理論的特性 &gt; 正常ケース: シャープ付き音名の処理" time="0.000770893">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 音楽理論的特性 &gt; 正常ケース: ナチュラル音名の処理" time="0.000925382">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 移調テスト &gt; 正常ケース: 基本的なインターバル移調" time="0.000252723">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 移調テスト &gt; 正常ケース: 複雑な移調計算" time="0.000284823">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 実用例 &gt; 正常ケース: 基本的なCメジャートライアドの構成音" time="0.00102556">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 実用例 &gt; 正常ケース: 異なるオクターブでの和音展開" time="0.000253405">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 実用例 &gt; 正常ケース: シャープを含む和音" time="0.000251281">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 同じピッチクラスと同じオクターブのNoteは等しい" time="0.000206226">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 同じNote同士は等しい" time="0.000158346">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なるオクターブのNoteは等しくない" time="0.000195596">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なるピッチクラスのNoteは等しくない" time="0.000198271">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なるピッチクラスと異なるオクターブのNoteは等しくない" time="0.000195496">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; エッジケース: null、undefined、非Noteオブジェクトとの比較" time="0.000264875">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なる生成方法で作られた同じNoteは等しい" time="0.000154159">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なるエンハーモニック表記の比較" time="0.000145532">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; 正常ケース: 音高順にソート" time="0.000319138">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; 正常ケース: 元の配列は変更されない" time="0.000352099">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; 正常ケース: 同じ音高の場合は元の順序を保持" time="0.000202759">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; エッジケース: 空の配列" time="0.000158126">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; エッジケース: 単一要素" time="0.00017642">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/PitchClass.test.ts" timestamp="2025-09-28T12:38:09.424Z" hostname="runnervm3ublj" tests="52" failures="0" errors="0" skipped="0" time="0.030813299">
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 基本プロパティ &gt; 正常ケース: 各音高クラスが正しいプロパティを持つ" time="0.001893284">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 基本プロパティ &gt; 正常ケース: 全ての音高クラスのプロパティが正しい" time="0.0023448">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 五度圏ファクトリメソッド &gt; 正常ケース: 五度圏インデックスからPitchClassを作成" time="0.000336059">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 五度圏ファクトリメソッド &gt; 境界値ケース: 範囲内の最大値でPitchClassを作成" time="0.000286557">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 五度圏ファクトリメソッド &gt; 異常ケース: 負の五度圏インデックスで処理" time="0.001152949">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 五度圏ファクトリメソッド &gt; 異常ケース: 範囲外の五度圏インデックスで処理" time="0.000225172">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: 長3度上に移調" time="0.000862254">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: 完全5度上に移調" time="0.000226173">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: 短3度下に移調（負の値）" time="0.000346208">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: オクターブを跨ぐ移調" time="0.000277179">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: 大きな値での移調（正規化確認）" time="0.000231603">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 音楽理論的検証 &gt; 正常ケース: 五度圏の順序が正しい" time="0.000335628">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 音楽理論的検証 &gt; 正常ケース: 半音階の順序が正しい" time="0.000364553">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 音楽理論的検証 &gt; 正常ケース: 移調による音程関係の確認" time="0.000727452">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; エッジケース &gt; 境界値ケース: 最後の五度圏インデックス（F）" time="0.00031458">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; エッジケース &gt; 境界値ケース: 0半音移調（変化なし）" time="0.000302355">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; エッジケース &gt; 境界値ケース: 完全オクターブ移調（12半音、変化なし）" time="0.000223207">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ダイアトニック音の表記 &gt; 正常ケース: Cメジャーキーでのダイアトニック音" time="0.001147037">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ダイアトニック音の表記 &gt; 正常ケース: G♭メジャーキー（flat系）でのダイアトニック音" time="0.001619723">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ダイアトニック音の表記 &gt; 正常ケース: B♭メジャーキー（flat系）でのダイアトニック音" time="0.000529051">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ノンダイアトニック音の表記 &gt; 正常ケース: Cメジャーキーでのノンダイアトニック音（sharp表記）" time="0.00043229">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ノンダイアトニック音の表記 &gt; 正常ケース: Fメジャーキー（flat系）でのノンダイアトニック音（flat表記）" time="0.000434394">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; エンハーモニック表記の確認 &gt; 正常ケース: 同じ音高でも異なるキーで異なる表記" time="0.000410418">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; エンハーモニック表記の確認 &gt; 正常ケース: 複数のエンハーモニック音での表記確認" time="0.000637363">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; 境界値・エッジケース &gt; 正常ケース: 全ての五度圏ポジションでの表記確認" time="0.001650711">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; 境界値・エッジケース &gt; 正常ケース: Aマイナーキー（sharp系）でのダイアトニック音" time="0.000493083">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; 境界値・エッジケース &gt; 正常ケース: F#マイナーキー（sharp系）でのダイアトニック音" time="0.000438731">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; 境界値・エッジケース &gt; 正常ケース: マイナーキーでのノンダイアトニック音（sharp表記）" time="0.000369281">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 正の値の正規化 &gt; 正常ケース: 0-11の範囲内の値はそのまま返す" time="0.000508963">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 正の値の正規化 &gt; 正常ケース: 12の倍数を正規化" time="0.000224771">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 正の値の正規化 &gt; 正常ケース: 12より大きい値を正規化" time="0.000272159">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 負の値の正規化 &gt; 正常ケース: -1から-11の値を正規化" time="0.00022441">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 負の値の正規化 &gt; 正常ケース: -12の倍数を正規化" time="0.000241332">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 負の値の正規化 &gt; 正常ケース: -12より小さい値を正規化" time="0.000226655">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 境界値とエッジケース &gt; 境界値ケース: 0を正規化" time="0.000129523">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 境界値とエッジケース &gt; 境界値ケース: 非常に大きな正の値" time="0.000157946">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 境界値とエッジケース &gt; 境界値ケース: 非常に小さな負の値" time="0.000167273">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 境界値とエッジケース &gt; 数学的検証: 結果が常に0-11の範囲内" time="0.001204765">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 音楽理論的応用での検証 &gt; 正常ケース: ピッチクラス計算での使用" time="0.00024023">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 音楽理論的応用での検証 &gt; 正常ケース: オクターブを跨ぐ移調計算" time="0.000136445">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 音楽理論的応用での検証 &gt; 正常ケース: 下行移調計算" time="0.000130945">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 音楽理論的応用での検証 &gt; 正常ケース: 大幅な移調計算" time="0.000127739">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; TypeScript型安全性の確認 &gt; 正常ケース: 整数以外の数値でも動作" time="0.000220924">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; TypeScript型安全性の確認 &gt; 正常ケース: 数値型チェック" time="0.000174056">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; SHARP_KEY_ORDER - シャープ調号の順序 &gt; 正常ケース: 音楽理論に正しいシャープ順序（F, C, G, D, A, E, B）" time="0.001256593">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; SHARP_KEY_ORDER - シャープ調号の順序 &gt; 正常ケース: 五度圏上の順序で並んでいる" time="0.000364743">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; FLAT_KEY_ORDER - フラット調号の順序 &gt; 正常ケース: 音楽理論に正しいフラット順序（B, E, A, D, G, C, F）" time="0.000546383">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; FLAT_KEY_ORDER - フラット調号の順序 &gt; 正常ケース: SHARP_KEY_ORDERの逆順である" time="0.000537557">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; FLAT_KEY_ORDER - フラット調号の順序 &gt; 正常ケース: 五度圏上でシャープ順序の逆順" time="0.000348522">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 調号システムとしての整合性" time="0.000258284">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 実際の調号計算での使用例" time="0.001035298">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 五度圏上での連続性" time="0.000352681">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/ScalePattern.test.ts" timestamp="2025-09-28T12:38:09.432Z" hostname="runnervm3ublj" tests="39" failures="0" errors="0" skipped="0" time="0.029554662">
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; constructor &gt; 正常ケース: 名前とインターバル配列とshortSymbolでインスタンスを作成" time="0.002929905">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; constructor &gt; 正常ケース: インスタンスがfreeze（不変）である" time="0.001993142">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Majorパターンが正しく定義されている" time="0.001065876">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: HarmonicMinorパターンが正しく定義されている" time="0.000647332">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Dorianモードが正しく定義されている" time="0.00032058">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Phrygianモードが正しく定義されている" time="0.000470511">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Lydianモードが正しく定義されている" time="0.000329867">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Mixolydianモードが正しく定義されている" time="0.000281968">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Aeolianモードが正しく定義されている" time="0.00040042">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Locrianモードが正しく定義されている" time="0.000436026">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 正常ケース: Majorパターンからモードを導出" time="0.000393347">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 正常ケース: 各度数からの導出で期待される回転パターン" time="0.000497151">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 境界値ケース: 最初の度数（1度）" time="0.000402844">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 境界値ケース: 最後の度数（7度）" time="0.000525263">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 異常ケース: 無効な開始度数でエラーが発生する" time="0.00151215">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 実用例 &gt; 正常ケース: 静的モードパターンがMajorから正しく導出されている" time="0.001011013">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 実用例 &gt; 正常ケース: 音楽理論的に正しい音程関係" time="0.00034144">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 実用例 &gt; 正常ケース: HarmonicMinorの特徴的な増2度音程" time="0.000161512">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 不変性検証 &gt; 正常ケース: 静的プロパティのインスタンスは変更不可" time="0.000227757">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 不変性検証 &gt; 正常ケース: derive後のインスタンスも変更不可" time="0.000211997">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 基本的なスケールパターンのインターバル配列 &gt; 正常ケース: Majorスケールのインターバル配列を取得" time="0.000262341">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 基本的なスケールパターンのインターバル配列 &gt; 正常ケース: Aeolian（Natural Minor）スケールのインターバル配列を取得" time="0.000227316">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 基本的なスケールパターンのインターバル配列 &gt; 正常ケース: HarmonicMinorスケールのインターバル配列を取得" time="0.000254707">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Dorianモードのインターバル配列を取得" time="0.00024532">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Phrygianモードのインターバル配列を取得" time="0.000206407">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Lydianモードのインターバル配列を取得" time="0.000203431">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Mixolydianモードのインターバル配列を取得" time="0.000227046">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Locrianモードのインターバル配列を取得" time="0.000227436">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 配列の基本的性質の検証 &gt; 正常ケース: 配列の最初の要素は常に0" time="0.000524391">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 配列の基本的性質の検証 &gt; 正常ケース: 配列の長さはintervals配列の長さ + 1" time="0.000328235">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 配列の基本的性質の検証 &gt; 正常ケース: 配列の要素は昇順に並んでいる" time="0.003879343">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 配列の基本的性質の検証 &gt; 正常ケース: 配列の要素は全て0-12の範囲内" time="0.002055208">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; カスタムパターンでの動作検証 &gt; 正常ケース: 単一音程のパターン" time="0.00022956">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; カスタムパターンでの動作検証 &gt; 正常ケース: 3音のパターン" time="0.000182041">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; カスタムパターンでの動作検証 &gt; 正常ケース: derive後のパターンでも正しく動作" time="0.0003312">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 数学的検証 &gt; 正常ケース: 累積インターバルの計算が正しい" time="0.000260338">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 数学的検証 &gt; 正常ケース: HarmonicMinorの特徴的な増2度を含む配列" time="0.00025095">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 型安全性の確認 &gt; 正常ケース: 返り値は数値配列" time="0.000588591">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 型安全性の確認 &gt; 正常ケース: 返り値は変更可能な配列（元のデータは変更されない）" time="0.000672319">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/key/test/Key.test.ts" timestamp="2025-09-28T12:38:09.441Z" hostname="runnervm3ublj" tests="48" failures="0" errors="0" skipped="0" time="0.045333874">
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; メジャーキーのKeySignature計算 &gt; 正常ケース: C major → 調号なし (fifthsIndex: 0)" time="0.003165196">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; メジャーキーのKeySignature計算 &gt; 正常ケース: G major → 1つのシャープ (fifthsIndex: 1)" time="0.000532927">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; メジャーキーのKeySignature計算 &gt; 正常ケース: F major → 1つのフラット (fifthsIndex: 11)" time="0.00033097">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; メジャーキーのKeySignature計算 &gt; 正常ケース: B♭ major → 2つのフラット (fifthsIndex: 10)" time="0.000276848">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; マイナーキーのKeySignature計算（相対長調から導出） &gt; 正常ケース: A minor → C major相対 (fifthsIndex: 0)" time="0.000472315">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; マイナーキーのKeySignature計算（相対長調から導出） &gt; 正常ケース: E minor → G major相対 (fifthsIndex: 1)" time="0.000304961">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; マイナーキーのKeySignature計算（相対長調から導出） &gt; 正常ケース: F# minor → A major相対 (fifthsIndex: 3)" time="0.000312174">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; マイナーキーのKeySignature計算（相対長調から導出） &gt; 正常ケース: D minor → F major相対 (fifthsIndex: 11)" time="0.00027255">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 全ての五度圏位置でKeySignatureが正しく計算される" time="0.002410112">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 相対調関係のKeySignatureが一致する" time="0.000376575">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; constructor &gt; 正常ケース: PitchClassとScalePatternから調を作成できる" time="0.000352099">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; constructor &gt; 正常ケース: マイナーキーを作成できる" time="0.000284483">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; keyName getter &gt; 正常ケース: キー名を正しく取得できる" time="0.000246773">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; buildTriad - Key固有テスト &gt; 正常ケース: C Majorの代表的な和音名が正しく表示される" time="0.00097205">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 特定和音取得メソッド &gt; 正常ケース: トニックコードを正しく取得" time="0.000380513">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 特定和音取得メソッド &gt; 正常ケース: ドミナントコードを正しく取得" time="0.000295453">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 特定和音取得メソッド &gt; 正常ケース: サブドミナントコードを正しく取得" time="0.000262031">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; fromCircleOfFifths ファクトリメソッド &gt; 正常ケース: 五度圏インデックスからメジャーキーを生成" time="0.000314759">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; fromCircleOfFifths ファクトリメソッド &gt; 正常ケース: 五度圏インデックスからマイナーキーを生成" time="0.000279764">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; fromCircleOfFifths ファクトリメソッド &gt; 正常ケース: 全ての五度圏インデックスでキーを生成可能" time="0.007534546">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; primaryScale プロパティ &gt; 正常ケース: 主要スケールが正しく設定される" time="0.000218859">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 境界値テスト &gt; 境界値ケース: 全ての五度圏ポジションでのキー作成" time="0.002797909">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 境界値テスト &gt; エンハーモニック表記: メジャーキーは♭表記、マイナーキーは#表記" time="0.001359676">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 音楽理論的特性 &gt; 正常ケース: C Majorキーのダイアトニックコード進行" time="0.000440515">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 音楽理論的特性 &gt; 正常ケース: 相対調関係の確認" time="0.000212198">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 実用例 &gt; 正常ケース: 一般的なキーでの基本和音" time="0.000537697">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: メジャーキーの日本語度数名配列を正しく返す" time="0.001012736">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: マイナーキーの日本語度数名配列を正しく返す" time="0.000403906">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: 異なるメジャーキーでも同じ度数名を返す" time="0.000210995">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: 常に同じ参照を返す（メジャーキー）" time="0.000190136">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: 常に同じ参照を返す（マイナーキー）" time="0.000166421">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 正常ケース: メジャーキーから相対マイナーキーを取得" time="0.000341088">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 正常ケース: マイナーキーから相対メジャーキーを取得" time="0.000326451">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 正常ケース: G Majorから相対マイナーキー（E Minor）を取得" time="0.000304119">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 正常ケース: E MinorからG Majorを取得" time="0.000312374">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 境界値ケース: 五度圏の境界での相対調" time="0.000268843">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getParallelKey &gt; 正常ケース: メジャーキーから同主マイナーキーを取得" time="0.00035244">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getParallelKey &gt; 正常ケース: マイナーキーから同主メジャーキーを取得" time="0.009844321">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getParallelKey &gt; 正常ケース: G Majorから同主マイナーキー（G Minor）を取得" time="0.00040054">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getParallelKey &gt; 正常ケース: G MinorからG Majorを取得" time="0.00033088">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getDominantKey &gt; 正常ケース: C Majorからドミナント調（G Major）を取得" time="0.000393236">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getDominantKey &gt; 正常ケース: A Minorからドミナント調（E Minor）を取得" time="0.000319999">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getDominantKey &gt; 正常ケース: F Majorからドミナント調（C Major）を取得" time="0.000317995">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getDominantKey &gt; 境界値ケース: 五度圏の境界でのドミナント調" time="0.000371927">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getSubdominantKey &gt; 正常ケース: C Majorからサブドミナント調（F Major）を取得" time="0.00036866">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getSubdominantKey &gt; 正常ケース: A Minorからサブドミナント調（D Minor）を取得" time="0.000359463">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getSubdominantKey &gt; 正常ケース: G Majorからサブドミナント調（C Major）を取得" time="0.000292448">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getSubdominantKey &gt; 境界値ケース: 五度圏の境界でのサブドミナント調" time="0.000264456">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/scale/test/Scale.test.ts" timestamp="2025-09-28T12:38:09.452Z" hostname="runnervm3ublj" tests="32" failures="0" errors="0" skipped="0" time="0.025022577">
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; スケール作成 &gt; 正常ケース: PitchClassとScalePatternからスケールを作成" time="0.002830529">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; スケール作成 &gt; 正常ケース: デフォルトオクターブでスケールを作成" time="0.000485689">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; スケール作成 &gt; 正常ケース: 指定オクターブでスケールを作成" time="0.000392495">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 構成音取得 &gt; 正常ケース: Cメジャースケールの構成音" time="0.000773238">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 構成音取得 &gt; 正常ケース: Aナチュラルマイナースケールの構成音" time="0.000515495">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 構成音取得 &gt; 正常ケース: Gメジャースケールの構成音" time="0.000611885">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 正常ケース: 各度数の音を正しく取得" time="0.000567593">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 境界値ケース: 最初の度数（1度）" time="0.000215964">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 境界値ケース: 最後の度数（7度）" time="0.000337662">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 異常ケース: 無効な度数（0）でundefinedを返す" time="0.000413425">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 異常ケース: 無効な度数（9）でundefinedを返す" time="0.000205706">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 異常ケース: 負の度数でundefinedを返す" time="0.000191148">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; オクターブ処理 &gt; 正常ケース: 低いオクターブでのスケール" time="0.000264004">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; オクターブ処理 &gt; 正常ケース: 高いオクターブでのスケール" time="0.000593782">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; オクターブ処理 &gt; 正常ケース: オクターブを跨ぐスケール" time="0.000386353">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 異なるスケールパターン &gt; 正常ケース: ミクソリディアンモードの構成音" time="0.000582941">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 異なるスケールパターン &gt; 正常ケース: ドリアンモードの構成音" time="0.000572883">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 音楽理論的検証 &gt; 正常ケース: メジャースケールの音程関係" time="0.000418294">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 音楽理論的検証 &gt; 正常ケース: ナチュラルマイナーの音程関係" time="0.000284473">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; エッジケース &gt; 境界値ケース: 最低オクターブでのスケール" time="0.000239328">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; エッジケース &gt; 境界値ケース: 高オクターブでのスケール" time="0.000230962">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; ダイアトニック音（スケール構成音）の分析 &gt; 正常ケース: Cメジャースケールのダイアトニック音を正しく分析" time="0.005020189">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; ダイアトニック音（スケール構成音）の分析 &gt; 正常ケース: Aナチュラルマイナースケールのダイアトニック音を正しく分析" time="0.001010091">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; ノンダイアトニック音（変化音）の分析 &gt; 正常ケース: Cメジャースケールのノンダイアトニック音を正しく分析" time="0.001023095">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; ノンダイアトニック音（変化音）の分析 &gt; 正常ケース: マイナースケールでのノンダイアトニック音分析" time="0.001044004">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: step = 0（ルート音）" time="0.000274093">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: step = 11（オクターブ下の音）" time="0.000251802">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: 負の値（正規化される）" time="0.000217247">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: 12以上の値（正規化される）" time="0.000270967">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: 大きな値での正規化" time="0.000239699">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 異なるスケールパターンでの動作確認 &gt; 正常ケース: ドリアンモードでの度数分析" time="0.000780371">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 異なるスケールパターンでの動作確認 &gt; 正常ケース: ミクソリディアンモードでの度数分析" time="0.000668492">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/services/test/AudioEngine.test.ts" timestamp="2025-09-28T12:38:09.459Z" hostname="runnervm3ublj" tests="16" failures="0" errors="0" skipped="0" time="0.041907951">
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setVolume &gt; 正常ケース: 音量設定がconfigに反映される" time="0.002620927">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setVolume &gt; 境界値ケース: 極端な音量値" time="0.002019198">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setArpeggioSpeed &gt; 正常ケース: 有効範囲内の速度設定" time="0.000781616">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setArpeggioSpeed &gt; 境界値ケース: 最小値以下の場合は50msに制限" time="0.000381847">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setArpeggioSpeed &gt; 境界値ケース: 最大値以上の場合は500msに制限" time="0.000411492">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; play &gt; 正常ケース: 和音再生インターフェースのテスト" time="0.002256063">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; config初期値 &gt; 正常ケース: デフォルト設定値の確認" time="0.000294933">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 設定の統合テスト &gt; 正常ケース: 設定変更後の和音再生" time="0.000913244">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 設定の統合テスト &gt; 正常ケース: 設定のリセット動作" time="0.000368872">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 型安全性の検証 &gt; 正常ケース: Chordエンティティとの統合" time="0.013882708">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 型安全性の検証 &gt; 正常ケース: 音量設定の型安全性" time="0.001745655">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 型安全性の検証 &gt; 正常ケース: アルペジオ速度設定の型安全性" time="0.001255645">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 実用的な使用例 &gt; 正常ケース: 基本的な和音進行の再生" time="0.004509802">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 実用的な使用例 &gt; 正常ケース: Toneコンテキストが停止状態の場合にTone.start()が呼ばれる" time="0.002475384">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 実用的な使用例 &gt; 正常ケース: 動的な設定変更とセッション" time="0.001861543">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 実用的な使用例 &gt; 正常ケース: 異なるオクターブでの再生" time="0.003585297">
        </testcase>
    </testsuite>
    <testsuite name="src/features/key-controller/test/KeyController.test.tsx" timestamp="2025-09-28T12:38:09.465Z" hostname="runnervm3ublj" tests="12" failures="0" errors="0" skipped="0" time="0.309389122">
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 基本レンダリング &gt; 正常ケース: コンポーネントが正しくレンダリングされる" time="0.129699705">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 基本レンダリング &gt; 正常ケース: カスタムタイトルが設定される" time="0.016273885">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 基本レンダリング &gt; 正常ケース: className が適用される" time="0.008891122">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 選択状態の表示 &gt; 正常ケース: 現在のキーに対応するボタンが選択状態になる" time="0.015311769">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 選択状態の表示 &gt; 正常ケース: 現在のキー名が表示される" time="0.008170971">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; ボタンクリック動作 &gt; 正常ケース: トニックボタンクリックでキーが変更される" time="0.02003959">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; ボタンクリック動作 &gt; 正常ケース: 全てのトニックボタンが機能する" time="0.036449088">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; ボタンクリック動作 &gt; 正常ケース: 同じボタンを再度クリックしても動作する" time="0.008424827">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; アクセシビリティ &gt; 正常ケース: 全てのボタンに適切なaria-labelが設定される" time="0.014339344">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; アクセシビリティ &gt; 正常ケース: ボタンにキーボードフォーカスが可能" time="0.027318126">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; レスポンシブデザイン &gt; 正常ケース: グリッドレイアウトのクラスが適用される" time="0.010346874">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; レスポンシブデザイン &gt; 正常ケース: タイトルがレスポンシブ表示クラスを持つ" time="0.011332252">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/constants/test/hubs.test.ts" timestamp="2025-09-28T12:38:09.467Z" hostname="runnervm3ublj" tests="9" failures="0" errors="0" skipped="0" time="0.00984689">
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubDisplayNameEn関数 &gt; 正常ケース: circle-of-fifthsの英語名を取得" time="0.001501877">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubDisplayNameEn関数 &gt; 正常ケース: chromatic-circleの英語名を取得" time="0.00021821">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubDisplayNameEn関数 &gt; 境界値ケース: 全てのHubTypeの英語名を正しく取得" time="0.001414903">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: 正しいオプション配列を生成" time="0.000636524">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: 配列の各要素が正しい型構造を持つ" time="0.001926453">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: shortNameがlabelに使用される" time="0.000260098">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: descriptionがHUBSデータと一致する" time="0.000348284">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 境界値ケース: 全てのHubTypeがオプションに含まれる" time="0.001062493">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: 関数の呼び出しが冪等である" time="0.000455434">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/hooks/test/useBodyScrollLock.test.ts" timestamp="2025-09-28T12:38:09.471Z" hostname="runnervm3ublj" tests="9" failures="0" errors="0" skipped="0" time="0.01218401">
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = true の場合 &gt; 正常ケース: bodyのスタイルが正しく設定される" time="0.003793247">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = true の場合 &gt; 正常ケース: クリーンアップ時に元の状態に復元される" time="0.002189178">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = true の場合 &gt; 境界値ケース: scrollY = 0 の場合" time="0.000529163">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = false の場合 &gt; 正常ケース: bodyのスタイルが変更されない" time="0.000500819">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = false の場合 &gt; 正常ケース: scrollToが呼ばれない" time="0.00049017">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; 状態変更 &gt; 正常ケース: locked が true → false に変更された場合" time="0.000461516">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; 状態変更 &gt; 正常ケース: locked が false → true に変更された場合" time="0.000537188">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; 実際のフック使用例 &gt; 正常ケース: フックのAPIが正しく動作する" time="0.001219078">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; 実際のフック使用例 &gt; 正常ケース: フックが引数を受け取る" time="0.000475993">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/hooks/test/useFixedViewportHeight.test.ts" timestamp="2025-09-28T12:38:09.474Z" hostname="runnervm3ublj" tests="12" failures="0" errors="0" skipped="0" time="0.095586527">
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 初期化 &gt; 正常ケース: 初期状態でwindow.innerHeightを正しく取得する" time="0.046782206">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 初期化 &gt; 境界値ケース: window.innerHeightが0の場合" time="0.005608282">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 初期化 &gt; 境界値ケース: window.innerHeightが極大値の場合" time="0.004262738">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 固定値の維持 &gt; 正常ケース: 初回取得後は値が固定される" time="0.003578013">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 固定値の維持 &gt; 正常ケース: 複数回の再レンダリングでも値が固定される" time="0.005241614">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; SSR対応 &gt; 正常ケース: windowが正常にアクセスできることを確認" time="0.003231523">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; SSR対応 &gt; 正常ケース: useEffectがクライアントサイドでのみ実行される" time="0.00202527">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 複数インスタンス &gt; 正常ケース: 複数のインスタンスが独立して動作する" time="0.003862737">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 複数インスタンス &gt; 正常ケース: 異なるタイミングでマウントされたインスタンス" time="0.010129726">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 戻り値の型 &gt; 正常ケース: 戻り値がnumber型である" time="0.002031732">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 戻り値の型 &gt; 正常ケース: 戻り値が有限数である" time="0.001793245">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 戻り値の型 &gt; 正常ケース: 戻り値が非負数である" time="0.002333408">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/utils/test/keyColorUtils.test.ts" timestamp="2025-09-28T12:38:09.476Z" hostname="runnervm3ublj" tests="3" failures="0" errors="0" skipped="0" time="0.004324893">
        <testcase classname="src/shared/utils/test/keyColorUtils.test.ts" name="keyColorUtils &gt; getMusicColorKey &gt; 正常ケース: C Majorで正確なCSS変数名を生成する" time="0.001873504">
        </testcase>
        <testcase classname="src/shared/utils/test/keyColorUtils.test.ts" name="keyColorUtils &gt; getMusicColorKey &gt; 正常ケース: A Minorで正確なCSS変数名を生成する" time="0.000285155">
        </testcase>
        <testcase classname="src/shared/utils/test/keyColorUtils.test.ts" name="keyColorUtils &gt; getMusicColorKey &gt; 正常ケース: F# Majorで正確なCSS変数名を生成する" time="0.000399761">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/utils/test/musicColorSystem.test.ts" timestamp="2025-09-28T12:38:09.477Z" hostname="runnervm3ublj" tests="5" failures="0" errors="0" skipped="0" time="0.007431914">
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: 全84色のCSS変数を正確なHSL値で生成する" time="0.002070475">
        </testcase>
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: 84個のCSS変数が生成される" time="0.001469207">
        </testcase>
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: 正確なHSL形式でカラー値が出力される" time="0.000477476">
        </testcase>
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: 五度圏順の色相進行（30°刻み）が正確に生成される" time="0.001072071">
        </testcase>
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: モード階層の明度進行（70%→28%）が正確に生成される" time="0.000737323">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/utils/test/scroll.test.ts" timestamp="2025-09-28T12:38:09.478Z" hostname="runnervm3ublj" tests="19" failures="0" errors="0" skipped="0" time="0.063494827">
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 正常系 &gt; 正常ケース: data-scrollable属性がある要素を優先的に検索する" time="0.016227482">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 正常系 &gt; 正常ケース: overflow-y: auto の要素を検索する" time="0.008616163">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 正常系 &gt; 正常ケース: overflow-y: scroll の要素を検索する" time="0.012394835">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 正常系 &gt; 正常ケース: 複数の親要素を遡って検索する" time="0.00149798">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 境界値・異常系 &gt; 境界値ケース: スクロール可能な親要素が存在しない場合はnullを返す" time="0.005817132">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 境界値・異常系 &gt; 境界値ケース: document.bodyに到達した場合はnullを返す" time="0.000859773">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 境界値・異常系 &gt; 境界値ケース: parentElementがnullの場合はnullを返す" time="0.000523041">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 境界値・異常系 &gt; 境界値ケース: targetがdocument.bodyの場合はnullを返す" time="0.004726236">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 正常系 &gt; 上方向ドラッグ + 最上部の場合はドラッグを許可する" time="0.000496702">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 正常系 &gt; 正常ケース: 上方向ドラッグ + 最上部以外の場合はドラッグを不許可にする" time="0.000306585">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 正常系 &gt; 正常ケース: 下方向ドラッグ + 最下部の場合はドラッグを許可する" time="0.000419587">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 正常系 &gt; 正常ケース: 下方向ドラッグ + 最下部以外の場合はドラッグを不許可にする" time="0.000296316">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: scrollTop = 0 の場合（最上部）" time="0.000312656">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: scrollTop + clientHeight = scrollHeight - 1 の場合（1px余裕の境界）" time="0.002013758">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: scrollTop + clientHeight = scrollHeight の場合（完全な最下部）" time="0.000348113">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: scrollTop + clientHeight &gt; scrollHeight の場合（理論的には起こらないが）" time="0.000386666">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: スクロールがない場合（scrollHeight = clientHeight）" time="0.000288071">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; DragDirection型の網羅 &gt; 正常ケース: up方向のドラッグをテストする" time="0.000259256">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; DragDirection型の網羅 &gt; 正常ケース: down方向のドラッグをテストする" time="0.000256311">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" timestamp="2025-09-28T12:38:09.483Z" hostname="runnervm3ublj" tests="12" failures="0" errors="0" skipped="0" time="0.114900114">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; 基本機能 &gt; 正常ケース: フックが正しい関数群を返す" time="0.047477721">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; 基本機能 &gt; 正常ケース: 複数回レンダリングでも安定したインスタンスを返す" time="0.006295121">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 正常ケース: 五度圏ポジションからメジャーコードを再生" time="0.010010743">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 正常ケース: 五度圏ポジションからマイナーコードを再生" time="0.00563346">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 正常ケース: 異なる五度圏ポジションでの再生" time="0.006055161">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 異常ケース: コード生成でエラーが発生した場合のハンドリング" time="0.008815009">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 異常ケース: 音響再生でエラーが発生した場合のハンドリング" time="0.002786768">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; setVolume &gt; 正常ケース: 音量設定がAudioEngineに伝達される" time="0.002176604">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; setVolume &gt; 正常ケース: 複数回の音量設定" time="0.002761471">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; setArpeggioSpeed &gt; 正常ケース: アルペジオ速度設定がAudioEngineに伝達される" time="0.005390895">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; setArpeggioSpeed &gt; 正常ケース: 複数回のアルペジオ速度設定" time="0.008940765">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; 統合テスト &gt; 正常ケース: 設定変更と和音再生の組み合わせ" time="0.006159537">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" timestamp="2025-09-28T12:38:09.488Z" hostname="runnervm3ublj" tests="8" failures="0" errors="0" skipped="0" time="0.057337951">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; 正常ケース: ダイアトニックコード非表示時、常にfalseを返す" time="0.029792038">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; 正常ケース: ダイアトニックコード表示時、該当コードでtrueを返す" time="0.003999584">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; 正常ケース: ダイアトニックコード表示時、非該当コードでfalseを返す" time="0.003101359">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; 境界値ケース: 異なるキーでのダイアトニックコード判定" time="0.002547781">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; ストア変更テスト: layerStore状態変更時の再計算" time="0.005197081">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; キー変更テスト: 異なるキー引数での動作確認" time="0.004495034">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; メモ化テスト: 同じ引数で複数回呼び出した際の一貫性" time="0.002905081">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; createCompositeKey utility function &gt; 正常ケース: 異なる引数で異なるキーを生成" time="0.003045674">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" timestamp="2025-09-28T12:38:09.489Z" hostname="runnervm3ublj" tests="11" failures="0" errors="0" skipped="0" time="0.062422372">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 統合機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.019100698">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 統合機能 &gt; 正常ケース: 個別フックが正しい引数で呼ばれる" time="0.005266652">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 統合機能 &gt; 正常ケース: ストア状態変更時の個別フック再実行" time="0.003617287">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 異なるセグメントでの動作 &gt; 正常ケース: 異なるポジションのセグメント" time="0.002414841">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 異なるセグメントでの動作 &gt; 正常ケース: 異なるキーでの動作" time="0.002865677">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; リップルエフェクト統合 &gt; 正常ケース: リップルトリガーが正しく統合される" time="0.002388071">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; リップルエフェクト統合 &gt; 正常ケース: リップル状態が正しく返される" time="0.002128494">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; Props変更の影響 &gt; 正常ケース: Props変更時の個別フック再実行" time="0.002811565">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; Props変更の影響 &gt; 正常ケース: 同じPropsでの安定性" time="0.002999517">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; エラーハンドリング &gt; 異常ケース: useAudioがundefinedを返す場合" time="0.008257483">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; エラーハンドリング &gt; 異常ケース: ストア関数がnullの場合" time="0.008060353">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" timestamp="2025-09-28T12:38:09.491Z" hostname="runnervm3ublj" tests="17" failures="0" errors="0" skipped="0" time="0.10352747">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.019386217">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 基本機能 &gt; 正常ケース: layoutオブジェクトが正しい構造を持つ" time="0.00457262">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; ダイアトニックハイライト機能 &gt; 正常ケース: ハイライト非表示時の動作" time="0.004120811">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; ダイアトニックハイライト機能 &gt; 正常ケース: ハイライト表示時の動作" time="0.002612162">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; ダイアトニックハイライト機能 &gt; 正常ケース: 異なるローマ数字での動作確認" time="0.010100251">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 色計算機能 &gt; 正常ケース: keyAreaColorの計算" time="0.002516522">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 色計算機能 &gt; 正常ケース: currentKeyColorの計算" time="0.00524405">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 色計算機能 &gt; 正常ケース: 異なるキーでの色計算" time="0.006553977">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 色計算機能 &gt; 正常ケース: マイナーキーでの色計算" time="0.011992512">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; レイアウト計算機能 &gt; 正常ケース: レイアウトオフセットの適用" time="0.009310158">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; レイアウト計算機能 &gt; 正常ケース: 異なるテキスト位置での計算" time="0.006276086">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 依存関係の管理 &gt; 正常ケース: useDiatonicChordHighlightが正しい引数で呼ばれる" time="0.001285662">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 依存関係の管理 &gt; 正常ケース: Props変更時の再計算" time="0.002487788">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 同じProps値での複数回レンダリング" time="0.002895213">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 依存配列の動作確認" time="0.00136453">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; エラーハンドリング &gt; 異常ケース: getMusicColorVariableがエラーをスローした場合" time="0.006697727">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; エラーハンドリング &gt; 異常ケース: useDiatonicChordHighlightがnullを返した場合" time="0.003546404">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" timestamp="2025-09-28T12:38:09.493Z" hostname="runnervm3ublj" tests="17" failures="0" errors="0" skipped="0" time="0.088153547">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.026711769">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 基本機能 &gt; 正常ケース: 複数回レンダリングで安定した関数参照を返す" time="0.006071817">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; useLongPress統合 &gt; 正常ケース: useLongPressが正しい引数で呼ばれる" time="0.005892524">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; useLongPress統合 &gt; 正常ケース: ハンドラがuseLongPressから返される" time="0.002838995">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; コールバック関数の動作 &gt; 正常ケース: handleClickコールバックの動作" time="0.003063627">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; コールバック関数の動作 &gt; 正常ケース: handleLongPressコールバックの動作" time="0.003152113">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; コールバック関数の動作 &gt; 正常ケース: マイナーキーでのhandleLongPress動作" time="0.002554583">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; コールバック関数の動作 &gt; 正常ケース: handleLongPressStartコールバックの動作" time="0.002053312">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseEnter機能 &gt; 正常ケース: マウス進入時の処理" time="0.002659439">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseEnter機能 &gt; 正常ケース: 異なるキーでのマウス進入" time="0.016629867">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseLeave機能 &gt; 正常ケース: マウス退出時の処理" time="0.001664001">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseLeave機能 &gt; 正常ケース: 複数回のマウス退出" time="0.001672668">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseLeave機能 &gt; 正常ケース: マウス進入→退出のサイクル" time="0.00201488">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 依存関係とメモ化 &gt; 正常ケース: Props変更時の関数再生成" time="0.002274747">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 依存関係とメモ化 &gt; 正常ケース: 同じPropsでの関数安定性" time="0.003344685">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 統合テスト &gt; 正常ケース: フル操作シーケンス" time="0.001448767">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 統合テスト &gt; 正常ケース: useLongPressの統合テスト" time="0.001367485">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" timestamp="2025-09-28T12:38:09.499Z" hostname="runnervm3ublj" tests="23" failures="0" errors="0" skipped="0" time="0.114893252">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.022637121">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 基本機能 &gt; 正常ケース: 初期状態（選択・ホバーなし）" time="0.00222224">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 選択状態の判定 &gt; 正常ケース: 選択されている場合" time="0.00264896">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 選択状態の判定 &gt; 正常ケース: 異なるキーが選択されている場合" time="0.002236948">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 選択状態の判定 &gt; 正常ケース: メジャー・マイナーキーの判定" time="0.004528348">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 選択状態の判定 &gt; 境界値ケース: fifthsIndexとisMajorの厳密な比較" time="0.0071843">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; ホバー状態の判定 &gt; 正常ケース: ホバーされている場合" time="0.005850854">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; ホバー状態の判定 &gt; 正常ケース: 異なるキーがホバーされている場合" time="0.005043522">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; ホバー状態の判定 &gt; 正常ケース: 選択かつホバーの場合" time="0.014139552">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: メジャーキーの通常状態" time="0.001948668">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: マイナーキーの通常状態" time="0.001791845">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: 選択状態の優先" time="0.006578637">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: ホバー状態" time="0.001638487">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: 選択状態がホバー状態より優先される" time="0.00194442">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; textClassName &gt; 正常ケース: メジャーキーのテキストクラス" time="0.001120698">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; textClassName &gt; 正常ケース: マイナーキーのテキストクラス" time="0.001156555">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; textClassName &gt; 正常ケース: 状態によらずキータイプでテキストクラスが決まる" time="0.00109005">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 状態変更の反応性 &gt; 正常ケース: ストア状態変更時の再計算" time="0.003903799">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 状態変更の反応性 &gt; 正常ケース: ホバー状態の変化" time="0.003474094">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 同じProps・ストア状態での結果安定性" time="0.001261091">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; メモ化とパフォーマンス &gt; 正常ケース: Props変更時の再計算" time="0.002077459">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; エッジケース &gt; 正常ケース: nullストア値の処理" time="0.001134905">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; エッジケース &gt; 境界値ケース: 極端なfifthsIndex値" time="0.004733983">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" timestamp="2025-09-28T12:38:09.504Z" hostname="runnervm3ublj" tests="16" failures="0" errors="0" skipped="0" time="0.135757392">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.044972136">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; 基本機能 &gt; 正常ケース: 複数回レンダリングで安定した関数参照を返す" time="0.006871341">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: 短時間クリック（onClick）" time="0.005248777">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: 長押し（onLongPress）" time="0.002935447">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: カスタム遅延時間" time="0.008157583">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: マウスムーブでの中断" time="0.006264712">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: マウスリーブでの中断" time="0.005196469">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; タッチイベント処理 &gt; 正常ケース: 短時間タッチ（onClick）" time="0.005685636">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; タッチイベント処理 &gt; 正常ケース: 長押しタッチ（onLongPress）" time="0.005701425">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; タッチイベント処理 &gt; 正常ケース: タッチムーブでの中断" time="0.007033755">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; エッジケース &gt; 正常ケース: 遅延時間0での即座実行" time="0.011985852">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; エッジケース &gt; 正常ケース: 負の遅延時間の処理" time="0.005870523">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; エッジケース &gt; 異常ケース: コールバック関数でエラーが発生" time="0.006667358">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 同じPropsでの関数安定性" time="0.005407084">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 異なるコールバックでの再生成" time="0.002298772">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; 複雑なシーケンス &gt; 正常ケース: 複数回の操作サイクル" time="0.00249506">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" timestamp="2025-09-28T12:38:09.508Z" hostname="runnervm3ublj" tests="18" failures="0" errors="0" skipped="0" time="0.115712324">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.022757362">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; 基本機能 &gt; 正常ケース: 初期状態でリップルが非活性" time="0.003233205">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; 基本機能 &gt; 正常ケース: 複数回レンダリングで安定した関数参照を返す" time="0.004848936">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルトリガー機能 &gt; 正常ケース: triggerRippleでリップルが活性化" time="0.004263037">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルトリガー機能 &gt; 正常ケース: 複数回triggerRippleを呼び出し" time="0.003755555">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルトリガー機能 &gt; 正常ケース: triggerRipple後の自動リセット" time="0.003788577">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルトリガー機能 &gt; 正常ケース: 適切なタイムアウト時間での自動リセット" time="0.00387527">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルリセット機能 &gt; 正常ケース: resetRippleで手動リセット" time="0.002829938">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルリセット機能 &gt; 正常ケース: 非活性状態でのresetRipple" time="0.002539144">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルリセット機能 &gt; 正常ケース: 複数回resetRippleを呼び出し" time="0.005470683">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; タイマー管理 &gt; 正常ケース: 手動リセット後の自動リセットタイマー無効化" time="0.013644737">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; タイマー管理 &gt; 正常ケース: 複数回のトリガーでタイマーリセット" time="0.013506027">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; タイマー管理 &gt; 正常ケース: コンポーネントアンマウント時のタイマークリア" time="0.007789282">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; エッジケース &gt; 正常ケース: 高速連続トリガー" time="0.006248682">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; エッジケース &gt; 正常ケース: トリガー→リセット→トリガーのサイクル" time="0.003152184">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 関数の安定性" time="0.003307775">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 状態変更時の適切な再レンダリング" time="0.002374164">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; 統合テスト &gt; 正常ケース: 完全なリップルライフサイクル" time="0.002436975">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" timestamp="2025-09-28T12:38:09.513Z" hostname="runnervm3ublj" tests="12" failures="0" errors="0" skipped="0" time="0.046598401">
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; 基本機能 &gt; 正常ケース: 関数が正しい構造を返す" time="0.002631447">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; 基本機能 &gt; 正常ケース: 複数回呼び出しで同じ値を返す（事前計算済み）" time="0.000407084">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; viewBox計算 &gt; 正常ケース: 正しいSVGビューボックス形式" time="0.000641285">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; viewBox計算 &gt; 境界値ケース: CIRCLE_LAYOUT.RADIUSの値に基づく計算" time="0.001582449">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; segments配列 &gt; 正常ケース: 12セグメントが生成される" time="0.000289533">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; segments配列 &gt; 正常ケース: 各セグメントが必要なプロパティを持つ" time="0.014632013">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; segments配列 &gt; 正常ケース: セグメントのposition値が0-11の範囲" time="0.001056773">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; segments配列 &gt; 正常ケース: 各セグメントのキー情報が正しく設定される" time="0.005922752">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; textRotation &gt; 正常ケース: textRotationが数値である" time="0.000347472">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; テキスト位置計算 &gt; 正常ケース: 3つの異なる半径でテキスト位置が計算される" time="0.009364539">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; 事前計算の最適化 &gt; パフォーマンステスト: 関数呼び出しが高速である" time="0.001420375">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; 事前計算の最適化 &gt; メモ化テスト: 同じオブジェクト参照が返される" time="0.000618982">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/geometry.test.ts" timestamp="2025-09-28T12:38:09.516Z" hostname="runnervm3ublj" tests="18" failures="0" errors="0" skipped="0" time="0.013118384">
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 正常ケース: 位置0で正しい角度を返す" time="0.003242544">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 正常ケース: 各位置（0-11）で正しい角度を計算" time="0.001180646">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 正常ケース: 位置3（A）で正しい角度を返す" time="0.000305193">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 正常ケース: 位置6（F#/G♭）で正しい角度を返す" time="0.000222959">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 異常ケース: 無効な位置でCircleOfFifthsErrorをスロー" time="0.001042375">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; normalizeAngle &gt; 正常ケース: 正の角度をそのまま返す" time="0.0003303">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; normalizeAngle &gt; 正常ケース: 負の角度を正規化" time="0.00029335">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; normalizeAngle &gt; 正常ケース: 2π以上の角度を正規化" time="0.000320722">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; normalizeAngle &gt; 境界値ケース: 0度と2π度の処理" time="0.000471916">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 0度で正しい座標を返す" time="0.000364073">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 90度で正しい座標を返す" time="0.000256932">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 180度で正しい座標を返す" time="0.000269285">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 270度で正しい座標を返す" time="0.000215004">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 半径0で原点を返す" time="0.000405641">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateTextPosition &gt; 正常ケース: 各位置で正しいテキスト座標を計算" time="0.001004815">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateTextPosition &gt; 異常ケース: 無効な位置でCircleOfFifthsErrorをスロー" time="0.000476103">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateTextPosition &gt; 異常ケース: 負の半径でCircleOfFifthsErrorをスロー" time="0.000363963">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateTextRotation &gt; 正常ケース: 常に0を返す" time="0.0001544">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/index.test.ts" timestamp="2025-09-28T12:38:09.520Z" hostname="runnervm3ublj" tests="3" failures="0" errors="0" skipped="0" time="0.015192637">
        <testcase classname="src/features/circle-of-fifths/utils/test/index.test.ts" name="utils index exports &gt; エクスポートの確認: すべてのモジュールが正しくエクスポートされている" time="0.009054464">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/index.test.ts" name="utils index exports &gt; エクスポートの確認: ネームスペース形式でアクセス可能" time="0.000767669">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/index.test.ts" name="utils index exports &gt; エクスポートの確認: 各モジュールが独立している" time="0.003688028">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" timestamp="2025-09-28T12:38:09.521Z" hostname="runnervm3ublj" tests="11" failures="0" errors="0" skipped="0" time="0.018221672">
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 正常ケース: 有効なパラメータで正しいSVGパスを生成" time="0.003915707">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 正常ケース: 複数の位置で一貫したパス構造を生成" time="0.003025397">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 境界値ケース: large-arc-flagの計算が正しい" time="0.000985379">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 異常ケース: 無効な位置でCircleOfFifthsErrorをスロー" time="0.000759505">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 異常ケース: 負の半径でCircleOfFifthsErrorをスロー" time="0.000389942">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 異常ケース: 内側半径≥外側半径でCircleOfFifthsErrorをスロー" time="0.000477035">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 正常ケース: 有効なパラメータで3つのパスを正しく生成" time="0.002236166">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 正常ケース: 実際のCIRCLE_LAYOUT値で正しく動作" time="0.001314075">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 異常ケース: 無効な位置でCircleOfFifthsErrorをスロー" time="0.000566193">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 異常ケース: 負の半径でCircleOfFifthsErrorをスロー" time="0.001857058">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 異常ケース: 半径の順序が正しくない場合でErrorをスロー" time="0.000694663">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/validation.test.ts" timestamp="2025-09-28T12:38:09.523Z" hostname="runnervm3ublj" tests="6" failures="0" errors="0" skipped="0" time="0.007396674">
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 正常ケース: 有効な位置（0-11）でtrueを返す" time="0.004210568">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 境界値ケース: 負の数でfalseを返す" time="0.000333595">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 境界値ケース: getSegmentCount()以上の数でfalseを返す" time="0.000384681">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 異常ケース: 小数でfalseを返す" time="0.000321062">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 異常ケース: NaNでfalseを返す" time="0.000184867">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 異常ケース: Infinityでfalseを返す" time="0.00022905">
        </testcase>
    </testsuite>
    <testsuite name="src/features/view-controller/hooks/test/useViewController.test.ts" timestamp="2025-09-28T12:38:09.525Z" hostname="runnervm3ublj" tests="28" failures="0" errors="0" skipped="0" time="0.175526752">
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: フックが正常に初期化される" time="0.026480847">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: 初期状態でcircle-of-fifthsが選択されている" time="0.003320096">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: hubOptionsが正しく取得される" time="0.005160993">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: selectedOptionが正しく設定される" time="0.002850928">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: radioGroupRefが初期化される" time="0.005221545">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; hubType変更 &gt; 正常ケース: hubStoreの状態変更が反映される" time="0.004233787">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; hubType変更 &gt; 正常ケース: hubType変更時にselectedOptionが更新される" time="0.003378646">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleHubTypeChange &gt; 正常ケース: circle-of-fifthsに変更できる" time="0.004840753">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleHubTypeChange &gt; 正常ケース: chromatic-circleに変更できる" time="0.007504771">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleHubTypeChange &gt; 正常ケース: 連続して変更できる" time="0.010174789">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowLeft/ArrowUpキー &gt; 正常ケース: ArrowLeftで前のオプションに移動" time="0.010259117">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowLeft/ArrowUpキー &gt; 正常ケース: ArrowUpで前のオプションに移動" time="0.004769359">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowLeft/ArrowUpキー &gt; 境界値ケース: 最初のオプションで前に移動すると最後のオプションに移動" time="0.006192724">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowRight/ArrowDownキー &gt; 正常ケース: ArrowRightで次のオプションに移動" time="0.008479091">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowRight/ArrowDownキー &gt; 正常ケース: ArrowDownで次のオプションに移動" time="0.003439158">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowRight/ArrowDownキー &gt; 境界値ケース: 最後のオプションで次に移動すると最初のオプションに移動" time="0.006042543">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; Home/Endキー &gt; 正常ケース: Homeキーで最初のオプションに移動" time="0.001827111">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; Home/Endキー &gt; 正常ケース: Endキーで最後のオプションに移動" time="0.007776579">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; Home/Endキー &gt; 境界値ケース: 既に最初のオプションでHomeキーを押しても変化なし" time="0.00161295">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; Home/Endキー &gt; 境界値ケース: 既に最後のオプションでEndキーを押しても変化なし" time="0.023461507">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; その他のキー &gt; 正常ケース: サポートされていないキーは何も実行しない" time="0.001669335">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; その他のキー &gt; 正常ケース: 複数の無効なキーを連続して処理" time="0.001914475">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; フォーカス管理 &gt; 正常ケース: DOM要素が存在しない場合はエラーなし" time="0.002327327">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; フォーカス管理 &gt; 正常ケース: DOM要素が存在する場合のフォーカス処理" time="0.003200963">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; メモ化の動作 &gt; 正常ケース: hubOptionsがメモ化される" time="0.001565821">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; メモ化の動作 &gt; 正常ケース: hubTypeが変更されない場合はselectedOptionがメモ化される" time="0.002483088">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; メモ化の動作 &gt; 正常ケース: hubTypeが変更されるとselectedOptionが更新される" time="0.001499187">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; メモ化の動作 &gt; 正常ケース: handleHubTypeChangeとhandleKeyDownがメモ化される" time="0.001274336">
        </testcase>
    </testsuite>
</testsuites>
