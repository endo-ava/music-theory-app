<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="910" failures="0" errors="0" time="1.487364473">
    <testsuite name="src/stores/test/circleOfFifthsStore.test.ts" timestamp="2025-09-28T09:51:01.852Z" hostname="runnervm3ublj" tests="1" failures="0" errors="0" skipped="0" time="0.003686363">
        <testcase classname="src/stores/test/circleOfFifthsStore.test.ts" name="Zustandストアの基本動作確認 &gt; ストアが正常に初期化される" time="0.002177311">
        </testcase>
    </testsuite>
    <testsuite name="src/stores/test/currentScaleStore.test.ts" timestamp="2025-09-28T09:51:01.853Z" hostname="runnervm3ublj" tests="4" failures="0" errors="0" skipped="0" time="0.039826569">
        <testcase classname="src/stores/test/currentScaleStore.test.ts" name="currentKeyStore &gt; 初期状態はC Majorキーである" time="0.022134039">
        </testcase>
        <testcase classname="src/stores/test/currentScaleStore.test.ts" name="currentKeyStore &gt; 音楽キーを設定できる" time="0.005642648">
        </testcase>
        <testcase classname="src/stores/test/currentScaleStore.test.ts" name="currentKeyStore &gt; デフォルトにリセットできる" time="0.005979443">
        </testcase>
        <testcase classname="src/stores/test/currentScaleStore.test.ts" name="currentKeyStore &gt; メジャーキーとマイナーキーを正しく区別する" time="0.003913089">
        </testcase>
    </testsuite>
    <testsuite name="src/stores/test/hubStore.test.ts" timestamp="2025-09-28T09:51:01.854Z" hostname="runnervm3ublj" tests="13" failures="0" errors="0" skipped="0" time="0.009656272">
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 初期状態 &gt; 正常ケース: デフォルトでcircle-of-fifthsが設定される" time="0.002185116">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 初期状態 &gt; 正常ケース: setHubType関数が定義されている" time="0.000461537">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 初期状態 &gt; 正常ケース: ストアの型構造が正しい" time="0.001797484">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; setHubType関数 &gt; 正常ケース: circle-of-fifthsに設定できる" time="0.000234165">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; setHubType関数 &gt; 正常ケース: chromatic-circleに設定できる" time="0.000171488">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; setHubType関数 &gt; 正常ケース: 状態変更後もsetHubType関数が同じ参照を保持" time="0.000221351">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; setHubType関数 &gt; 境界値ケース: 全てのHubTypeを正しく設定できる" time="0.000280741">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 状態変更の動作 &gt; 正常ケース: 複数回の状態変更が正しく処理される" time="0.000429287">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 状態変更の動作 &gt; 正常ケース: 同じ値を設定しても状態は変更される" time="0.00038244">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; ストア購読の動作 &gt; 正常ケース: 状態変更時にリスナーが呼ばれる" time="0.000537027">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; ストアの独立性 &gt; 正常ケース: 複数のgetState()呼び出しが同じオブジェクトを参照" time="0.000246387">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; ストアの独立性 &gt; 正常ケース: ストアの状態が適切に分離されている" time="0.000232723">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 型安全性 &gt; 正常ケース: HubType以外の値は型エラーとなる（TypeScript）" time="0.000233654">
        </testcase>
    </testsuite>
    <testsuite name="src/stores/test/layerStore.test.ts" timestamp="2025-09-28T09:51:01.857Z" hostname="runnervm3ublj" tests="11" failures="0" errors="0" skipped="0" time="0.01219694">
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; initial state &gt; 正常ケース: 初期状態でダイアトニックコード非表示" time="0.002215182">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; toggleDiatonicChords action &gt; 正常ケース: falseからtrueに切り替わる" time="0.000384293">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; toggleDiatonicChords action &gt; 正常ケース: trueからfalseに切り替わる" time="0.000460986">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; toggleDiatonicChords action &gt; 正常ケース: 複数回のトグル動作" time="0.000549049">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; toggleDiatonicChords action &gt; 正常ケース: 関数の参照が安定している" time="0.000260193">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; state immutability &gt; 正常ケース: setState後に元のstateが変更されない" time="0.000483958">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; state immutability &gt; 正常ケース: toggleDiatonicChords後の不変性" time="0.00120142">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; store subscription &gt; 正常ケース: 状態変更時にsubscriberが呼ばれる" time="0.000482155">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; direct state manipulation &gt; 正常ケース: setStateによる直接的な状態変更" time="0.003172659">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; direct state manipulation &gt; 正常ケース: 部分的な状態更新" time="0.000309395">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; type safety &gt; 正常ケース: 型安全な状態アクセス" time="0.000313302">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/chord/test/Chord.test.ts" timestamp="2025-09-28T09:51:01.859Z" hostname="runnervm3ublj" tests="30" failures="0" errors="0" skipped="0" time="0.017377315">
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; コンストラクタ（ファクトリメソッド経由） &gt; 正常ケース: メジャーコードを生成" time="0.00248919">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; コンストラクタ（ファクトリメソッド経由） &gt; 正常ケース: マイナーコードを生成" time="0.000497764">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; コンストラクタ（ファクトリメソッド経由） &gt; 正常ケース: ドミナント7thコードを生成" time="0.000475963">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 構成音生成テスト &gt; 正常ケース: 各メジャートライアドの構成音" time="0.000886365">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 構成音生成テスト &gt; 正常ケース: 各マイナートライアドの構成音" time="0.000692575">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; KeyDTOファクトリメソッド &gt; 正常ケース: KeyDTOからメジャーコード生成" time="0.000817146">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; KeyDTOファクトリメソッド &gt; 正常ケース: KeyDTOからマイナーコード生成" time="0.000498245">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; オクターブ処理 &gt; 正常ケース: オクターブを跨ぐ音程の処理" time="0.000229175">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; オクターブ処理 &gt; 正常ケース: 低いオクターブでの和音" time="0.000311328">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; オクターブ処理 &gt; 正常ケース: 高いオクターブでの和音" time="0.00026412">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; 正常ケース: メジャートライアドの構成音から生成" time="0.000601516">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; 正常ケース: マイナートライアドの構成音から生成" time="0.000383753">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; 正常ケース: ドミナント7thコードの構成音から生成" time="0.000391908">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; 正常ケース: ディミニッシュトライアドの構成音から生成" time="0.000548898">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; エラーケース: 空の構成音配列" time="0.001161055">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; エラーケース: 認識できないコード品質" time="0.000477566">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; ChordPattern.from ファクトリメソッド &gt; 正常ケース: MajorSeventhコード" time="0.000387298">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; ChordPattern.from ファクトリメソッド &gt; 正常ケース: MinorSeventhコード" time="0.000315065">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; ChordPattern.from ファクトリメソッド &gt; 正常ケース: DiminishedTriadコード" time="0.000319603">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 同じルート音と同じ品質のChordは等しい" time="0.000276954">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 同じChord同士は等しい" time="0.000149197">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 異なる品質のChordは等しくない" time="0.000190002">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 異なるルート音のChordは等しくない" time="0.000204028">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 異なるオクターブでも同じピッチクラスと品質なら等しい" time="0.000221692">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; エッジケース: null、undefined、非Chordオブジェクトとの比較" time="0.00029049">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 異なる生成方法で作られた同じChordは等しい" time="0.000190323">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: fromNotesで生成したChordとの比較" time="0.000207184">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 音楽理論的検証 &gt; 正常ケース: 基本トライアドの音程関係" time="0.000341915">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 音楽理論的検証 &gt; 正常ケース: セブンスコードの音程関係" time="0.000446839">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 音楽理論的検証 &gt; 正常ケース: KeyDTOを使った和音進行" time="0.00064064">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/AbstractMusicalContext.test.ts" timestamp="2025-09-28T09:51:01.864Z" hostname="runnervm3ublj" tests="287" failures="0" errors="0" skipped="0" time="0.164985953">
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 正常ケース: 1-7度の各度数で正しいローマ数字を返す" time="0.002355189">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 正常ケース: sharp記号付き度数名を正しく返す" time="0.000461546">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 正常ケース: flat記号付き度数名を正しく返す" time="0.000545552">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 異常ケース: 範囲外の度数でエラーをスロー" time="0.001143181">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 境界値ケース: 最小値と最大値で正しく動作" time="0.00023172">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (C Major) &gt; centerPitchが正しく設定されている" time="0.000284648">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (C Major) &gt; scaleが正しく設定されている" time="0.000149187">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (C Major) &gt; contextNameが生成される" time="0.000239313">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (C Major) &gt; shortNameが生成される" time="0.000229736">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (G Major - Sharp) &gt; centerPitchが正しく設定されている" time="0.000216972">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (G Major - Sharp) &gt; scaleが正しく設定されている" time="0.000110525">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (G Major - Sharp) &gt; contextNameが生成される" time="0.000101007">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (G Major - Sharp) &gt; shortNameが生成される" time="0.000096148">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (F Major - Flat) &gt; centerPitchが正しく設定されている" time="0.000235567">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (F Major - Flat) &gt; scaleが正しく設定されている" time="0.000126905">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (F Major - Flat) &gt; contextNameが生成される" time="0.000153024">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (F Major - Flat) &gt; shortNameが生成される" time="0.000146111">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (A Minor) &gt; centerPitchが正しく設定されている" time="0.000100917">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (A Minor) &gt; scaleが正しく設定されている" time="0.00007553">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (A Minor) &gt; contextNameが生成される" time="0.000245846">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (A Minor) &gt; shortNameが生成される" time="0.000181426">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (E Minor - Sharp) &gt; centerPitchが正しく設定されている" time="0.000182359">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (E Minor - Sharp) &gt; scaleが正しく設定されている" time="0.000156049">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (E Minor - Sharp) &gt; contextNameが生成される" time="0.000240025">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (E Minor - Sharp) &gt; shortNameが生成される" time="0.000181016">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (D Minor - Flat) &gt; centerPitchが正しく設定されている" time="0.000139308">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (D Minor - Flat) &gt; scaleが正しく設定されている" time="0.00012941">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (D Minor - Flat) &gt; contextNameが生成される" time="0.000176557">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (D Minor - Flat) &gt; shortNameが生成される" time="0.000171178">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (D Dorian) &gt; centerPitchが正しく設定されている" time="0.000148796">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (D Dorian) &gt; scaleが正しく設定されている" time="0.000120123">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (D Dorian) &gt; contextNameが生成される" time="0.000137896">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (D Dorian) &gt; shortNameが生成される" time="0.000163423">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (E Phrygian) &gt; centerPitchが正しく設定されている" time="0.000141082">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (E Phrygian) &gt; scaleが正しく設定されている" time="0.000133498">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (E Phrygian) &gt; contextNameが生成される" time="0.000164706">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (E Phrygian) &gt; shortNameが生成される" time="0.000125893">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (F Lydian) &gt; centerPitchが正しく設定されている" time="0.000225528">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (F Lydian) &gt; scaleが正しく設定されている" time="0.000153846">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (F Lydian) &gt; contextNameが生成される" time="0.000223976">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (F Lydian) &gt; shortNameが生成される" time="0.00015097">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (G Mixolydian) &gt; centerPitchが正しく設定されている" time="0.000147604">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (G Mixolydian) &gt; scaleが正しく設定されている" time="0.00014054">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (G Mixolydian) &gt; contextNameが生成される" time="0.000153665">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (G Mixolydian) &gt; shortNameが生成される" time="0.0001238">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (C Major) &gt; 1-7度の三和音を構築できる" time="0.002819208">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (C Major) &gt; 範囲外の度数でエラーが投げられる" time="0.000568695">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (G Major - Sharp) &gt; 1-7度の三和音を構築できる" time="0.001283882">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (G Major - Sharp) &gt; 範囲外の度数でエラーが投げられる" time="0.000429447">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (F Major - Flat) &gt; 1-7度の三和音を構築できる" time="0.001198854">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (F Major - Flat) &gt; 範囲外の度数でエラーが投げられる" time="0.000414889">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (A Minor) &gt; 1-7度の三和音を構築できる" time="0.000876555">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (A Minor) &gt; 範囲外の度数でエラーが投げられる" time="0.000332196">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (E Minor - Sharp) &gt; 1-7度の三和音を構築できる" time="0.001087738">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (E Minor - Sharp) &gt; 範囲外の度数でエラーが投げられる" time="0.000369616">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (D Minor - Flat) &gt; 1-7度の三和音を構築できる" time="0.00094858">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (D Minor - Flat) &gt; 範囲外の度数でエラーが投げられる" time="0.00033466">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (D Dorian) &gt; 1-7度の三和音を構築できる" time="0.000569908">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (D Dorian) &gt; 範囲外の度数でエラーが投げられる" time="0.000273207">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (E Phrygian) &gt; 1-7度の三和音を構築できる" time="0.002256987">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (E Phrygian) &gt; 範囲外の度数でエラーが投げられる" time="0.000411253">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (F Lydian) &gt; 1-7度の三和音を構築できる" time="0.000560921">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (F Lydian) &gt; 範囲外の度数でエラーが投げられる" time="0.000200352">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (G Mixolydian) &gt; 1-7度の三和音を構築できる" time="0.000540472">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (G Mixolydian) &gt; 範囲外の度数でエラーが投げられる" time="0.000201694">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; 特定キーの完全一致検証 &gt; 正常ケース: C Majorの7つのダイアトニック和音を完全検証" time="0.000547285">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; 特定キーの完全一致検証 &gt; 正常ケース: A Minorの7つのダイアトニック和音を完全検証" time="0.000574406">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; 特定キーの完全一致検証 &gt; 正常ケース: G Majorの7つのダイアトニック和音を完全検証" time="0.000567503">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (C Major) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000882968">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (C Major) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000153926">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (C Major) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000134891">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (C Major) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000809081">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (G Major - Sharp) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.00091604">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (G Major - Sharp) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000106928">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (G Major - Sharp) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000097922">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (G Major - Sharp) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000687726">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (F Major - Flat) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000845318">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (F Major - Flat) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000136333">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (F Major - Flat) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000098713">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (F Major - Flat) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000605624">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (A Minor) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000864744">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (A Minor) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.00010744">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (A Minor) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000116827">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (A Minor) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000683758">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000825221">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (E Minor - Sharp) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000109043">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000109954">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.00067916">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (D Minor - Flat) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000820682">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (D Minor - Flat) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000106858">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (D Minor - Flat) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000101869">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (D Minor - Flat) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.00066893">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (D Dorian) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.00086301">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (D Dorian) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000103772">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (D Dorian) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000083926">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (D Dorian) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000579134">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000766542">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (E Phrygian) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.0000921">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000087312">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.00054995">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (F Lydian) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000681063">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (F Lydian) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000087322">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (F Lydian) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000078075">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (F Lydian) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000456357">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000671617">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000090167">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000083235">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000520064">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; 特定キーの分析結果完全検証 &gt; 正常ケース: C Majorの各ダイアトニック和音分析を完全検証" time="0.001431167">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; 特定キーの分析結果完全検証 &gt; 正常ケース: A Minorの各ダイアトニック和音分析を完全検証" time="0.00072773">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (C Major) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000346132">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (C Major) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.001150975">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (C Major) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001897119">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (G Major - Sharp) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000323681">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (G Major - Sharp) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000905169">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (G Major - Sharp) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001671441">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (F Major - Flat) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000236299">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (F Major - Flat) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000677086">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (F Major - Flat) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001637818">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (A Minor) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000216031">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (A Minor) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000863451">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (A Minor) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001910714">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (E Minor - Sharp) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000258269">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000929965">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.002001623">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (D Minor - Flat) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000230357">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (D Minor - Flat) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000821955">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (D Minor - Flat) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001729007">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (D Dorian) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000218675">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (D Dorian) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.008256564">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (D Dorian) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.002093153">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (E Phrygian) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000250344">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000826723">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001958493">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (F Lydian) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000240777">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (F Lydian) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.001138091">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (F Lydian) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001990953">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000268308">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000780648">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001756709">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: C Majorにおけるセカンダリードミナント（V/V = D major）の分析" time="0.000612987">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: A Minorにおけるナポリタン6度（♭Ⅱ = B♭ major）の分析" time="0.000500418">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: C Majorにおける借用和音（ⅵ♭ = A♭ major）の分析" time="0.000409229">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: G Majorにおけるクロマチック和音（F diminished）の分析" time="0.000383361">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: F Majorにおける増六和音（ドイツ増六 = D♭ major）の分析" time="0.000370087">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (C Major) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000402887">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (C Major) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000267055">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (C Major) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000359768">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (G Major - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000282815">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (G Major - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000174263">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (G Major - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000276102">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (F Major - Flat) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000304455">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (F Major - Flat) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000205962">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (F Major - Flat) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000339239">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (A Minor) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000325754">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (A Minor) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000203848">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (A Minor) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000305887">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (E Minor - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000297933">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (E Minor - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000218585">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (E Minor - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000295198">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (D Minor - Flat) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.0002751">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (D Minor - Flat) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.00019933">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (D Minor - Flat) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000344449">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (D Dorian) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000258109">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (D Dorian) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.0001674">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (D Dorian) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000297161">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (E Phrygian) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000236729">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (E Phrygian) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.00016704">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (E Phrygian) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000285489">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (F Lydian) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000266905">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (F Lydian) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000244314">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (F Lydian) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.00032368">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (G Mixolydian) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000273537">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (G Mixolydian) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000220679">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (G Mixolydian) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000320023">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; 特定キーの和音情報完全検証 &gt; 正常ケース: C Majorの和音情報を完全検証" time="0.000852501">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; 特定キーの和音情報完全検証 &gt; 正常ケース: A Minorの和音情報を完全検証" time="0.00070647">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (C Major) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000325835">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (C Major) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.00235052">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (C Major) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.003329977">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (G Major - Sharp) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000811946">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (G Major - Sharp) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001712246">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (G Major - Sharp) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.004448262">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (F Major - Flat) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000290058">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (F Major - Flat) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.000773655">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (F Major - Flat) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.00121278">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (A Minor) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.00026431">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (A Minor) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001368639">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (A Minor) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001203192">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000278597">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001351507">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001404335">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (D Minor - Flat) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000307591">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (D Minor - Flat) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001492439">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (D Minor - Flat) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001109138">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (D Dorian) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000288485">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (D Dorian) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001339996">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (D Dorian) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001157066">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000291891">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001397482">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001381011">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (F Lydian) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000236809">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (F Lydian) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001829073">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (F Lydian) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001080704">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000241127">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001246733">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001145084">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; 特定キーでの判定完全検証 &gt; 正常ケース: C Majorダイアトニック和音を正しく判定" time="0.000578473">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; 特定キーでの判定完全検証 &gt; 正常ケース: A Minorダイアトニック和音を正しく判定" time="0.000882017">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (C Major) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000284838">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (C Major) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000219387">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (G Major - Sharp) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000234185">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (G Major - Sharp) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.00016683">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (F Major - Flat) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.00021003">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (F Major - Flat) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.00016121">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (A Minor) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000228754">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (A Minor) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000160127">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000207635">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000155749">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (D Minor - Flat) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000200502">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (D Minor - Flat) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.00020487">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (D Dorian) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000224277">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (D Dorian) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000152533">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.00020445">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000153043">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (F Lydian) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000236469">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (F Lydian) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000104083">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000126485">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000104484">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; 音楽理論的エッジケース &gt; 正常ケース: 関係調の共通和音を正しく判定" time="0.000169815">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; 音楽理論的エッジケース &gt; 正常ケース: 異なるモードの和音をfalseと判定" time="0.000169514">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000443833">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000115484">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.00008627">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: JSON文字列化が可能" time="0.000272476">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: JSONから復元可能な形式" time="0.001036512">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000299286">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000084617">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000057847">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: JSON文字列化が可能" time="0.000138627">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: JSONから復元可能な形式" time="0.000195183">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000268428">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000090788">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000051225">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: JSON文字列化が可能" time="0.000124771">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: JSONから復元可能な形式" time="0.000173272">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000160698">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000063989">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.00004857">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: JSON文字列化が可能" time="0.000120524">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: JSONから復元可能な形式" time="0.000214689">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000338517">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000142003">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000108982">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: JSON文字列化が可能" time="0.000264581">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: JSONから復元可能な形式" time="0.000338187">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000356762">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000140241">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000119692">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: JSON文字列化が可能" time="0.000273517">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: JSONから復元可能な形式" time="0.000470653">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000375106">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000120313">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000096749">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: JSON文字列化が可能" time="0.000235908">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: JSONから復元可能な形式" time="0.000257187">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000272145">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.00010254">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000067695">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: JSON文字列化が可能" time="0.000187978">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: JSONから復元可能な形式" time="0.000286431">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000322699">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.00011862">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000086511">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: JSON文字列化が可能" time="0.000270362">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: JSONから復元可能な形式" time="0.000282474">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000298614">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000128508">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000087662">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: JSON文字列化が可能" time="0.000248351">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: JSONから復元可能な形式" time="0.000332026">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 型固有のプロパティ検証 &gt; 正常ケース: Keyタイプの場合type=&quot;key&quot;とisMajorが適切に設定" time="0.000295197">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 型固有のプロパティ検証 &gt; 正常ケース: ModalContextタイプの場合type=&quot;modal&quot;" time="0.000201715">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 境界値とエッジケース &gt; 正常ケース: 全ての五度圏ポジションでの出力" time="0.001285795">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 境界値とエッジケース &gt; 正常ケース: 特殊文字を含む名前での出力" time="0.000292022">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 境界値とエッジケース &gt; 正常ケース: AbstractMusicalContextの基本実装" time="0.000244033">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 不変性の確認 &gt; 正常ケース: toJSONで返されるオブジェクトの変更が元オブジェクトに影響しない" time="0.000568234">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/Accidental.test.ts" timestamp="2025-09-28T09:51:01.922Z" hostname="runnervm3ublj" tests="24" failures="0" errors="0" skipped="0" time="0.015050336">
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 基本プロパティ &gt; 正常ケース: sharp変化記号の基本プロパティ" time="0.001776377">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 基本プロパティ &gt; 正常ケース: flat変化記号の基本プロパティ" time="0.000408499">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 基本プロパティ &gt; 正常ケース: natural変化記号の基本プロパティ" time="0.000552476">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンス &gt; 正常ケース: SHARP静的インスタンス" time="0.00035033">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンス &gt; 正常ケース: FLAT静的インスタンス" time="0.000413939">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンス &gt; 正常ケース: NATURAL静的インスタンス" time="0.000346533">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンスの一意性 &gt; 正常ケース: 静的インスタンスが常に同じ参照を返す" time="0.000398861">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンスの一意性 &gt; 正常ケース: 新しいインスタンスとは異なる参照" time="0.001254319">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; getSymbol メソッド &gt; 正常ケース: sharp記号の正しい文字" time="0.000306158">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; getSymbol メソッド &gt; 正常ケース: flat記号の正しい文字" time="0.000223785">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; getSymbol メソッド &gt; 正常ケース: natural記号は空文字" time="0.000201945">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; getSymbol メソッド &gt; 正常ケース: 記号文字列の型確認" time="0.00053341">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 音楽理論的検証 &gt; 正常ケース: 全ての変化記号タイプが適切に処理される" time="0.000464633">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 音楽理論的検証 &gt; 正常ケース: 変化記号の表記が音楽記号として正しい" time="0.000552646">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 音楽理論的検証 &gt; 正常ケース: 変化記号の組み合わせテスト" time="0.000283837">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 不変性の確認 &gt; 正常ケース: valueプロパティの不変性" time="0.000233965">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 不変性の確認 &gt; 正常ケース: 静的インスタンスの不変性" time="0.000260904">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; TypeScript型安全性の確認 &gt; 正常ケース: AccidentalType型の制約" time="0.001444281">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; TypeScript型安全性の確認 &gt; 正常ケース: getSymbolメソッドの戻り値型" time="0.000252008">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 境界値・エッジケース &gt; 正常ケース: 全ての有効なAccidentalTypeをテスト" time="0.000533881">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 境界値・エッジケース &gt; 正常ケース: 静的インスタンスと動的インスタンスの値の一致" time="0.000390815">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; ユーティリティ用途での検証 &gt; 正常ケース: 文字列連結での使用" time="0.000255795">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; ユーティリティ用途での検証 &gt; 正常ケース: 条件分岐での使用" time="0.000506019">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; ユーティリティ用途での検証 &gt; 正常ケース: 配列やコレクションでの使用" time="0.000171999">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/Interval.test.ts" timestamp="2025-09-28T09:51:01.927Z" hostname="runnervm3ublj" tests="25" failures="0" errors="0" skipped="0" time="0.013280972">
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; constructor &gt; 正常ケース: セミトーン数でインスタンスを作成" time="0.002856081">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; constructor &gt; 正常ケース: 負の値も受け入れる（下行音程）" time="0.000486363">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的プロパティ &gt; 正常ケース: 基本的な音程の定義が正しい" time="0.001442468">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的プロパティ &gt; 正常ケース: 便宜上の別名も正しく定義されている" time="0.000221471">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; invert メソッド &gt; 正常ケース: 音程の方向を反転する" time="0.000251617">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; invert メソッド &gt; 正常ケース: 様々な音程の反転" time="0.000243391">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; invert メソッド &gt; 正常ケース: 二重反転で元に戻る" time="0.000125363">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 音楽理論的特性 &gt; 正常ケース: トライアド構築に必要な音程" time="0.000138477">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 音楽理論的特性 &gt; 正常ケース: マイナートライアド構築に必要な音程" time="0.000234716">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 音楽理論的特性 &gt; 正常ケース: セブンスコード構築に必要な音程" time="0.000675884">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 音楽理論的特性 &gt; 境界値ケース: 12音階内での音程の特殊性" time="0.000255224">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 実用例 &gt; 正常ケース: 様々な音程の組み合わせ" time="0.000270493">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 実用例 &gt; 正常ケース: 音程の算術演算" time="0.000212654">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; equals メソッド &gt; 正常ケース: 同じ半音数のIntervalは等しい" time="0.000434757">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; equals メソッド &gt; 正常ケース: 異なる半音数のIntervalは等しくない" time="0.00031781">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; equals メソッド &gt; 正常ケース: 負の値を含む比較" time="0.000272315">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; equals メソッド &gt; 正常ケース: 静的プロパティとの比較" time="0.000207375">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; compare &gt; 正常ケース: 半音数による比較" time="0.000446108">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; compare &gt; 正常ケース: 負の値を含む比較" time="0.000243161">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; 正常ケース: 半音数昇順でソート" time="0.000445838">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; 正常ケース: 元の配列は変更されない" time="0.000222533">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; 正常ケース: 負の値を含むソート" time="0.000178421">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; エッジケース: 空の配列" time="0.000269059">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; エッジケース: 単一要素" time="0.000200462">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; 正常ケース: 同じ半音数の場合は元の順序を保持" time="0.000184923">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/KeySignature.test.ts" timestamp="2025-09-28T09:51:01.933Z" hostname="runnervm3ublj" tests="23" failures="0" errors="0" skipped="0" time="0.016360846">
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; fromFifthsIndex &gt; 正常ケース: 有効なfifthsIndex（0-11）でKeySignatureを作成" time="0.002312062">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; fromFifthsIndex &gt; 異常ケース: 負の数でErrorをスロー" time="0.001205568">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; fromFifthsIndex &gt; 異常ケース: 11より大きい数でErrorをスロー" time="0.00191388">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; fromFifthsIndex &gt; 異常ケース: 非整数でErrorをスロー" time="0.000368884">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; キャッシング機能 &gt; 正常ケース: 同じfifthsIndexで同一インスタンスを返す" time="0.000239415">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; キャッシング機能 &gt; 正常ケース: 異なるfifthsIndexで異なるインスタンスを返す" time="0.001020113">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; 不変性 &gt; 正常ケース: インスタンスがfrozenされている" time="0.000275592">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; 不変性 &gt; 正常ケース: accidentalsがReadonlyMapとして機能" time="0.000448763">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; 変化記号なし（C Major / A minor） &gt; 正常ケース: fifthsIndex 0で変化記号なし" time="0.000805154">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: G Major（fifthsIndex 1）でF#を含む" time="0.000244394">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: D Major（fifthsIndex 2）でF#, C#を含む" time="0.000234054">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: A Major（fifthsIndex 3）でF#, C#, G#を含む" time="0.000205922">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: E Major（fifthsIndex 4）でF#, C#, G#, D#を含む" time="0.000240046">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: B Major（fifthsIndex 5）でF#, C#, G#, D#, A#を含む" time="0.000362853">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: G♭ Major（fifthsIndex 6）でB♭, E♭, A♭, D♭, G♭, C♭を含む" time="0.000328479">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: F Major（fifthsIndex 11）でB♭を含む" time="0.000230178">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: B♭ Major（fifthsIndex 10）でB♭, E♭を含む" time="0.000155749">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: E♭ Major（fifthsIndex 9）でB♭, E♭, A♭を含む" time="0.000157752">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: A♭ Major（fifthsIndex 8）でB♭, E♭, A♭, D♭を含む" time="0.000184482">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: D♭ Major（fifthsIndex 7）でB♭, E♭, A♭, D♭, G♭を含む" time="0.00021559">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; エッジケースと音楽理論検証 &gt; 正常ケース: 同じ調号内でシャープとフラットが同時に存在しない" time="0.000464613">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; エッジケースと音楽理論検証 &gt; 正常ケース: シャープ系調号で五度圈の順序を守る" time="0.001336862">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; エッジケースと音楽理論検証 &gt; 正常ケース: フラット系調号で五度圈の順序を守る" time="0.001238589">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/Note.test.ts" timestamp="2025-09-28T09:51:01.942Z" hostname="runnervm3ublj" tests="36" failures="0" errors="0" skipped="0" time="0.017921004">
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; constructor &gt; 正常ケース: PitchClassとオクターブでインスタンスを作成" time="0.002004318">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; constructor &gt; 正常ケース: 全音名でインスタンス作成可能" time="0.00164985">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; getNameFor メソッド &gt; 正常ケース: sharp調号での音名取得" time="0.001201238">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; getNameFor メソッド &gt; 正常ケース: flat調号での音名取得" time="0.00075465">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; getNameFor メソッド &gt; 正常ケース: natural調号での音名取得" time="0.000223304">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; getNameFor メソッド &gt; 正常ケース: エンハーモニック等価性の確認" time="0.000264491">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; toString getter &gt; 正常ケース: Tone.js用の正しい文字列表現を返す" time="0.000289006">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; transposeBy メソッド &gt; 正常ケース: 上行移調" time="0.000236749">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; transposeBy メソッド &gt; 正常ケース: オクターブを跨ぐ移調" time="0.000252628">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; transposeBy メソッド &gt; 正常ケース: 下行移調" time="0.000449123">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; transposeBy メソッド &gt; 正常ケース: オクターブ移調" time="0.000266414">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 境界値テスト &gt; 境界値ケース: 最低オクターブ（0）" time="0.00016137">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 境界値テスト &gt; 境界値ケース: 最高オクターブ（8）" time="0.000173662">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 境界値テスト &gt; 境界値ケース: 基準オクターブ（4）での全音名" time="0.001454658">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 音楽理論的特性 &gt; 正常ケース: 中央C（C4）の特性" time="0.000394292">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 音楽理論的特性 &gt; 正常ケース: オクターブ関係の音符" time="0.000287704">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 音楽理論的特性 &gt; 正常ケース: シャープ付き音名の処理" time="0.000982893">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 音楽理論的特性 &gt; 正常ケース: ナチュラル音名の処理" time="0.000927891">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 移調テスト &gt; 正常ケース: 基本的なインターバル移調" time="0.000273838">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 移調テスト &gt; 正常ケース: 複雑な移調計算" time="0.000228764">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 実用例 &gt; 正常ケース: 基本的なCメジャートライアドの構成音" time="0.000709366">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 実用例 &gt; 正常ケース: 異なるオクターブでの和音展開" time="0.000173923">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 実用例 &gt; 正常ケース: シャープを含む和音" time="0.000169284">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 同じピッチクラスと同じオクターブのNoteは等しい" time="0.000158094">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 同じNote同士は等しい" time="0.000103111">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なるオクターブのNoteは等しくない" time="0.000119612">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なるピッチクラスのNoteは等しくない" time="0.000105495">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なるピッチクラスと異なるオクターブのNoteは等しくない" time="0.000106367">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; エッジケース: null、undefined、非Noteオブジェクトとの比較" time="0.000138988">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なる生成方法で作られた同じNoteは等しい" time="0.000092833">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なるエンハーモニック表記の比較" time="0.000119171">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; 正常ケース: 音高順にソート" time="0.000193408">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; 正常ケース: 元の配列は変更されない" time="0.000221752">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; 正常ケース: 同じ音高の場合は元の順序を保持" time="0.000120243">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; エッジケース: 空の配列" time="0.00010247">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; エッジケース: 単一要素" time="0.000110656">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/PitchClass.test.ts" timestamp="2025-09-28T09:51:01.948Z" hostname="runnervm3ublj" tests="52" failures="0" errors="0" skipped="0" time="0.03028288">
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 基本プロパティ &gt; 正常ケース: 各音高クラスが正しいプロパティを持つ" time="0.002068988">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 基本プロパティ &gt; 正常ケース: 全ての音高クラスのプロパティが正しい" time="0.002140931">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 五度圏ファクトリメソッド &gt; 正常ケース: 五度圏インデックスからPitchClassを作成" time="0.000335332">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 五度圏ファクトリメソッド &gt; 境界値ケース: 範囲内の最大値でPitchClassを作成" time="0.000305928">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 五度圏ファクトリメソッド &gt; 異常ケース: 負の五度圏インデックスで処理" time="0.001135016">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 五度圏ファクトリメソッド &gt; 異常ケース: 範囲外の五度圏インデックスで処理" time="0.000205471">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: 長3度上に移調" time="0.00038812">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: 完全5度上に移調" time="0.000246838">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: 短3度下に移調（負の値）" time="0.00036682">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: オクターブを跨ぐ移調" time="0.000277936">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: 大きな値での移調（正規化確認）" time="0.000247819">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 音楽理論的検証 &gt; 正常ケース: 五度圏の順序が正しい" time="0.000352063">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 音楽理論的検証 &gt; 正常ケース: 半音階の順序が正しい" time="0.000336855">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 音楽理論的検証 &gt; 正常ケース: 移調による音程関係の確認" time="0.00076014">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; エッジケース &gt; 境界値ケース: 最後の五度圏インデックス（F）" time="0.000296009">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; エッジケース &gt; 境界値ケース: 0半音移調（変化なし）" time="0.000302992">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; エッジケース &gt; 境界値ケース: 完全オクターブ移調（12半音、変化なし）" time="0.000228564">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ダイアトニック音の表記 &gt; 正常ケース: Cメジャーキーでのダイアトニック音" time="0.001091264">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ダイアトニック音の表記 &gt; 正常ケース: G♭メジャーキー（flat系）でのダイアトニック音" time="0.000700439">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ダイアトニック音の表記 &gt; 正常ケース: B♭メジャーキー（flat系）でのダイアトニック音" time="0.000502612">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ノンダイアトニック音の表記 &gt; 正常ケース: Cメジャーキーでのノンダイアトニック音（sharp表記）" time="0.001070471">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ノンダイアトニック音の表記 &gt; 正常ケース: Fメジャーキー（flat系）でのノンダイアトニック音（flat表記）" time="0.000387339">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; エンハーモニック表記の確認 &gt; 正常ケース: 同じ音高でも異なるキーで異なる表記" time="0.000454944">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; エンハーモニック表記の確認 &gt; 正常ケース: 複数のエンハーモニック音での表記確認" time="0.000580537">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; 境界値・エッジケース &gt; 正常ケース: 全ての五度圏ポジションでの表記確認" time="0.00171435">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; 境界値・エッジケース &gt; 正常ケース: Aマイナーキー（sharp系）でのダイアトニック音" time="0.000722941">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; 境界値・エッジケース &gt; 正常ケース: F#マイナーキー（sharp系）でのダイアトニック音" time="0.000437902">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; 境界値・エッジケース &gt; 正常ケース: マイナーキーでのノンダイアトニック音（sharp表記）" time="0.000370928">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 正の値の正規化 &gt; 正常ケース: 0-11の範囲内の値はそのまま返す" time="0.000475893">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 正の値の正規化 &gt; 正常ケース: 12の倍数を正規化" time="0.000266544">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 正の値の正規化 &gt; 正常ケース: 12より大きい値を正規化" time="0.000256225">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 負の値の正規化 &gt; 正常ケース: -1から-11の値を正規化" time="0.000242059">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 負の値の正規化 &gt; 正常ケース: -12の倍数を正規化" time="0.000208937">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 負の値の正規化 &gt; 正常ケース: -12より小さい値を正規化" time="0.000270802">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 境界値とエッジケース &gt; 境界値ケース: 0を正規化" time="0.000141593">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 境界値とエッジケース &gt; 境界値ケース: 非常に大きな正の値" time="0.000169575">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 境界値とエッジケース &gt; 境界値ケース: 非常に小さな負の値" time="0.000161038">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 境界値とエッジケース &gt; 数学的検証: 結果が常に0-11の範囲内" time="0.001225984">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 音楽理論的応用での検証 &gt; 正常ケース: ピッチクラス計算での使用" time="0.000257167">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 音楽理論的応用での検証 &gt; 正常ケース: オクターブを跨ぐ移調計算" time="0.000136012">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 音楽理論的応用での検証 &gt; 正常ケース: 下行移調計算" time="0.000136423">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 音楽理論的応用での検証 &gt; 正常ケース: 大幅な移調計算" time="0.000135712">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; TypeScript型安全性の確認 &gt; 正常ケース: 整数以外の数値でも動作" time="0.000167802">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; TypeScript型安全性の確認 &gt; 正常ケース: 数値型チェック" time="0.0001886">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; SHARP_KEY_ORDER - シャープ調号の順序 &gt; 正常ケース: 音楽理論に正しいシャープ順序（F, C, G, D, A, E, B）" time="0.001231334">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; SHARP_KEY_ORDER - シャープ調号の順序 &gt; 正常ケース: 五度圏上の順序で並んでいる" time="0.000349288">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; FLAT_KEY_ORDER - フラット調号の順序 &gt; 正常ケース: 音楽理論に正しいフラット順序（B, E, A, D, G, C, F）" time="0.000524582">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; FLAT_KEY_ORDER - フラット調号の順序 &gt; 正常ケース: SHARP_KEY_ORDERの逆順である" time="0.000516218">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; FLAT_KEY_ORDER - フラット調号の順序 &gt; 正常ケース: 五度圏上でシャープ順序の逆順" time="0.000374906">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 調号システムとしての整合性" time="0.000222814">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 実際の調号計算での使用例" time="0.000945995">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 五度圏上での連続性" time="0.000317499">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/ScalePattern.test.ts" timestamp="2025-09-28T09:51:01.957Z" hostname="runnervm3ublj" tests="39" failures="0" errors="0" skipped="0" time="0.025673575">
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; constructor &gt; 正常ケース: 名前とインターバル配列とshortSymbolでインスタンスを作成" time="0.00252846">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; constructor &gt; 正常ケース: インスタンスがfreeze（不変）である" time="0.000351342">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Majorパターンが正しく定義されている" time="0.000964299">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: HarmonicMinorパターンが正しく定義されている" time="0.000647992">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Dorianモードが正しく定義されている" time="0.000273938">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Phrygianモードが正しく定義されている" time="0.000357564">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Lydianモードが正しく定義されている" time="0.000294215">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Mixolydianモードが正しく定義されている" time="0.000246999">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Aeolianモードが正しく定義されている" time="0.000349639">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Locrianモードが正しく定義されている" time="0.000405552">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 正常ケース: Majorパターンからモードを導出" time="0.000321176">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 正常ケース: 各度数からの導出で期待される回転パターン" time="0.000434386">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 境界値ケース: 最初の度数（1度）" time="0.00038802">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 境界値ケース: 最後の度数（7度）" time="0.000510066">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 異常ケース: 無効な開始度数でエラーが発生する" time="0.001510091">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 実用例 &gt; 正常ケース: 静的モードパターンがMajorから正しく導出されている" time="0.000942869">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 実用例 &gt; 正常ケース: 音楽理論的に正しい音程関係" time="0.000308573">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 実用例 &gt; 正常ケース: HarmonicMinorの特徴的な増2度音程" time="0.000188009">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 不変性検証 &gt; 正常ケース: 静的プロパティのインスタンスは変更不可" time="0.000220168">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 不変性検証 &gt; 正常ケース: derive後のインスタンスも変更不可" time="0.000200832">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 基本的なスケールパターンのインターバル配列 &gt; 正常ケース: Majorスケールのインターバル配列を取得" time="0.000223795">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 基本的なスケールパターンのインターバル配列 &gt; 正常ケース: Aeolian（Natural Minor）スケールのインターバル配列を取得" time="0.000226671">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 基本的なスケールパターンのインターバル配列 &gt; 正常ケース: HarmonicMinorスケールのインターバル配列を取得" time="0.000223274">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Dorianモードのインターバル配列を取得" time="0.000206503">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Phrygianモードのインターバル配列を取得" time="0.000192487">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Lydianモードのインターバル配列を取得" time="0.000273657">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Mixolydianモードのインターバル配列を取得" time="0.000184723">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Locrianモードのインターバル配列を取得" time="0.000218906">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 配列の基本的性質の検証 &gt; 正常ケース: 配列の最初の要素は常に0" time="0.000437942">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 配列の基本的性質の検証 &gt; 正常ケース: 配列の長さはintervals配列の長さ + 1" time="0.00032393">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 配列の基本的性質の検証 &gt; 正常ケース: 配列の要素は昇順に並んでいる" time="0.001312745">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 配列の基本的性質の検証 &gt; 正常ケース: 配列の要素は全て0-12の範囲内" time="0.004875715">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; カスタムパターンでの動作検証 &gt; 正常ケース: 単一音程のパターン" time="0.000202496">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; カスタムパターンでの動作検証 &gt; 正常ケース: 3音のパターン" time="0.00022082">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; カスタムパターンでの動作検証 &gt; 正常ケース: derive後のパターンでも正しく動作" time="0.000354227">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 数学的検証 &gt; 正常ケース: 累積インターバルの計算が正しい" time="0.000232261">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 数学的検証 &gt; 正常ケース: HarmonicMinorの特徴的な増2度を含む配列" time="0.000260844">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 型安全性の確認 &gt; 正常ケース: 返り値は数値配列" time="0.000707122">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 型安全性の確認 &gt; 正常ケース: 返り値は変更可能な配列（元のデータは変更されない）" time="0.000626743">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/key/test/Key.test.ts" timestamp="2025-09-28T09:51:01.964Z" hostname="runnervm3ublj" tests="48" failures="0" errors="0" skipped="0" time="0.031828972">
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; メジャーキーのKeySignature計算 &gt; 正常ケース: C major → 調号なし (fifthsIndex: 0)" time="0.002430198">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; メジャーキーのKeySignature計算 &gt; 正常ケース: G major → 1つのシャープ (fifthsIndex: 1)" time="0.000557173">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; メジャーキーのKeySignature計算 &gt; 正常ケース: F major → 1つのフラット (fifthsIndex: 11)" time="0.000357473">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; メジャーキーのKeySignature計算 &gt; 正常ケース: B♭ major → 2つのフラット (fifthsIndex: 10)" time="0.000298945">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; マイナーキーのKeySignature計算（相対長調から導出） &gt; 正常ケース: A minor → C major相対 (fifthsIndex: 0)" time="0.000515125">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; マイナーキーのKeySignature計算（相対長調から導出） &gt; 正常ケース: E minor → G major相対 (fifthsIndex: 1)" time="0.000384193">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; マイナーキーのKeySignature計算（相対長調から導出） &gt; 正常ケース: F# minor → A major相対 (fifthsIndex: 3)" time="0.000317379">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; マイナーキーのKeySignature計算（相対長調から導出） &gt; 正常ケース: D minor → F major相対 (fifthsIndex: 11)" time="0.000283115">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 全ての五度圏位置でKeySignatureが正しく計算される" time="0.002435358">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 相対調関係のKeySignatureが一致する" time="0.000419327">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; constructor &gt; 正常ケース: PitchClassとScalePatternから調を作成できる" time="0.000378823">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; constructor &gt; 正常ケース: マイナーキーを作成できる" time="0.000297371">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; keyName getter &gt; 正常ケース: キー名を正しく取得できる" time="0.000294376">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; buildTriad - Key固有テスト &gt; 正常ケース: C Majorの代表的な和音名が正しく表示される" time="0.000957276">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 特定和音取得メソッド &gt; 正常ケース: トニックコードを正しく取得" time="0.000344429">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 特定和音取得メソッド &gt; 正常ケース: ドミナントコードを正しく取得" time="0.000337556">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 特定和音取得メソッド &gt; 正常ケース: サブドミナントコードを正しく取得" time="0.000278296">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; fromCircleOfFifths ファクトリメソッド &gt; 正常ケース: 五度圏インデックスからメジャーキーを生成" time="0.000185213">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; fromCircleOfFifths ファクトリメソッド &gt; 正常ケース: 五度圏インデックスからマイナーキーを生成" time="0.000239424">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; fromCircleOfFifths ファクトリメソッド &gt; 正常ケース: 全ての五度圏インデックスでキーを生成可能" time="0.006068643">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; primaryScale プロパティ &gt; 正常ケース: 主要スケールが正しく設定される" time="0.000224276">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 境界値テスト &gt; 境界値ケース: 全ての五度圏ポジションでのキー作成" time="0.001199725">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 境界値テスト &gt; エンハーモニック表記: メジャーキーは♭表記、マイナーキーは#表記" time="0.001242014">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 音楽理論的特性 &gt; 正常ケース: C Majorキーのダイアトニックコード進行" time="0.000401335">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 音楽理論的特性 &gt; 正常ケース: 相対調関係の確認" time="0.00023722">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 実用例 &gt; 正常ケース: 一般的なキーでの基本和音" time="0.000534501">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: メジャーキーの日本語度数名配列を正しく返す" time="0.001021625">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: マイナーキーの日本語度数名配列を正しく返す" time="0.000384513">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: 異なるメジャーキーでも同じ度数名を返す" time="0.000235246">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: 常に同じ参照を返す（メジャーキー）" time="0.000174514">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: 常に同じ参照を返す（マイナーキー）" time="0.000163453">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 正常ケース: メジャーキーから相対マイナーキーを取得" time="0.000337716">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 正常ケース: マイナーキーから相対メジャーキーを取得" time="0.000320084">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 正常ケース: G Majorから相対マイナーキー（E Minor）を取得" time="0.000664024">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 正常ケース: E MinorからG Majorを取得" time="0.000337446">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 境界値ケース: 五度圏の境界での相対調" time="0.000274229">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getParallelKey &gt; 正常ケース: メジャーキーから同主マイナーキーを取得" time="0.0003126">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getParallelKey &gt; 正常ケース: マイナーキーから同主メジャーキーを取得" time="0.000297932">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getParallelKey &gt; 正常ケース: G Majorから同主マイナーキー（G Minor）を取得" time="0.000270202">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getParallelKey &gt; 正常ケース: G MinorからG Majorを取得" time="0.000264361">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getDominantKey &gt; 正常ケース: C Majorからドミナント調（G Major）を取得" time="0.0002963">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getDominantKey &gt; 正常ケース: A Minorからドミナント調（E Minor）を取得" time="0.000291902">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getDominantKey &gt; 正常ケース: F Majorからドミナント調（C Major）を取得" time="0.000254622">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getDominantKey &gt; 境界値ケース: 五度圏の境界でのドミナント調" time="0.000227102">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getSubdominantKey &gt; 正常ケース: C Majorからサブドミナント調（F Major）を取得" time="0.000335362">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getSubdominantKey &gt; 正常ケース: A Minorからサブドミナント調（D Minor）を取得" time="0.000259641">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getSubdominantKey &gt; 正常ケース: G Majorからサブドミナント調（C Major）を取得" time="0.000253751">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getSubdominantKey &gt; 境界値ケース: 五度圏の境界でのサブドミナント調" time="0.000234355">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/scale/test/Scale.test.ts" timestamp="2025-09-28T09:51:01.972Z" hostname="runnervm3ublj" tests="32" failures="0" errors="0" skipped="0" time="0.02205935">
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; スケール作成 &gt; 正常ケース: PitchClassとScalePatternからスケールを作成" time="0.00280291">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; スケール作成 &gt; 正常ケース: デフォルトオクターブでスケールを作成" time="0.000507061">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; スケール作成 &gt; 正常ケース: 指定オクターブでスケールを作成" time="0.000362161">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 構成音取得 &gt; 正常ケース: Cメジャースケールの構成音" time="0.000772934">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 構成音取得 &gt; 正常ケース: Aナチュラルマイナースケールの構成音" time="0.000601927">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 構成音取得 &gt; 正常ケース: Gメジャースケールの構成音" time="0.000596266">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 正常ケース: 各度数の音を正しく取得" time="0.000521036">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 境界値ケース: 最初の度数（1度）" time="0.00023184">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 境界値ケース: 最後の度数（7度）" time="0.000320584">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 異常ケース: 無効な度数（0）でundefinedを返す" time="0.000378372">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 異常ケース: 無効な度数（9）でundefinedを返す" time="0.000235306">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 異常ケース: 負の度数でundefinedを返す" time="0.000205872">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; オクターブ処理 &gt; 正常ケース: 低いオクターブでのスケール" time="0.000253531">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; オクターブ処理 &gt; 正常ケース: 高いオクターブでのスケール" time="0.000517921">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; オクターブ処理 &gt; 正常ケース: オクターブを跨ぐスケール" time="0.000403138">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 異なるスケールパターン &gt; 正常ケース: ミクソリディアンモードの構成音" time="0.000607958">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 異なるスケールパターン &gt; 正常ケース: ドリアンモードの構成音" time="0.000524894">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 音楽理論的検証 &gt; 正常ケース: メジャースケールの音程関係" time="0.000454122">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 音楽理論的検証 &gt; 正常ケース: ナチュラルマイナーの音程関係" time="0.000311668">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; エッジケース &gt; 境界値ケース: 最低オクターブでのスケール" time="0.000228985">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; エッジケース &gt; 境界値ケース: 高オクターブでのスケール" time="0.0002376">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; ダイアトニック音（スケール構成音）の分析 &gt; 正常ケース: Cメジャースケールのダイアトニック音を正しく分析" time="0.001850162">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; ダイアトニック音（スケール構成音）の分析 &gt; 正常ケース: Aナチュラルマイナースケールのダイアトニック音を正しく分析" time="0.001143431">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; ノンダイアトニック音（変化音）の分析 &gt; 正常ケース: Cメジャースケールのノンダイアトニック音を正しく分析" time="0.001193594">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; ノンダイアトニック音（変化音）の分析 &gt; 正常ケース: マイナースケールでのノンダイアトニック音分析" time="0.001000406">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: step = 0（ルート音）" time="0.000261926">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: step = 11（オクターブ下の音）" time="0.000276263">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: 負の値（正規化される）" time="0.000206734">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: 12以上の値（正規化される）" time="0.000201494">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: 大きな値での正規化" time="0.000192006">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 異なるスケールパターンでの動作確認 &gt; 正常ケース: ドリアンモードでの度数分析" time="0.000892616">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 異なるスケールパターンでの動作確認 &gt; 正常ケース: ミクソリディアンモードでの度数分析" time="0.000610322">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/services/test/AudioEngine.test.ts" timestamp="2025-09-28T09:51:01.977Z" hostname="runnervm3ublj" tests="16" failures="0" errors="0" skipped="0" time="0.023306043">
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setVolume &gt; 正常ケース: 音量設定がconfigに反映される" time="0.00235567">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setVolume &gt; 境界値ケース: 極端な音量値" time="0.000638605">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setArpeggioSpeed &gt; 正常ケース: 有効範囲内の速度設定" time="0.000764908">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setArpeggioSpeed &gt; 境界値ケース: 最小値以下の場合は50msに制限" time="0.000349298">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setArpeggioSpeed &gt; 境界値ケース: 最大値以上の場合は500msに制限" time="0.000390645">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; play &gt; 正常ケース: 和音再生インターフェースのテスト" time="0.002237901">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; config初期値 &gt; 正常ケース: デフォルト設定値の確認" time="0.000324853">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 設定の統合テスト &gt; 正常ケース: 設定変更後の和音再生" time="0.00097577">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 設定の統合テスト &gt; 正常ケース: 設定のリセット動作" time="0.000340572">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 型安全性の検証 &gt; 正常ケース: Chordエンティティとの統合" time="0.001585612">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 型安全性の検証 &gt; 正常ケース: 音量設定の型安全性" time="0.001625325">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 型安全性の検証 &gt; 正常ケース: アルペジオ速度設定の型安全性" time="0.001107414">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 実用的な使用例 &gt; 正常ケース: 基本的な和音進行の再生" time="0.001303839">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 実用的な使用例 &gt; 正常ケース: Toneコンテキストが停止状態の場合にTone.start()が呼ばれる" time="0.00263604">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 実用的な使用例 &gt; 正常ケース: 動的な設定変更とセッション" time="0.001868205">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 実用的な使用例 &gt; 正常ケース: 異なるオクターブでの再生" time="0.002537057">
        </testcase>
    </testsuite>
    <testsuite name="src/features/key-controller/test/KeyController.test.tsx" timestamp="2025-09-28T09:51:01.980Z" hostname="runnervm3ublj" tests="12" failures="0" errors="0" skipped="0" time="0.232231988">
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 基本レンダリング &gt; 正常ケース: コンポーネントが正しくレンダリングされる" time="0.082887968">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 基本レンダリング &gt; 正常ケース: カスタムタイトルが設定される" time="0.029931051">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 基本レンダリング &gt; 正常ケース: className が適用される" time="0.009256674">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 選択状態の表示 &gt; 正常ケース: 現在のキーに対応するボタンが選択状態になる" time="0.021363853">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 選択状態の表示 &gt; 正常ケース: 現在のキー名が表示される" time="0.008238743">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; ボタンクリック動作 &gt; 正常ケース: トニックボタンクリックでキーが変更される" time="0.015915153">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; ボタンクリック動作 &gt; 正常ケース: 全てのトニックボタンが機能する" time="0.019896135">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; ボタンクリック動作 &gt; 正常ケース: 同じボタンを再度クリックしても動作する" time="0.005434331">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; アクセシビリティ &gt; 正常ケース: 全てのボタンに適切なaria-labelが設定される" time="0.010183039">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; アクセシビリティ &gt; 正常ケース: ボタンにキーボードフォーカスが可能" time="0.013817234">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; レスポンシブデザイン &gt; 正常ケース: グリッドレイアウトのクラスが適用される" time="0.007108847">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; レスポンシブデザイン &gt; 正常ケース: タイトルがレスポンシブ表示クラスを持つ" time="0.00608078">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/constants/test/hubs.test.ts" timestamp="2025-09-28T09:51:01.982Z" hostname="runnervm3ublj" tests="9" failures="0" errors="0" skipped="0" time="0.010251059">
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubDisplayNameEn関数 &gt; 正常ケース: circle-of-fifthsの英語名を取得" time="0.001639143">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubDisplayNameEn関数 &gt; 正常ケース: chromatic-circleの英語名を取得" time="0.000254883">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubDisplayNameEn関数 &gt; 境界値ケース: 全てのHubTypeの英語名を正しく取得" time="0.001077169">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: 正しいオプション配列を生成" time="0.00044722">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: 配列の各要素が正しい型構造を持つ" time="0.001878928">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: shortNameがlabelに使用される" time="0.000306989">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: descriptionがHUBSデータと一致する" time="0.000341153">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 境界値ケース: 全てのHubTypeがオプションに含まれる" time="0.001108147">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: 関数の呼び出しが冪等である" time="0.000492284">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/hooks/test/useBodyScrollLock.test.ts" timestamp="2025-09-28T09:51:01.984Z" hostname="runnervm3ublj" tests="9" failures="0" errors="0" skipped="0" time="0.011513261">
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = true の場合 &gt; 正常ケース: bodyのスタイルが正しく設定される" time="0.003550129">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = true の場合 &gt; 正常ケース: クリーンアップ時に元の状態に復元される" time="0.002081354">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = true の場合 &gt; 境界値ケース: scrollY = 0 の場合" time="0.000514354">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = false の場合 &gt; 正常ケース: bodyのスタイルが変更されない" time="0.000469051">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = false の場合 &gt; 正常ケース: scrollToが呼ばれない" time="0.00044147">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; 状態変更 &gt; 正常ケース: locked が true → false に変更された場合" time="0.000476114">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; 状態変更 &gt; 正常ケース: locked が false → true に変更された場合" time="0.000546915">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; 実際のフック使用例 &gt; 正常ケース: フックのAPIが正しく動作する" time="0.001179289">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; 実際のフック使用例 &gt; 正常ケース: フックが引数を受け取る" time="0.000516519">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/hooks/test/useFixedViewportHeight.test.ts" timestamp="2025-09-28T09:51:01.986Z" hostname="runnervm3ublj" tests="12" failures="0" errors="0" skipped="0" time="0.062649116">
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 初期化 &gt; 正常ケース: 初期状態でwindow.innerHeightを正しく取得する" time="0.021160834">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 初期化 &gt; 境界値ケース: window.innerHeightが0の場合" time="0.002295609">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 初期化 &gt; 境界値ケース: window.innerHeightが極大値の場合" time="0.002395434">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 固定値の維持 &gt; 正常ケース: 初回取得後は値が固定される" time="0.003513919">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 固定値の維持 &gt; 正常ケース: 複数回の再レンダリングでも値が固定される" time="0.005043657">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; SSR対応 &gt; 正常ケース: windowが正常にアクセスできることを確認" time="0.003075505">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; SSR対応 &gt; 正常ケース: useEffectがクライアントサイドでのみ実行される" time="0.002164936">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 複数インスタンス &gt; 正常ケース: 複数のインスタンスが独立して動作する" time="0.003780262">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 複数インスタンス &gt; 正常ケース: 異なるタイミングでマウントされたインスタンス" time="0.006968957">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 戻り値の型 &gt; 正常ケース: 戻り値がnumber型である" time="0.003033969">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 戻り値の型 &gt; 正常ケース: 戻り値が有限数である" time="0.001799288">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 戻り値の型 &gt; 正常ケース: 戻り値が非負数である" time="0.001662664">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/utils/test/keyColorUtils.test.ts" timestamp="2025-09-28T09:51:01.988Z" hostname="runnervm3ublj" tests="3" failures="0" errors="0" skipped="0" time="0.002655249">
        <testcase classname="src/shared/utils/test/keyColorUtils.test.ts" name="keyColorUtils &gt; getMusicColorKey &gt; 正常ケース: C Majorで正確なCSS変数名を生成する" time="0.00118518">
        </testcase>
        <testcase classname="src/shared/utils/test/keyColorUtils.test.ts" name="keyColorUtils &gt; getMusicColorKey &gt; 正常ケース: A Minorで正確なCSS変数名を生成する" time="0.000174534">
        </testcase>
        <testcase classname="src/shared/utils/test/keyColorUtils.test.ts" name="keyColorUtils &gt; getMusicColorKey &gt; 正常ケース: F# Majorで正確なCSS変数名を生成する" time="0.000211583">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/utils/test/musicColorSystem.test.ts" timestamp="2025-09-28T09:51:01.988Z" hostname="runnervm3ublj" tests="5" failures="0" errors="0" skipped="0" time="0.007464926">
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: 全84色のCSS変数を正確なHSL値で生成する" time="0.002042251">
        </testcase>
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: 84個のCSS変数が生成される" time="0.001864221">
        </testcase>
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: 正確なHSL形式でカラー値が出力される" time="0.000466286">
        </testcase>
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: 五度圏順の色相進行（30°刻み）が正確に生成される" time="0.001012038">
        </testcase>
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: モード階層の明度進行（70%→28%）が正確に生成される" time="0.000524954">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/utils/test/scroll.test.ts" timestamp="2025-09-28T09:51:01.990Z" hostname="runnervm3ublj" tests="19" failures="0" errors="0" skipped="0" time="0.019590171">
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 正常系 &gt; 正常ケース: data-scrollable属性がある要素を優先的に検索する" time="0.005825647">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 正常系 &gt; 正常ケース: overflow-y: auto の要素を検索する" time="0.001523727">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 正常系 &gt; 正常ケース: overflow-y: scroll の要素を検索する" time="0.001219312">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 正常系 &gt; 正常ケース: 複数の親要素を遡って検索する" time="0.001266679">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 境界値・異常系 &gt; 境界値ケース: スクロール可能な親要素が存在しない場合はnullを返す" time="0.001108666">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 境界値・異常系 &gt; 境界値ケース: document.bodyに到達した場合はnullを返す" time="0.000881475">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 境界値・異常系 &gt; 境界値ケース: parentElementがnullの場合はnullを返す" time="0.000641089">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 境界値・異常系 &gt; 境界値ケース: targetがdocument.bodyの場合はnullを返す" time="0.000667879">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 正常系 &gt; 上方向ドラッグ + 最上部の場合はドラッグを許可する" time="0.000514004">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 正常系 &gt; 正常ケース: 上方向ドラッグ + 最上部以外の場合はドラッグを不許可にする" time="0.000322779">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 正常系 &gt; 正常ケース: 下方向ドラッグ + 最下部の場合はドラッグを許可する" time="0.000411153">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 正常系 &gt; 正常ケース: 下方向ドラッグ + 最下部以外の場合はドラッグを不許可にする" time="0.000293545">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: scrollTop = 0 の場合（最上部）" time="0.000328309">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: scrollTop + clientHeight = scrollHeight - 1 の場合（1px余裕の境界）" time="0.000591317">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: scrollTop + clientHeight = scrollHeight の場合（完全な最下部）" time="0.000330473">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: scrollTop + clientHeight &gt; scrollHeight の場合（理論的には起こらないが）" time="0.000361551">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: スクロールがない場合（scrollHeight = clientHeight）" time="0.000277114">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; DragDirection型の網羅 &gt; 正常ケース: up方向のドラッグをテストする" time="0.000243772">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; DragDirection型の網羅 &gt; 正常ケース: down方向のドラッグをテストする" time="0.000235396">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" timestamp="2025-09-28T09:51:01.993Z" hostname="runnervm3ublj" tests="12" failures="0" errors="0" skipped="0" time="0.058089679">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; 基本機能 &gt; 正常ケース: フックが正しい関数群を返す" time="0.020346597">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; 基本機能 &gt; 正常ケース: 複数回レンダリングでも安定したインスタンスを返す" time="0.003084632">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 正常ケース: 五度圏ポジションからメジャーコードを再生" time="0.003786133">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 正常ケース: 五度圏ポジションからマイナーコードを再生" time="0.002510368">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 正常ケース: 異なる五度圏ポジションでの再生" time="0.00245267">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 異常ケース: コード生成でエラーが発生した場合のハンドリング" time="0.005176682">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 異常ケース: 音響再生でエラーが発生した場合のハンドリング" time="0.003406018">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; setVolume &gt; 正常ケース: 音量設定がAudioEngineに伝達される" time="0.002130502">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; setVolume &gt; 正常ケース: 複数回の音量設定" time="0.002554229">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; setArpeggioSpeed &gt; 正常ケース: アルペジオ速度設定がAudioEngineに伝達される" time="0.002414569">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; setArpeggioSpeed &gt; 正常ケース: 複数回のアルペジオ速度設定" time="0.005337649">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; 統合テスト &gt; 正常ケース: 設定変更と和音再生の組み合わせ" time="0.002227372">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" timestamp="2025-09-28T09:51:01.995Z" hostname="runnervm3ublj" tests="8" failures="0" errors="0" skipped="0" time="0.049189267">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; 正常ケース: ダイアトニックコード非表示時、常にfalseを返す" time="0.02053323">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; 正常ケース: ダイアトニックコード表示時、該当コードでtrueを返す" time="0.004118721">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; 正常ケース: ダイアトニックコード表示時、非該当コードでfalseを返す" time="0.003503579">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; 境界値ケース: 異なるキーでのダイアトニックコード判定" time="0.002782713">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; ストア変更テスト: layerStore状態変更時の再計算" time="0.005749325">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; キー変更テスト: 異なるキー引数での動作確認" time="0.00454437">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; メモ化テスト: 同じ引数で複数回呼び出した際の一貫性" time="0.003015825">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; createCompositeKey utility function &gt; 正常ケース: 異なる引数で異なるキーを生成" time="0.002835641">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" timestamp="2025-09-28T09:51:01.996Z" hostname="runnervm3ublj" tests="11" failures="0" errors="0" skipped="0" time="0.049402573">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 統合機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.019969644">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 統合機能 &gt; 正常ケース: 個別フックが正しい引数で呼ばれる" time="0.005036683">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 統合機能 &gt; 正常ケース: ストア状態変更時の個別フック再実行" time="0.003535679">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 異なるセグメントでの動作 &gt; 正常ケース: 異なるポジションのセグメント" time="0.00246902">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 異なるセグメントでの動作 &gt; 正常ケース: 異なるキーでの動作" time="0.002647581">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; リップルエフェクト統合 &gt; 正常ケース: リップルトリガーが正しく統合される" time="0.002174203">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; リップルエフェクト統合 &gt; 正常ケース: リップル状態が正しく返される" time="0.002136202">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; Props変更の影響 &gt; 正常ケース: Props変更時の個別フック再実行" time="0.002646239">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; Props変更の影響 &gt; 正常ケース: 同じPropsでの安定性" time="0.002604932">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; エラーハンドリング &gt; 異常ケース: useAudioがundefinedを返す場合" time="0.001877613">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; エラーハンドリング &gt; 異常ケース: ストア関数がnullの場合" time="0.001977197">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" timestamp="2025-09-28T09:51:01.998Z" hostname="runnervm3ublj" tests="17" failures="0" errors="0" skipped="0" time="0.077675238">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.013279494">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 基本機能 &gt; 正常ケース: layoutオブジェクトが正しい構造を持つ" time="0.001619194">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; ダイアトニックハイライト機能 &gt; 正常ケース: ハイライト非表示時の動作" time="0.003437236">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; ダイアトニックハイライト機能 &gt; 正常ケース: ハイライト表示時の動作" time="0.002456497">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; ダイアトニックハイライト機能 &gt; 正常ケース: 異なるローマ数字での動作確認" time="0.007788539">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 色計算機能 &gt; 正常ケース: keyAreaColorの計算" time="0.00254945">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 色計算機能 &gt; 正常ケース: currentKeyColorの計算" time="0.005245661">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 色計算機能 &gt; 正常ケース: 異なるキーでの色計算" time="0.006006011">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 色計算機能 &gt; 正常ケース: マイナーキーでの色計算" time="0.00573066">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; レイアウト計算機能 &gt; 正常ケース: レイアウトオフセットの適用" time="0.002340672">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; レイアウト計算機能 &gt; 正常ケース: 異なるテキスト位置での計算" time="0.005197461">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 依存関係の管理 &gt; 正常ケース: useDiatonicChordHighlightが正しい引数で呼ばれる" time="0.001242395">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 依存関係の管理 &gt; 正常ケース: Props変更時の再計算" time="0.002709786">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 同じProps値での複数回レンダリング" time="0.002699808">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 依存配列の動作確認" time="0.001420335">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; エラーハンドリング &gt; 異常ケース: getMusicColorVariableがエラーをスローした場合" time="0.009830454">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; エラーハンドリング &gt; 異常ケース: useDiatonicChordHighlightがnullを返した場合" time="0.001588157">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" timestamp="2025-09-28T09:51:02.000Z" hostname="runnervm3ublj" tests="17" failures="0" errors="0" skipped="0" time="0.071674548">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.018000933">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 基本機能 &gt; 正常ケース: 複数回レンダリングで安定した関数参照を返す" time="0.003014592">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; useLongPress統合 &gt; 正常ケース: useLongPressが正しい引数で呼ばれる" time="0.005276018">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; useLongPress統合 &gt; 正常ケース: ハンドラがuseLongPressから返される" time="0.002486382">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; コールバック関数の動作 &gt; 正常ケース: handleClickコールバックの動作" time="0.002914015">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; コールバック関数の動作 &gt; 正常ケース: handleLongPressコールバックの動作" time="0.002748649">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; コールバック関数の動作 &gt; 正常ケース: マイナーキーでのhandleLongPress動作" time="0.002612637">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; コールバック関数の動作 &gt; 正常ケース: handleLongPressStartコールバックの動作" time="0.001944918">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseEnter機能 &gt; 正常ケース: マウス進入時の処理" time="0.002425139">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseEnter機能 &gt; 正常ケース: 異なるキーでのマウス進入" time="0.016847052">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseLeave機能 &gt; 正常ケース: マウス退出時の処理" time="0.001462303">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseLeave機能 &gt; 正常ケース: 複数回のマウス退出" time="0.001385079">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseLeave機能 &gt; 正常ケース: マウス進入→退出のサイクル" time="0.001896007">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 依存関係とメモ化 &gt; 正常ケース: Props変更時の関数再生成" time="0.002224256">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 依存関係とメモ化 &gt; 正常ケース: 同じPropsでの関数安定性" time="0.001539286">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 統合テスト &gt; 正常ケース: フル操作シーケンス" time="0.001280765">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 統合テスト &gt; 正常ケース: useLongPressの統合テスト" time="0.001283711">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" timestamp="2025-09-28T09:51:02.003Z" hostname="runnervm3ublj" tests="23" failures="0" errors="0" skipped="0" time="0.068784508">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.012838105">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 基本機能 &gt; 正常ケース: 初期状態（選択・ホバーなし）" time="0.001336539">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 選択状態の判定 &gt; 正常ケース: 選択されている場合" time="0.001659458">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 選択状態の判定 &gt; 正常ケース: 異なるキーが選択されている場合" time="0.001400128">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 選択状態の判定 &gt; 正常ケース: メジャー・マイナーキーの判定" time="0.002686293">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 選択状態の判定 &gt; 境界値ケース: fifthsIndexとisMajorの厳密な比較" time="0.00399969">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; ホバー状態の判定 &gt; 正常ケース: ホバーされている場合" time="0.004550271">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; ホバー状態の判定 &gt; 正常ケース: 異なるキーがホバーされている場合" time="0.006063467">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; ホバー状態の判定 &gt; 正常ケース: 選択かつホバーの場合" time="0.004896473">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: メジャーキーの通常状態" time="0.001639111">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: マイナーキーの通常状態" time="0.001309649">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: 選択状態の優先" time="0.00081947">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: ホバー状態" time="0.000952617">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: 選択状態がホバー状態より優先される" time="0.001080694">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; textClassName &gt; 正常ケース: メジャーキーのテキストクラス" time="0.000763756">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; textClassName &gt; 正常ケース: マイナーキーのテキストクラス" time="0.000998893">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; textClassName &gt; 正常ケース: 状態によらずキータイプでテキストクラスが決まる" time="0.000822796">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 状態変更の反応性 &gt; 正常ケース: ストア状態変更時の再計算" time="0.001767839">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 状態変更の反応性 &gt; 正常ケース: ホバー状態の変化" time="0.001530159">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 同じProps・ストア状態での結果安定性" time="0.001163148">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; メモ化とパフォーマンス &gt; 正常ケース: Props変更時の再計算" time="0.002002645">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; エッジケース &gt; 正常ケース: nullストア値の処理" time="0.000925837">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; エッジケース &gt; 境界値ケース: 極端なfifthsIndex値" time="0.011121401">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" timestamp="2025-09-28T09:51:02.006Z" hostname="runnervm3ublj" tests="16" failures="0" errors="0" skipped="0" time="0.077399892">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.020723623">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; 基本機能 &gt; 正常ケース: 複数回レンダリングで安定した関数参照を返す" time="0.003357468">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: 短時間クリック（onClick）" time="0.0042535">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: 長押し（onLongPress）" time="0.002691082">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: カスタム遅延時間" time="0.002920137">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: マウスムーブでの中断" time="0.003000125">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: マウスリーブでの中断" time="0.002528351">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; タッチイベント処理 &gt; 正常ケース: 短時間タッチ（onClick）" time="0.002423325">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; タッチイベント処理 &gt; 正常ケース: 長押しタッチ（onLongPress）" time="0.003925692">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; タッチイベント処理 &gt; 正常ケース: タッチムーブでの中断" time="0.002848103">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; エッジケース &gt; 正常ケース: 遅延時間0での即座実行" time="0.007997198">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; エッジケース &gt; 正常ケース: 負の遅延時間の処理" time="0.002158214">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; エッジケース &gt; 異常ケース: コールバック関数でエラーが発生" time="0.009215204">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 同じPropsでの関数安定性" time="0.002304015">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 異なるコールバックでの再生成" time="0.001889165">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; 複雑なシーケンス &gt; 正常ケース: 複数回の操作サイクル" time="0.002739331">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" timestamp="2025-09-28T09:51:02.010Z" hostname="runnervm3ublj" tests="18" failures="0" errors="0" skipped="0" time="0.080453724">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.02278695">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; 基本機能 &gt; 正常ケース: 初期状態でリップルが非活性" time="0.002745904">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; 基本機能 &gt; 正常ケース: 複数回レンダリングで安定した関数参照を返す" time="0.00417814">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルトリガー機能 &gt; 正常ケース: triggerRippleでリップルが活性化" time="0.003801703">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルトリガー機能 &gt; 正常ケース: 複数回triggerRippleを呼び出し" time="0.0036117">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルトリガー機能 &gt; 正常ケース: triggerRipple後の自動リセット" time="0.003441555">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルトリガー機能 &gt; 正常ケース: 適切なタイムアウト時間での自動リセット" time="0.003609075">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルリセット機能 &gt; 正常ケース: resetRippleで手動リセット" time="0.002645497">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルリセット機能 &gt; 正常ケース: 非活性状態でのresetRipple" time="0.002736386">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルリセット機能 &gt; 正常ケース: 複数回resetRippleを呼び出し" time="0.00313218">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; タイマー管理 &gt; 正常ケース: 手動リセット後の自動リセットタイマー無効化" time="0.006612135">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; タイマー管理 &gt; 正常ケース: 複数回のトリガーでタイマーリセット" time="0.005569943">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; タイマー管理 &gt; 正常ケース: コンポーネントアンマウント時のタイマークリア" time="0.003551137">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; エッジケース &gt; 正常ケース: 高速連続トリガー" time="0.002684079">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; エッジケース &gt; 正常ケース: トリガー→リセット→トリガーのサイクル" time="0.002246507">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 関数の安定性" time="0.001260057">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 状態変更時の適切な再レンダリング" time="0.001520751">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; 統合テスト &gt; 正常ケース: 完全なリップルライフサイクル" time="0.001508518">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" timestamp="2025-09-28T09:51:02.013Z" hostname="runnervm3ublj" tests="12" failures="0" errors="0" skipped="0" time="0.024855257">
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; 基本機能 &gt; 正常ケース: 関数が正しい構造を返す" time="0.002253931">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; 基本機能 &gt; 正常ケース: 複数回呼び出しで同じ値を返す（事前計算済み）" time="0.000359757">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; viewBox計算 &gt; 正常ケース: 正しいSVGビューボックス形式" time="0.000389112">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; viewBox計算 &gt; 境界値ケース: CIRCLE_LAYOUT.RADIUSの値に基づく計算" time="0.00135309">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; segments配列 &gt; 正常ケース: 12セグメントが生成される" time="0.000302891">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; segments配列 &gt; 正常ケース: 各セグメントが必要なプロパティを持つ" time="0.008358355">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; segments配列 &gt; 正常ケース: セグメントのposition値が0-11の範囲" time="0.000969589">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; segments配列 &gt; 正常ケース: 各セグメントのキー情報が正しく設定される" time="0.003053895">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; textRotation &gt; 正常ケース: textRotationが数値である" time="0.000323129">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; テキスト位置計算 &gt; 正常ケース: 3つの異なる半径でテキスト位置が計算される" time="0.004520115">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; 事前計算の最適化 &gt; パフォーマンステスト: 関数呼び出しが高速である" time="0.000318391">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; 事前計算の最適化 &gt; メモ化テスト: 同じオブジェクト参照が返される" time="0.000592699">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/geometry.test.ts" timestamp="2025-09-28T09:51:02.015Z" hostname="runnervm3ublj" tests="18" failures="0" errors="0" skipped="0" time="0.012192562">
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 正常ケース: 位置0で正しい角度を返す" time="0.001897292">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 正常ケース: 各位置（0-11）で正しい角度を計算" time="0.001069355">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 正常ケース: 位置3（A）で正しい角度を返す" time="0.000305968">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 正常ケース: 位置6（F#/G♭）で正しい角度を返す" time="0.000219728">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 異常ケース: 無効な位置でCircleOfFifthsErrorをスロー" time="0.001027858">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; normalizeAngle &gt; 正常ケース: 正の角度をそのまま返す" time="0.000363023">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; normalizeAngle &gt; 正常ケース: 負の角度を正規化" time="0.000303574">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; normalizeAngle &gt; 正常ケース: 2π以上の角度を正規化" time="0.000296781">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; normalizeAngle &gt; 境界値ケース: 0度と2π度の処理" time="0.000515056">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 0度で正しい座標を返す" time="0.000337567">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 90度で正しい座標を返す" time="0.000260464">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 180度で正しい座標を返す" time="0.00026948">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 270度で正しい座標を返す" time="0.000243822">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 半径0で原点を返す" time="0.000420321">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateTextPosition &gt; 正常ケース: 各位置で正しいテキスト座標を計算" time="0.001385412">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateTextPosition &gt; 異常ケース: 無効な位置でCircleOfFifthsErrorをスロー" time="0.000535944">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateTextPosition &gt; 異常ケース: 負の半径でCircleOfFifthsErrorをスロー" time="0.000415341">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateTextRotation &gt; 正常ケース: 常に0を返す" time="0.000175887">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/index.test.ts" timestamp="2025-09-28T09:51:02.019Z" hostname="runnervm3ublj" tests="3" failures="0" errors="0" skipped="0" time="0.006219875">
        <testcase classname="src/features/circle-of-fifths/utils/test/index.test.ts" name="utils index exports &gt; エクスポートの確認: すべてのモジュールが正しくエクスポートされている" time="0.002738323">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/index.test.ts" name="utils index exports &gt; エクスポートの確認: ネームスペース形式でアクセス可能" time="0.000734133">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/index.test.ts" name="utils index exports &gt; エクスポートの確認: 各モジュールが独立している" time="0.001309691">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" timestamp="2025-09-28T09:51:02.019Z" hostname="runnervm3ublj" tests="11" failures="0" errors="0" skipped="0" time="0.016075365">
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 正常ケース: 有効なパラメータで正しいSVGパスを生成" time="0.002837534">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 正常ケース: 複数の位置で一貫したパス構造を生成" time="0.004249638">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 境界値ケース: large-arc-flagの計算が正しい" time="0.001024601">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 異常ケース: 無効な位置でCircleOfFifthsErrorをスロー" time="0.000904348">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 異常ケース: 負の半径でCircleOfFifthsErrorをスロー" time="0.000481884">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 異常ケース: 内側半径≥外側半径でCircleOfFifthsErrorをスロー" time="0.000570438">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 正常ケース: 有効なパラメータで3つのパスを正しく生成" time="0.001016676">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 正常ケース: 実際のCIRCLE_LAYOUT値で正しく動作" time="0.001310501">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 異常ケース: 無効な位置でCircleOfFifthsErrorをスロー" time="0.000545592">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 異常ケース: 負の半径でCircleOfFifthsErrorをスロー" time="0.000541114">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 異常ケース: 半径の順序が正しくない場合でErrorをスロー" time="0.000704437">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/validation.test.ts" timestamp="2025-09-28T09:51:02.022Z" hostname="runnervm3ublj" tests="6" failures="0" errors="0" skipped="0" time="0.005578885">
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 正常ケース: 有効な位置（0-11）でtrueを返す" time="0.002578977">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 境界値ケース: 負の数でfalseを返す" time="0.000304865">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 境界値ケース: getSegmentCount()以上の数でfalseを返す" time="0.000373774">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 異常ケース: 小数でfalseを返す" time="0.000310807">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 異常ケース: NaNでfalseを返す" time="0.000185875">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 異常ケース: Infinityでfalseを返す" time="0.000248992">
        </testcase>
    </testsuite>
    <testsuite name="src/features/view-controller/hooks/test/useViewController.test.ts" timestamp="2025-09-28T09:51:02.023Z" hostname="runnervm3ublj" tests="28" failures="0" errors="0" skipped="0" time="0.09992394">
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: フックが正常に初期化される" time="0.022197878">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: 初期状態でcircle-of-fifthsが選択されている" time="0.003095753">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: hubOptionsが正しく取得される" time="0.004832074">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: selectedOptionが正しく設定される" time="0.00250687">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: radioGroupRefが初期化される" time="0.002758517">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; hubType変更 &gt; 正常ケース: hubStoreの状態変更が反映される" time="0.003873906">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; hubType変更 &gt; 正常ケース: hubType変更時にselectedOptionが更新される" time="0.002505247">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleHubTypeChange &gt; 正常ケース: circle-of-fifthsに変更できる" time="0.002892205">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleHubTypeChange &gt; 正常ケース: chromatic-circleに変更できる" time="0.002845929">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleHubTypeChange &gt; 正常ケース: 連続して変更できる" time="0.010171265">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowLeft/ArrowUpキー &gt; 正常ケース: ArrowLeftで前のオプションに移動" time="0.006235457">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowLeft/ArrowUpキー &gt; 正常ケース: ArrowUpで前のオプションに移動" time="0.002654804">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowLeft/ArrowUpキー &gt; 境界値ケース: 最初のオプションで前に移動すると最後のオプションに移動" time="0.002351863">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowRight/ArrowDownキー &gt; 正常ケース: ArrowRightで次のオプションに移動" time="0.002212915">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowRight/ArrowDownキー &gt; 正常ケース: ArrowDownで次のオプションに移動" time="0.001806351">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowRight/ArrowDownキー &gt; 境界値ケース: 最後のオプションで次に移動すると最初のオプションに移動" time="0.001926444">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; Home/Endキー &gt; 正常ケース: Homeキーで最初のオプションに移動" time="0.001815959">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; Home/Endキー &gt; 正常ケース: Endキーで最後のオプションに移動" time="0.001825245">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; Home/Endキー &gt; 境界値ケース: 既に最初のオプションでHomeキーを押しても変化なし" time="0.001683142">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; Home/Endキー &gt; 境界値ケース: 既に最後のオプションでEndキーを押しても変化なし" time="0.001800711">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; その他のキー &gt; 正常ケース: サポートされていないキーは何も実行しない" time="0.001478422">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; その他のキー &gt; 正常ケース: 複数の無効なキーを連続して処理" time="0.001893994">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; フォーカス管理 &gt; 正常ケース: DOM要素が存在しない場合はエラーなし" time="0.002389312">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; フォーカス管理 &gt; 正常ケース: DOM要素が存在する場合のフォーカス処理" time="0.003407551">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; メモ化の動作 &gt; 正常ケース: hubOptionsがメモ化される" time="0.001571205">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; メモ化の動作 &gt; 正常ケース: hubTypeが変更されない場合はselectedOptionがメモ化される" time="0.001369501">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; メモ化の動作 &gt; 正常ケース: hubTypeが変更されるとselectedOptionが更新される" time="0.001594698">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; メモ化の動作 &gt; 正常ケース: handleHubTypeChangeとhandleKeyDownがメモ化される" time="0.001329486">
        </testcase>
    </testsuite>
</testsuites>
