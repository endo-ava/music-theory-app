<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="910" failures="0" errors="0" time="1.458856412">
    <testsuite name="src/stores/test/circleOfFifthsStore.test.ts" timestamp="2025-09-28T09:49:31.637Z" hostname="runnervm3ublj" tests="1" failures="0" errors="0" skipped="0" time="0.003332892">
        <testcase classname="src/stores/test/circleOfFifthsStore.test.ts" name="Zustandストアの基本動作確認 &gt; ストアが正常に初期化される" time="0.00183845">
        </testcase>
    </testsuite>
    <testsuite name="src/stores/test/currentScaleStore.test.ts" timestamp="2025-09-28T09:49:31.638Z" hostname="runnervm3ublj" tests="4" failures="0" errors="0" skipped="0" time="0.041248313">
        <testcase classname="src/stores/test/currentScaleStore.test.ts" name="currentKeyStore &gt; 初期状態はC Majorキーである" time="0.022965359">
        </testcase>
        <testcase classname="src/stores/test/currentScaleStore.test.ts" name="currentKeyStore &gt; 音楽キーを設定できる" time="0.005521041">
        </testcase>
        <testcase classname="src/stores/test/currentScaleStore.test.ts" name="currentKeyStore &gt; デフォルトにリセットできる" time="0.005742311">
        </testcase>
        <testcase classname="src/stores/test/currentScaleStore.test.ts" name="currentKeyStore &gt; メジャーキーとマイナーキーを正しく区別する" time="0.004809071">
        </testcase>
    </testsuite>
    <testsuite name="src/stores/test/hubStore.test.ts" timestamp="2025-09-28T09:49:31.639Z" hostname="runnervm3ublj" tests="13" failures="0" errors="0" skipped="0" time="0.009590029">
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 初期状態 &gt; 正常ケース: デフォルトでcircle-of-fifthsが設定される" time="0.002223956">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 初期状態 &gt; 正常ケース: setHubType関数が定義されている" time="0.000284107">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 初期状態 &gt; 正常ケース: ストアの型構造が正しい" time="0.001599246">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; setHubType関数 &gt; 正常ケース: circle-of-fifthsに設定できる" time="0.000261275">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; setHubType関数 &gt; 正常ケース: chromatic-circleに設定できる" time="0.000219597">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; setHubType関数 &gt; 正常ケース: 状態変更後もsetHubType関数が同じ参照を保持" time="0.000348647">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; setHubType関数 &gt; 境界値ケース: 全てのHubTypeを正しく設定できる" time="0.000393019">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 状態変更の動作 &gt; 正常ケース: 複数回の状態変更が正しく処理される" time="0.000630589">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 状態変更の動作 &gt; 正常ケース: 同じ値を設定しても状態は変更される" time="0.000357644">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; ストア購読の動作 &gt; 正常ケース: 状態変更時にリスナーが呼ばれる" time="0.000582691">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; ストアの独立性 &gt; 正常ケース: 複数のgetState()呼び出しが同じオブジェクトを参照" time="0.000228324">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; ストアの独立性 &gt; 正常ケース: ストアの状態が適切に分離されている" time="0.000209228">
        </testcase>
        <testcase classname="src/stores/test/hubStore.test.ts" name="hubStore &gt; 型安全性 &gt; 正常ケース: HubType以外の値は型エラーとなる（TypeScript）" time="0.000206703">
        </testcase>
    </testsuite>
    <testsuite name="src/stores/test/layerStore.test.ts" timestamp="2025-09-28T09:49:31.642Z" hostname="runnervm3ublj" tests="11" failures="0" errors="0" skipped="0" time="0.009311942">
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; initial state &gt; 正常ケース: 初期状態でダイアトニックコード非表示" time="0.002174564">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; toggleDiatonicChords action &gt; 正常ケース: falseからtrueに切り替わる" time="0.000385635">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; toggleDiatonicChords action &gt; 正常ケース: trueからfalseに切り替わる" time="0.000401505">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; toggleDiatonicChords action &gt; 正常ケース: 複数回のトグル動作" time="0.000489108">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; toggleDiatonicChords action &gt; 正常ケース: 関数の参照が安定している" time="0.000189151">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; state immutability &gt; 正常ケース: setState後に元のstateが変更されない" time="0.000470603">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; state immutability &gt; 正常ケース: toggleDiatonicChords後の不変性" time="0.001243186">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; store subscription &gt; 正常ケース: 状態変更時にsubscriberが呼ばれる" time="0.000752526">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; direct state manipulation &gt; 正常ケース: setStateによる直接的な状態変更" time="0.0004366">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; direct state manipulation &gt; 正常ケース: 部分的な状態更新" time="0.000326085">
        </testcase>
        <testcase classname="src/stores/test/layerStore.test.ts" name="layerStore &gt; type safety &gt; 正常ケース: 型安全な状態アクセス" time="0.000335933">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/chord/test/Chord.test.ts" timestamp="2025-09-28T09:49:31.645Z" hostname="runnervm3ublj" tests="30" failures="0" errors="0" skipped="0" time="0.015234309">
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; コンストラクタ（ファクトリメソッド経由） &gt; 正常ケース: メジャーコードを生成" time="0.001803515">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; コンストラクタ（ファクトリメソッド経由） &gt; 正常ケース: マイナーコードを生成" time="0.000385074">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; コンストラクタ（ファクトリメソッド経由） &gt; 正常ケース: ドミナント7thコードを生成" time="0.000337266">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 構成音生成テスト &gt; 正常ケース: 各メジャートライアドの構成音" time="0.000680523">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 構成音生成テスト &gt; 正常ケース: 各マイナートライアドの構成音" time="0.000519264">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; KeyDTOファクトリメソッド &gt; 正常ケース: KeyDTOからメジャーコード生成" time="0.000631511">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; KeyDTOファクトリメソッド &gt; 正常ケース: KeyDTOからマイナーコード生成" time="0.000363054">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; オクターブ処理 &gt; 正常ケース: オクターブを跨ぐ音程の処理" time="0.000191134">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; オクターブ処理 &gt; 正常ケース: 低いオクターブでの和音" time="0.000234895">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; オクターブ処理 &gt; 正常ケース: 高いオクターブでの和音" time="0.000190623">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; 正常ケース: メジャートライアドの構成音から生成" time="0.000581058">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; 正常ケース: マイナートライアドの構成音から生成" time="0.000420721">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; 正常ケース: ドミナント7thコードの構成音から生成" time="0.000455665">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; 正常ケース: ディミニッシュトライアドの構成音から生成" time="0.000656368">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; エラーケース: 空の構成音配列" time="0.001113837">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; fromNotes ファクトリメソッド &gt; エラーケース: 認識できないコード品質" time="0.000511008">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; ChordPattern.from ファクトリメソッド &gt; 正常ケース: MajorSeventhコード" time="0.000368964">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; ChordPattern.from ファクトリメソッド &gt; 正常ケース: MinorSeventhコード" time="0.000372881">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; ChordPattern.from ファクトリメソッド &gt; 正常ケース: DiminishedTriadコード" time="0.000337185">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 同じルート音と同じ品質のChordは等しい" time="0.000283066">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 同じChord同士は等しい" time="0.000153595">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 異なる品質のChordは等しくない" time="0.000190343">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 異なるルート音のChordは等しくない" time="0.000220248">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 異なるオクターブでも同じピッチクラスと品質なら等しい" time="0.0002154">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; エッジケース: null、undefined、非Chordオブジェクトとの比較" time="0.000279729">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: 異なる生成方法で作られた同じChordは等しい" time="0.000179172">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; equals メソッド &gt; 正常ケース: fromNotesで生成したChordとの比較" time="0.000187989">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 音楽理論的検証 &gt; 正常ケース: 基本トライアドの音程関係" time="0.000290328">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 音楽理論的検証 &gt; 正常ケース: セブンスコードの音程関係" time="0.000473037">
        </testcase>
        <testcase classname="src/domain/chord/test/Chord.test.ts" name="Chord &gt; 音楽理論的検証 &gt; 正常ケース: KeyDTOを使った和音進行" time="0.000591848">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/AbstractMusicalContext.test.ts" timestamp="2025-09-28T09:49:31.650Z" hostname="runnervm3ublj" tests="287" failures="0" errors="0" skipped="0" time="0.161332807">
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 正常ケース: 1-7度の各度数で正しいローマ数字を返す" time="0.002262616">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 正常ケース: sharp記号付き度数名を正しく返す" time="0.000476434">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 正常ケース: flat記号付き度数名を正しく返す" time="0.000428595">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 異常ケース: 範囲外の度数でエラーをスロー" time="0.001599837">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDegreeNameFromNumber - 静的メソッド &gt; 境界値ケース: 最小値と最大値で正しく動作" time="0.000258259">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (C Major) &gt; centerPitchが正しく設定されている" time="0.000407987">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (C Major) &gt; scaleが正しく設定されている" time="0.000230196">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (C Major) &gt; contextNameが生成される" time="0.000346362">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (C Major) &gt; shortNameが生成される" time="0.000390334">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (G Major - Sharp) &gt; centerPitchが正しく設定されている" time="0.000329571">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (G Major - Sharp) &gt; scaleが正しく設定されている" time="0.000184992">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (G Major - Sharp) &gt; contextNameが生成される" time="0.000214317">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (G Major - Sharp) &gt; shortNameが生成される" time="0.000179994">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (F Major - Flat) &gt; centerPitchが正しく設定されている" time="0.000389532">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (F Major - Flat) &gt; scaleが正しく設定されている" time="0.000245225">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (F Major - Flat) &gt; contextNameが生成される" time="0.000268588">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (F Major - Flat) &gt; shortNameが生成される" time="0.000189161">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (A Minor) &gt; centerPitchが正しく設定されている" time="0.00015634">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (A Minor) &gt; scaleが正しく設定されている" time="0.000115084">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (A Minor) &gt; contextNameが生成される" time="0.000229656">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (A Minor) &gt; shortNameが生成される" time="0.000175446">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (E Minor - Sharp) &gt; centerPitchが正しく設定されている" time="0.000143987">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (E Minor - Sharp) &gt; scaleが正しく設定されている" time="0.000158023">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (E Minor - Sharp) &gt; contextNameが生成される" time="0.000203398">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (E Minor - Sharp) &gt; shortNameが生成される" time="0.000146171">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (D Minor - Flat) &gt; centerPitchが正しく設定されている" time="0.000152794">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (D Minor - Flat) &gt; scaleが正しく設定されている" time="0.000155088">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (D Minor - Flat) &gt; contextNameが生成される" time="0.000176477">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; Key (D Minor - Flat) &gt; shortNameが生成される" time="0.000179423">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (D Dorian) &gt; centerPitchが正しく設定されている" time="0.000178702">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (D Dorian) &gt; scaleが正しく設定されている" time="0.000155127">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (D Dorian) &gt; contextNameが生成される" time="0.00017777">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (D Dorian) &gt; shortNameが生成される" time="0.000175395">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (E Phrygian) &gt; centerPitchが正しく設定されている" time="0.00016192">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (E Phrygian) &gt; scaleが正しく設定されている" time="0.000133819">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (E Phrygian) &gt; contextNameが生成される" time="0.000179964">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (E Phrygian) &gt; shortNameが生成される" time="0.000164796">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (F Lydian) &gt; centerPitchが正しく設定されている" time="0.000211031">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (F Lydian) &gt; scaleが正しく設定されている" time="0.000163703">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (F Lydian) &gt; contextNameが生成される" time="0.000269009">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (F Lydian) &gt; shortNameが生成される" time="0.000178351">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (G Mixolydian) &gt; centerPitchが正しく設定されている" time="0.000155769">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (G Mixolydian) &gt; scaleが正しく設定されている" time="0.000143626">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (G Mixolydian) &gt; contextNameが生成される" time="0.000174563">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; 基本プロパティ &gt; ModalContext (G Mixolydian) &gt; shortNameが生成される" time="0.000170666">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (C Major) &gt; 1-7度の三和音を構築できる" time="0.003011335">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (C Major) &gt; 範囲外の度数でエラーが投げられる" time="0.000562914">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (G Major - Sharp) &gt; 1-7度の三和音を構築できる" time="0.001461962">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (G Major - Sharp) &gt; 範囲外の度数でエラーが投げられる" time="0.000460494">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (F Major - Flat) &gt; 1-7度の三和音を構築できる" time="0.001244839">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (F Major - Flat) &gt; 範囲外の度数でエラーが投げられる" time="0.000427643">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (A Minor) &gt; 1-7度の三和音を構築できる" time="0.000941456">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (A Minor) &gt; 範囲外の度数でエラーが投げられる" time="0.000238292">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (E Minor - Sharp) &gt; 1-7度の三和音を構築できる" time="0.000559788">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (E Minor - Sharp) &gt; 範囲外の度数でエラーが投げられる" time="0.000212214">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (D Minor - Flat) &gt; 1-7度の三和音を構築できる" time="0.000602928">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; Key (D Minor - Flat) &gt; 範囲外の度数でエラーが投げられる" time="0.000370357">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (D Dorian) &gt; 1-7度の三和音を構築できる" time="0.00105129">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (D Dorian) &gt; 範囲外の度数でエラーが投げられる" time="0.000375346">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (E Phrygian) &gt; 1-7度の三和音を構築できる" time="0.002592929">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (E Phrygian) &gt; 範囲外の度数でエラーが投げられる" time="0.000453902">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (F Lydian) &gt; 1-7度の三和音を構築できる" time="0.000865585">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (F Lydian) &gt; 範囲外の度数でエラーが投げられる" time="0.000386056">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (G Mixolydian) &gt; 1-7度の三和音を構築できる" time="0.002239083">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; buildTriad - 三和音構築機能 &gt; ModalContext (G Mixolydian) &gt; 範囲外の度数でエラーが投げられる" time="0.000407997">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; 特定キーの完全一致検証 &gt; 正常ケース: C Majorの7つのダイアトニック和音を完全検証" time="0.00064162">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; 特定キーの完全一致検証 &gt; 正常ケース: A Minorの7つのダイアトニック和音を完全検証" time="0.000524774">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; 特定キーの完全一致検証 &gt; 正常ケース: G Majorの7つのダイアトニック和音を完全検証" time="0.000489788">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (C Major) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.0008303">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (C Major) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.00014036">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (C Major) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000153104">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (C Major) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000788603">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (G Major - Sharp) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000826944">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (G Major - Sharp) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000098583">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (G Major - Sharp) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000078315">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (G Major - Sharp) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000573544">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (F Major - Flat) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.0007604">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (F Major - Flat) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000089757">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (F Major - Flat) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000081922">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (F Major - Flat) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000517871">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (A Minor) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.003524545">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (A Minor) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000096489">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (A Minor) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000082743">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (A Minor) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000530815">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000707482">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (E Minor - Sharp) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000092903">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000091129">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000508844">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (D Minor - Flat) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.001308308">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (D Minor - Flat) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000093774">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (D Minor - Flat) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000086831">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; Key (D Minor - Flat) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000515195">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (D Dorian) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000761252">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (D Dorian) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000090388">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (D Dorian) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000077935">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (D Dorian) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.001382684">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000686424">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (E Phrygian) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000101088">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.00010761">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.00050706">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (F Lydian) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.003433318">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (F Lydian) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000117108">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (F Lydian) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000095838">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (F Lydian) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000568955">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 7つのダイアトニック和音を返す" time="0.000720566">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: キャッシュ機能が動作する（同一インスタンスを返す）" time="0.000098032">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 結果がフリーズされている（immutable）" time="0.000092001">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; diatonicChords - ダイアトニック和音配列 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 各和音が有効なコード名を持つ" time="0.000559418">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; 特定キーの分析結果完全検証 &gt; 正常ケース: C Majorの各ダイアトニック和音分析を完全検証" time="0.000804081">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; 特定キーの分析結果完全検証 &gt; 正常ケース: A Minorの各ダイアトニック和音分析を完全検証" time="0.000416313">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (C Major) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000380075">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (C Major) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.001223108">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (C Major) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001846084">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (G Major - Sharp) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000254943">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (G Major - Sharp) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.0007385">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (G Major - Sharp) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001699302">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (F Major - Flat) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000203338">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (F Major - Flat) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000644546">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (F Major - Flat) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.004619539">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (A Minor) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000222984">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (A Minor) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000677918">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (A Minor) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001551808">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (E Minor - Sharp) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.002026499">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000705168">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.00154772">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (D Minor - Flat) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000235127">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (D Minor - Flat) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.00071745">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; Key (D Minor - Flat) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.002030586">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (D Dorian) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000232641">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (D Dorian) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.005174807">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (D Dorian) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.00136947">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (E Phrygian) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000185914">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000557073">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001396019">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (F Lydian) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000178511">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (F Lydian) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000562032">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (F Lydian) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001347479">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: ダイアトニック和音の分析結果構造を検証" time="0.000185144">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 全ダイアトニック和音が正しく分析される" time="0.000594643">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 和音分析結果の詳細プロパティを検証" time="0.001388756">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: C Majorにおけるセカンダリードミナント（V/V = D major）の分析" time="0.00051769">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: A Minorにおけるナポリタン6度（♭Ⅱ = B♭ major）の分析" time="0.000442621">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: C Majorにおける借用和音（ⅵ♭ = A♭ major）の分析" time="0.000346111">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: G Majorにおけるクロマチック和音（F diminished）の分析" time="0.000365989">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; 正常ケース: F Majorにおける増六和音（ドイツ増六 = D♭ major）の分析" time="0.000336504">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (C Major) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000348366">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (C Major) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000234785">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (C Major) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.00031254">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (G Major - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000176026">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (G Major - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000106618">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (G Major - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000164575">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (F Major - Flat) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000165738">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (F Major - Flat) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000245515">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (F Major - Flat) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000208838">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (A Minor) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000162631">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (A Minor) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000099865">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (A Minor) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.00015676">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (E Minor - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000210661">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (E Minor - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000112128">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (E Minor - Sharp) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000156551">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (D Minor - Flat) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000150869">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (D Minor - Flat) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000099414">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; Key (D Minor - Flat) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000265943">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (D Dorian) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000301409">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (D Dorian) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000163142">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (D Dorian) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000318591">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (E Phrygian) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.00030217">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (E Phrygian) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000213837">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (E Phrygian) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000340632">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (F Lydian) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000287213">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (F Lydian) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000276583">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (F Lydian) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000299987">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (G Mixolydian) - ノンダイアトニック和音 &gt; 正常ケース: 完全に異なる調の和音をfalseと分析" time="0.000303683">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (G Mixolydian) - ノンダイアトニック和音 &gt; 正常ケース: 異なるクオリティの同じルート音和音をfalseと分析" time="0.000246397">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; analyzeChord - 和音分析機能 &gt; ノンダイアトニック和音の分析 &gt; ModalContext (G Mixolydian) - ノンダイアトニック和音 &gt; 正常ケース: ノンダイアトニック和音の分析結果構造検証" time="0.000382249">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; 特定キーの和音情報完全検証 &gt; 正常ケース: C Majorの和音情報を完全検証" time="0.00101372">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; 特定キーの和音情報完全検証 &gt; 正常ケース: A Minorの和音情報を完全検証" time="0.000766251">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (C Major) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000355409">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (C Major) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001117193">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (C Major) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.000759609">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (G Major - Sharp) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.00016698">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (G Major - Sharp) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.00083067">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (G Major - Sharp) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.00109456">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (F Major - Flat) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000314062">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (F Major - Flat) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001267802">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (F Major - Flat) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001136257">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (A Minor) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000259452">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (A Minor) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.003185052">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (A Minor) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001329325">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000306479">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001471679">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001312935">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (D Minor - Flat) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000301609">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (D Minor - Flat) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001463975">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; Key (D Minor - Flat) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001330738">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (D Dorian) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000283846">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (D Dorian) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001189827">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (D Dorian) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001158448">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.000262707">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001328133">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.00122403">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (F Lydian) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.00024829">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (F Lydian) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001182844">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (F Lydian) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001173797">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 7つのダイアトニック和音情報を返す" time="0.0002698">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 各情報に必要なプロパティが完全に含まれている" time="0.001150544">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; getDiatonicChordsInfo - ダイアトニック和音情報 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 和音情報とdiatonicChordsとanalyzeChordの一貫性を検証" time="0.001028227">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; 特定キーでの判定完全検証 &gt; 正常ケース: C Majorダイアトニック和音を正しく判定" time="0.000560379">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; 特定キーでの判定完全検証 &gt; 正常ケース: A Minorダイアトニック和音を正しく判定" time="0.000503223">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (C Major) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000259591">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (C Major) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000503655">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (G Major - Sharp) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000224186">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (G Major - Sharp) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000152794">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (F Major - Flat) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.00022656">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (F Major - Flat) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000154166">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (A Minor) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000194861">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (A Minor) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000149167">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000207254">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (E Minor - Sharp) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000165446">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (D Minor - Flat) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000227362">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; Key (D Minor - Flat) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000150469">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (D Dorian) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000209589">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (D Dorian) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000151882">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000199259">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (E Phrygian) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.00017236">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (F Lydian) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000209017">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (F Lydian) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000213246">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 自身のダイアトニック和音を正しく判定" time="0.000132826">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: 遠い調の和音をfalseと判定" time="0.000105415">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; 音楽理論的エッジケース &gt; 正常ケース: 関係調の共通和音を正しく判定" time="0.000208086">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; isDiatonicChord - ダイアトニックコード判定 &gt; 音楽理論的エッジケース &gt; 正常ケース: 異なるモードの和音をfalseと判定" time="0.000173342">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000417434">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000121746">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000090068">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: JSON文字列化が可能" time="0.000278046">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (C Major) &gt; 正常ケース: JSONから復元可能な形式" time="0.000908646">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000317399">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000090057">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000055513">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: JSON文字列化が可能" time="0.000143507">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (G Major - Sharp) &gt; 正常ケース: JSONから復元可能な形式" time="0.00022623">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000293284">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.00008077">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000051025">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: JSON文字列化が可能" time="0.000122157">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (F Major - Flat) &gt; 正常ケース: JSONから復元可能な形式" time="0.000170196">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000243111">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000127297">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000090188">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: JSON文字列化が可能" time="0.000193369">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (A Minor) &gt; 正常ケース: JSONから復元可能な形式" time="0.000253349">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000303563">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000110244">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000083936">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: JSON文字列化が可能" time="0.000193509">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (E Minor - Sharp) &gt; 正常ケース: JSONから復元可能な形式" time="0.000254523">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000329772">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000116516">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000085889">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: JSON文字列化が可能" time="0.000208396">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; Key (D Minor - Flat) &gt; 正常ケース: JSONから復元可能な形式" time="0.000297522">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000343817">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000128057">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000102741">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: JSON文字列化が可能" time="0.000268157">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (D Dorian) &gt; 正常ケース: JSONから復元可能な形式" time="0.000327487">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000312119">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000130011">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000097571">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: JSON文字列化が可能" time="0.000235256">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (E Phrygian) &gt; 正常ケース: JSONから復元可能な形式" time="0.00032862">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000352263">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000177579">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000105656">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: JSON文字列化が可能" time="0.000327528">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (F Lydian) &gt; 正常ケース: JSONから復元可能な形式" time="0.000286962">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: JSON形式で正しく出力される" time="0.000349959">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: shortNameとcontextNameが適切に設定されている" time="0.000171438">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: fifthsIndexが中心音のfifthsIndexと一致" time="0.000093583">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: JSON文字列化が可能" time="0.000228113">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; ModalContext (G Mixolydian) &gt; 正常ケース: JSONから復元可能な形式" time="0.000286591">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 型固有のプロパティ検証 &gt; 正常ケース: Keyタイプの場合type=&quot;key&quot;とisMajorが適切に設定" time="0.000322267">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 型固有のプロパティ検証 &gt; 正常ケース: ModalContextタイプの場合type=&quot;modal&quot;" time="0.000195292">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 境界値とエッジケース &gt; 正常ケース: 全ての五度圏ポジションでの出力" time="0.001706495">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 境界値とエッジケース &gt; 正常ケース: 特殊文字を含む名前での出力" time="0.000321977">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 境界値とエッジケース &gt; 正常ケース: AbstractMusicalContextの基本実装" time="0.000275912">
        </testcase>
        <testcase classname="src/domain/common/test/AbstractMusicalContext.test.ts" name="AbstractMusicalContext &gt; toJSON - JSON出力 &gt; 不変性の確認 &gt; 正常ケース: toJSONで返されるオブジェクトの変更が元オブジェクトに影響しない" time="0.000644906">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/Accidental.test.ts" timestamp="2025-09-28T09:49:31.707Z" hostname="runnervm3ublj" tests="24" failures="0" errors="0" skipped="0" time="0.010279347">
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 基本プロパティ &gt; 正常ケース: sharp変化記号の基本プロパティ" time="0.001681419">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 基本プロパティ &gt; 正常ケース: flat変化記号の基本プロパティ" time="0.000277324">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 基本プロパティ &gt; 正常ケース: natural変化記号の基本プロパティ" time="0.000301008">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンス &gt; 正常ケース: SHARP静的インスタンス" time="0.000170026">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンス &gt; 正常ケース: FLAT静的インスタンス" time="0.000170636">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンス &gt; 正常ケース: NATURAL静的インスタンス" time="0.000146652">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンスの一意性 &gt; 正常ケース: 静的インスタンスが常に同じ参照を返す" time="0.000270612">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 静的インスタンスの一意性 &gt; 正常ケース: 新しいインスタンスとは異なる参照" time="0.000773636">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; getSymbol メソッド &gt; 正常ケース: sharp記号の正しい文字" time="0.000213046">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; getSymbol メソッド &gt; 正常ケース: flat記号の正しい文字" time="0.000146301">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; getSymbol メソッド &gt; 正常ケース: natural記号は空文字" time="0.000128478">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; getSymbol メソッド &gt; 正常ケース: 記号文字列の型確認" time="0.000302271">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 音楽理論的検証 &gt; 正常ケース: 全ての変化記号タイプが適切に処理される" time="0.000257869">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 音楽理論的検証 &gt; 正常ケース: 変化記号の表記が音楽記号として正しい" time="0.000324592">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 音楽理論的検証 &gt; 正常ケース: 変化記号の組み合わせテスト" time="0.000160488">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 不変性の確認 &gt; 正常ケース: valueプロパティの不変性" time="0.00017245">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 不変性の確認 &gt; 正常ケース: 静的インスタンスの不変性" time="0.000154386">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; TypeScript型安全性の確認 &gt; 正常ケース: AccidentalType型の制約" time="0.000847462">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; TypeScript型安全性の確認 &gt; 正常ケース: getSymbolメソッドの戻り値型" time="0.000153375">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 境界値・エッジケース &gt; 正常ケース: 全ての有効なAccidentalTypeをテスト" time="0.000401265">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; 境界値・エッジケース &gt; 正常ケース: 静的インスタンスと動的インスタンスの値の一致" time="0.000375547">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; ユーティリティ用途での検証 &gt; 正常ケース: 文字列連結での使用" time="0.000244614">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; ユーティリティ用途での検証 &gt; 正常ケース: 条件分岐での使用" time="0.00025871">
        </testcase>
        <testcase classname="src/domain/common/test/Accidental.test.ts" name="Accidental &gt; ユーティリティ用途での検証 &gt; 正常ケース: 配列やコレクションでの使用" time="0.000112057">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/Interval.test.ts" timestamp="2025-09-28T09:49:31.713Z" hostname="runnervm3ublj" tests="25" failures="0" errors="0" skipped="0" time="0.01471755">
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; constructor &gt; 正常ケース: セミトーン数でインスタンスを作成" time="0.002678288">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; constructor &gt; 正常ケース: 負の値も受け入れる（下行音程）" time="0.000453581">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的プロパティ &gt; 正常ケース: 基本的な音程の定義が正しい" time="0.001350115">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的プロパティ &gt; 正常ケース: 便宜上の別名も正しく定義されている" time="0.000233392">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; invert メソッド &gt; 正常ケース: 音程の方向を反転する" time="0.000192728">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; invert メソッド &gt; 正常ケース: 様々な音程の反転" time="0.000357012">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; invert メソッド &gt; 正常ケース: 二重反転で元に戻る" time="0.000179503">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 音楽理論的特性 &gt; 正常ケース: トライアド構築に必要な音程" time="0.00020504">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 音楽理論的特性 &gt; 正常ケース: マイナートライアド構築に必要な音程" time="0.000306939">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 音楽理論的特性 &gt; 正常ケース: セブンスコード構築に必要な音程" time="0.000910208">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 音楽理論的特性 &gt; 境界値ケース: 12音階内での音程の特殊性" time="0.000291911">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 実用例 &gt; 正常ケース: 様々な音程の組み合わせ" time="0.000253089">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 実用例 &gt; 正常ケース: 音程の算術演算" time="0.000178701">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; equals メソッド &gt; 正常ケース: 同じ半音数のIntervalは等しい" time="0.000441479">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; equals メソッド &gt; 正常ケース: 異なる半音数のIntervalは等しくない" time="0.000305737">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; equals メソッド &gt; 正常ケース: 負の値を含む比較" time="0.000244464">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; equals メソッド &gt; 正常ケース: 静的プロパティとの比較" time="0.000207625">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; compare &gt; 正常ケース: 半音数による比較" time="0.000436771">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; compare &gt; 正常ケース: 負の値を含む比較" time="0.0002207">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; 正常ケース: 半音数昇順でソート" time="0.000563585">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; 正常ケース: 元の配列は変更されない" time="0.000318781">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; 正常ケース: 負の値を含むソート" time="0.001115149">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; エッジケース: 空の配列" time="0.000275622">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; エッジケース: 単一要素" time="0.000186846">
        </testcase>
        <testcase classname="src/domain/common/test/Interval.test.ts" name="Interval &gt; 静的メソッド &gt; sort &gt; 正常ケース: 同じ半音数の場合は元の順序を保持" time="0.000179793">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/KeySignature.test.ts" timestamp="2025-09-28T09:49:31.720Z" hostname="runnervm3ublj" tests="23" failures="0" errors="0" skipped="0" time="0.017648898">
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; fromFifthsIndex &gt; 正常ケース: 有効なfifthsIndex（0-11）でKeySignatureを作成" time="0.002050984">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; fromFifthsIndex &gt; 異常ケース: 負の数でErrorをスロー" time="0.001252162">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; fromFifthsIndex &gt; 異常ケース: 11より大きい数でErrorをスロー" time="0.00047402">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; fromFifthsIndex &gt; 異常ケース: 非整数でErrorをスロー" time="0.000418055">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; キャッシング機能 &gt; 正常ケース: 同じfifthsIndexで同一インスタンスを返す" time="0.000235186">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; キャッシング機能 &gt; 正常ケース: 異なるfifthsIndexで異なるインスタンスを返す" time="0.00109404">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; 不変性 &gt; 正常ケース: インスタンスがfrozenされている" time="0.000289707">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; 不変性 &gt; 正常ケース: accidentalsがReadonlyMapとして機能" time="0.000416362">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; 変化記号なし（C Major / A minor） &gt; 正常ケース: fifthsIndex 0で変化記号なし" time="0.000967325">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: G Major（fifthsIndex 1）でF#を含む" time="0.000366791">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: D Major（fifthsIndex 2）でF#, C#を含む" time="0.000396005">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: A Major（fifthsIndex 3）でF#, C#, G#を含む" time="0.000354568">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: E Major（fifthsIndex 4）でF#, C#, G#, D#を含む" time="0.000380616">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; シャープ系調号 &gt; 正常ケース: B Major（fifthsIndex 5）でF#, C#, G#, D#, A#を含む" time="0.000624679">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: G♭ Major（fifthsIndex 6）でB♭, E♭, A♭, D♭, G♭, C♭を含む" time="0.000619409">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: F Major（fifthsIndex 11）でB♭を含む" time="0.000338408">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: B♭ Major（fifthsIndex 10）でB♭, E♭を含む" time="0.000316667">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: E♭ Major（fifthsIndex 9）でB♭, E♭, A♭を含む" time="0.000289948">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: A♭ Major（fifthsIndex 8）でB♭, E♭, A♭, D♭を含む" time="0.000348626">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; フラット系調号 &gt; 正常ケース: D♭ Major（fifthsIndex 7）でB♭, E♭, A♭, D♭, G♭を含む" time="0.000412375">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; エッジケースと音楽理論検証 &gt; 正常ケース: 同じ調号内でシャープとフラットが同時に存在しない" time="0.00085182">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; エッジケースと音楽理論検証 &gt; 正常ケース: シャープ系調号で五度圈の順序を守る" time="0.001447756">
        </testcase>
        <testcase classname="src/domain/common/test/KeySignature.test.ts" name="KeySignature &gt; エッジケースと音楽理論検証 &gt; 正常ケース: フラット系調号で五度圈の順序を守る" time="0.001439009">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/Note.test.ts" timestamp="2025-09-28T09:49:31.723Z" hostname="runnervm3ublj" tests="36" failures="0" errors="0" skipped="0" time="0.019258404">
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; constructor &gt; 正常ケース: PitchClassとオクターブでインスタンスを作成" time="0.001688552">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; constructor &gt; 正常ケース: 全音名でインスタンス作成可能" time="0.001365403">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; getNameFor メソッド &gt; 正常ケース: sharp調号での音名取得" time="0.001241443">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; getNameFor メソッド &gt; 正常ケース: flat調号での音名取得" time="0.000697344">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; getNameFor メソッド &gt; 正常ケース: natural調号での音名取得" time="0.00024809">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; getNameFor メソッド &gt; 正常ケース: エンハーモニック等価性の確認" time="0.000217594">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; toString getter &gt; 正常ケース: Tone.js用の正しい文字列表現を返す" time="0.000429096">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; transposeBy メソッド &gt; 正常ケース: 上行移調" time="0.000344219">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; transposeBy メソッド &gt; 正常ケース: オクターブを跨ぐ移調" time="0.000359908">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; transposeBy メソッド &gt; 正常ケース: 下行移調" time="0.000372731">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; transposeBy メソッド &gt; 正常ケース: オクターブ移調" time="0.000232892">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 境界値テスト &gt; 境界値ケース: 最低オクターブ（0）" time="0.000208266">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 境界値テスト &gt; 境界値ケース: 最高オクターブ（8）" time="0.000218095">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 境界値テスト &gt; 境界値ケース: 基準オクターブ（4）での全音名" time="0.002457268">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 音楽理論的特性 &gt; 正常ケース: 中央C（C4）の特性" time="0.000364687">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 音楽理論的特性 &gt; 正常ケース: オクターブ関係の音符" time="0.000267275">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 音楽理論的特性 &gt; 正常ケース: シャープ付き音名の処理" time="0.002008156">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 音楽理論的特性 &gt; 正常ケース: ナチュラル音名の処理" time="0.000872028">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 移調テスト &gt; 正常ケース: 基本的なインターバル移調" time="0.000267957">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 移調テスト &gt; 正常ケース: 複雑な移調計算" time="0.000213536">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 実用例 &gt; 正常ケース: 基本的なCメジャートライアドの構成音" time="0.000656387">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 実用例 &gt; 正常ケース: 異なるオクターブでの和音展開" time="0.00020493">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; 実用例 &gt; 正常ケース: シャープを含む和音" time="0.00017764">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 同じピッチクラスと同じオクターブのNoteは等しい" time="0.000140621">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 同じNote同士は等しい" time="0.000106949">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なるオクターブのNoteは等しくない" time="0.000109273">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なるピッチクラスのNoteは等しくない" time="0.000107549">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なるピッチクラスと異なるオクターブのNoteは等しくない" time="0.000104865">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; エッジケース: null、undefined、非Noteオブジェクトとの比較" time="0.000162912">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なる生成方法で作られた同じNoteは等しい" time="0.000096289">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; equals メソッド &gt; 正常ケース: 異なるエンハーモニック表記の比較" time="0.000090678">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; 正常ケース: 音高順にソート" time="0.000192296">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; 正常ケース: 元の配列は変更されない" time="0.000266064">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; 正常ケース: 同じ音高の場合は元の順序を保持" time="0.000122628">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; エッジケース: 空の配列" time="0.000144488">
        </testcase>
        <testcase classname="src/domain/common/test/Note.test.ts" name="Note &gt; sortByPitch 静的メソッド &gt; エッジケース: 単一要素" time="0.000117858">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/PitchClass.test.ts" timestamp="2025-09-28T09:49:31.729Z" hostname="runnervm3ublj" tests="52" failures="0" errors="0" skipped="0" time="0.036154883">
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 基本プロパティ &gt; 正常ケース: 各音高クラスが正しいプロパティを持つ" time="0.002429607">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 基本プロパティ &gt; 正常ケース: 全ての音高クラスのプロパティが正しい" time="0.002426641">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 五度圏ファクトリメソッド &gt; 正常ケース: 五度圏インデックスからPitchClassを作成" time="0.000351632">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 五度圏ファクトリメソッド &gt; 境界値ケース: 範囲内の最大値でPitchClassを作成" time="0.000295057">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 五度圏ファクトリメソッド &gt; 異常ケース: 負の五度圏インデックスで処理" time="0.001108606">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 五度圏ファクトリメソッド &gt; 異常ケース: 範囲外の五度圏インデックスで処理" time="0.000189491">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: 長3度上に移調" time="0.000402617">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: 完全5度上に移調" time="0.000211963">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: 短3度下に移調（負の値）" time="0.00034508">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: オクターブを跨ぐ移調" time="0.000278456">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 移調 &gt; 正常ケース: 大きな値での移調（正規化確認）" time="0.000214678">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 音楽理論的検証 &gt; 正常ケース: 五度圏の順序が正しい" time="0.000310446">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 音楽理論的検証 &gt; 正常ケース: 半音階の順序が正しい" time="0.000333879">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 音楽理論的検証 &gt; 正常ケース: 移調による音程関係の確認" time="0.000669041">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; エッジケース &gt; 境界値ケース: 最後の五度圏インデックス（F）" time="0.000304505">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; エッジケース &gt; 境界値ケース: 0半音移調（変化なし）" time="0.000271624">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; エッジケース &gt; 境界値ケース: 完全オクターブ移調（12半音、変化なし）" time="0.000202245">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ダイアトニック音の表記 &gt; 正常ケース: Cメジャーキーでのダイアトニック音" time="0.001034068">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ダイアトニック音の表記 &gt; 正常ケース: G♭メジャーキー（flat系）でのダイアトニック音" time="0.001777868">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ダイアトニック音の表記 &gt; 正常ケース: B♭メジャーキー（flat系）でのダイアトニック音" time="0.000538279">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ノンダイアトニック音の表記 &gt; 正常ケース: Cメジャーキーでのノンダイアトニック音（sharp表記）" time="0.000443653">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; ノンダイアトニック音の表記 &gt; 正常ケース: Fメジャーキー（flat系）でのノンダイアトニック音（flat表記）" time="0.000401334">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; エンハーモニック表記の確認 &gt; 正常ケース: 同じ音高でも異なるキーで異なる表記" time="0.000453291">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; エンハーモニック表記の確認 &gt; 正常ケース: 複数のエンハーモニック音での表記確認" time="0.000644155">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; 境界値・エッジケース &gt; 正常ケース: 全ての五度圏ポジションでの表記確認" time="0.00175744">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; 境界値・エッジケース &gt; 正常ケース: Aマイナーキー（sharp系）でのダイアトニック音" time="0.00043647">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; 境界値・エッジケース &gt; 正常ケース: F#マイナーキー（sharp系）でのダイアトニック音" time="0.000419518">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; getNameFor メソッド &gt; 境界値・エッジケース &gt; 正常ケース: マイナーキーでのノンダイアトニック音（sharp表記）" time="0.000386608">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 正の値の正規化 &gt; 正常ケース: 0-11の範囲内の値はそのまま返す" time="0.000475282">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 正の値の正規化 &gt; 正常ケース: 12の倍数を正規化" time="0.000242219">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 正の値の正規化 &gt; 正常ケース: 12より大きい値を正規化" time="0.000268588">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 負の値の正規化 &gt; 正常ケース: -1から-11の値を正規化" time="0.000227762">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 負の値の正規化 &gt; 正常ケース: -12の倍数を正規化" time="0.000211532">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 負の値の正規化 &gt; 正常ケース: -12より小さい値を正規化" time="0.000210461">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 境界値とエッジケース &gt; 境界値ケース: 0を正規化" time="0.000123178">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 境界値とエッジケース &gt; 境界値ケース: 非常に大きな正の値" time="0.000167421">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 境界値とエッジケース &gt; 境界値ケース: 非常に小さな負の値" time="0.000164485">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 境界値とエッジケース &gt; 数学的検証: 結果が常に0-11の範囲内" time="0.005575422">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 音楽理論的応用での検証 &gt; 正常ケース: ピッチクラス計算での使用" time="0.000246256">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 音楽理論的応用での検証 &gt; 正常ケース: オクターブを跨ぐ移調計算" time="0.000139599">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 音楽理論的応用での検証 &gt; 正常ケース: 下行移調計算" time="0.000156179">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; 音楽理論的応用での検証 &gt; 正常ケース: 大幅な移調計算" time="0.000126735">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; TypeScript型安全性の確認 &gt; 正常ケース: 整数以外の数値でも動作" time="0.00017797">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; modulo12 - 数値正規化関数 &gt; TypeScript型安全性の確認 &gt; 正常ケース: 数値型チェック" time="0.000159646">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; SHARP_KEY_ORDER - シャープ調号の順序 &gt; 正常ケース: 音楽理論に正しいシャープ順序（F, C, G, D, A, E, B）" time="0.001195037">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; SHARP_KEY_ORDER - シャープ調号の順序 &gt; 正常ケース: 五度圏上の順序で並んでいる" time="0.000343377">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; FLAT_KEY_ORDER - フラット調号の順序 &gt; 正常ケース: 音楽理論に正しいフラット順序（B, E, A, D, G, C, F）" time="0.000445556">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; FLAT_KEY_ORDER - フラット調号の順序 &gt; 正常ケース: SHARP_KEY_ORDERの逆順である" time="0.000542387">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; FLAT_KEY_ORDER - フラット調号の順序 &gt; 正常ケース: 五度圏上でシャープ順序の逆順" time="0.000336675">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 調号システムとしての整合性" time="0.000219557">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 実際の調号計算での使用例" time="0.001021204">
        </testcase>
        <testcase classname="src/domain/common/test/PitchClass.test.ts" name="PitchClass &gt; 調号順序定数 (SHARP_KEY_ORDER / FLAT_KEY_ORDER) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 五度圏上での連続性" time="0.00032901">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/common/test/ScalePattern.test.ts" timestamp="2025-09-28T09:49:31.738Z" hostname="runnervm3ublj" tests="39" failures="0" errors="0" skipped="0" time="0.017672233">
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; constructor &gt; 正常ケース: 名前とインターバル配列とshortSymbolでインスタンスを作成" time="0.002309885">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; constructor &gt; 正常ケース: インスタンスがfreeze（不変）である" time="0.000341002">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Majorパターンが正しく定義されている" time="0.000661738">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: HarmonicMinorパターンが正しく定義されている" time="0.000360919">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Dorianモードが正しく定義されている" time="0.00016237">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Phrygianモードが正しく定義されている" time="0.000251286">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Lydianモードが正しく定義されている" time="0.000191776">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Mixolydianモードが正しく定義されている" time="0.000149397">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Aeolianモードが正しく定義されている" time="0.000220659">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 静的プロパティ &gt; 正常ケース: Locrianモードが正しく定義されている" time="0.000262487">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 正常ケース: Majorパターンからモードを導出" time="0.000211723">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 正常ケース: 各度数からの導出で期待される回転パターン" time="0.000242159">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 境界値ケース: 最初の度数（1度）" time="0.000274269">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 境界値ケース: 最後の度数（7度）" time="0.000359817">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; derive メソッド &gt; 異常ケース: 無効な開始度数でエラーが発生する" time="0.001029059">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 実用例 &gt; 正常ケース: 静的モードパターンがMajorから正しく導出されている" time="0.000586438">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 実用例 &gt; 正常ケース: 音楽理論的に正しい音程関係" time="0.000283956">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 実用例 &gt; 正常ケース: HarmonicMinorの特徴的な増2度音程" time="0.000166989">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 不変性検証 &gt; 正常ケース: 静的プロパティのインスタンスは変更不可" time="0.000224858">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; 不変性検証 &gt; 正常ケース: derive後のインスタンスも変更不可" time="0.000201764">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 基本的なスケールパターンのインターバル配列 &gt; 正常ケース: Majorスケールのインターバル配列を取得" time="0.000256585">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 基本的なスケールパターンのインターバル配列 &gt; 正常ケース: Aeolian（Natural Minor）スケールのインターバル配列を取得" time="0.0002047">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 基本的なスケールパターンのインターバル配列 &gt; 正常ケース: HarmonicMinorスケールのインターバル配列を取得" time="0.000225238">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Dorianモードのインターバル配列を取得" time="0.000223254">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Phrygianモードのインターバル配列を取得" time="0.000186846">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Lydianモードのインターバル配列を取得" time="0.000182158">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Mixolydianモードのインターバル配列を取得" time="0.000186105">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; モーダルスケールパターンのインターバル配列 &gt; 正常ケース: Locrianモードのインターバル配列を取得" time="0.000180555">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 配列の基本的性質の検証 &gt; 正常ケース: 配列の最初の要素は常に0" time="0.000302762">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 配列の基本的性質の検証 &gt; 正常ケース: 配列の長さはintervals配列の長さ + 1" time="0.000175005">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 配列の基本的性質の検証 &gt; 正常ケース: 配列の要素は昇順に並んでいる" time="0.00171334">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 配列の基本的性質の検証 &gt; 正常ケース: 配列の要素は全て0-12の範囲内" time="0.001395609">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; カスタムパターンでの動作検証 &gt; 正常ケース: 単一音程のパターン" time="0.000140631">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; カスタムパターンでの動作検証 &gt; 正常ケース: 3音のパターン" time="0.00012348">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; カスタムパターンでの動作検証 &gt; 正常ケース: derive後のパターンでも正しく動作" time="0.000245505">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 数学的検証 &gt; 正常ケース: 累積インターバルの計算が正しい" time="0.000156379">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 数学的検証 &gt; 正常ケース: HarmonicMinorの特徴的な増2度を含む配列" time="0.000146792">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 型安全性の確認 &gt; 正常ケース: 返り値は数値配列" time="0.000338448">
        </testcase>
        <testcase classname="src/domain/common/test/ScalePattern.test.ts" name="ScalePattern &gt; getIntervalsFromRootAsArray - インターバル配列取得 &gt; 型安全性の確認 &gt; 正常ケース: 返り値は変更可能な配列（元のデータは変更されない）" time="0.000391325">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/key/test/Key.test.ts" timestamp="2025-09-28T09:49:31.745Z" hostname="runnervm3ublj" tests="48" failures="0" errors="0" skipped="0" time="0.028237567">
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; メジャーキーのKeySignature計算 &gt; 正常ケース: C major → 調号なし (fifthsIndex: 0)" time="0.002295748">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; メジャーキーのKeySignature計算 &gt; 正常ケース: G major → 1つのシャープ (fifthsIndex: 1)" time="0.000516688">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; メジャーキーのKeySignature計算 &gt; 正常ケース: F major → 1つのフラット (fifthsIndex: 11)" time="0.000332296">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; メジャーキーのKeySignature計算 &gt; 正常ケース: B♭ major → 2つのフラット (fifthsIndex: 10)" time="0.000262577">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; マイナーキーのKeySignature計算（相対長調から導出） &gt; 正常ケース: A minor → C major相対 (fifthsIndex: 0)" time="0.000416954">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; マイナーキーのKeySignature計算（相対長調から導出） &gt; 正常ケース: E minor → G major相対 (fifthsIndex: 1)" time="0.000194301">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; マイナーキーのKeySignature計算（相対長調から導出） &gt; 正常ケース: F# minor → A major相対 (fifthsIndex: 3)" time="0.000228293">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; マイナーキーのKeySignature計算（相対長調から導出） &gt; 正常ケース: D minor → F major相対 (fifthsIndex: 11)" time="0.000160088">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 全ての五度圏位置でKeySignatureが正しく計算される" time="0.001380812">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; KeySignature calculation (calculateKeySignatureForKey) &gt; 音楽理論的妥当性の確認 &gt; 正常ケース: 相対調関係のKeySignatureが一致する" time="0.000404079">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; constructor &gt; 正常ケース: PitchClassとScalePatternから調を作成できる" time="0.00038257">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; constructor &gt; 正常ケース: マイナーキーを作成できる" time="0.000757983">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; keyName getter &gt; 正常ケース: キー名を正しく取得できる" time="0.000260173">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; buildTriad - Key固有テスト &gt; 正常ケース: C Majorの代表的な和音名が正しく表示される" time="0.000875273">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 特定和音取得メソッド &gt; 正常ケース: トニックコードを正しく取得" time="0.000341253">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 特定和音取得メソッド &gt; 正常ケース: ドミナントコードを正しく取得" time="0.000283737">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 特定和音取得メソッド &gt; 正常ケース: サブドミナントコードを正しく取得" time="0.000178631">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; fromCircleOfFifths ファクトリメソッド &gt; 正常ケース: 五度圏インデックスからメジャーキーを生成" time="0.000180244">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; fromCircleOfFifths ファクトリメソッド &gt; 正常ケース: 五度圏インデックスからマイナーキーを生成" time="0.000190674">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; fromCircleOfFifths ファクトリメソッド &gt; 正常ケース: 全ての五度圏インデックスでキーを生成可能" time="0.003639932">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; primaryScale プロパティ &gt; 正常ケース: 主要スケールが正しく設定される" time="0.00025923">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 境界値テスト &gt; 境界値ケース: 全ての五度圏ポジションでのキー作成" time="0.001485415">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 境界値テスト &gt; エンハーモニック表記: メジャーキーは♭表記、マイナーキーは#表記" time="0.001566536">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 音楽理論的特性 &gt; 正常ケース: C Majorキーのダイアトニックコード進行" time="0.000405392">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 音楽理論的特性 &gt; 正常ケース: 相対調関係の確認" time="0.000246908">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 実用例 &gt; 正常ケース: 一般的なキーでの基本和音" time="0.000464652">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: メジャーキーの日本語度数名配列を正しく返す" time="0.001380841">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: マイナーキーの日本語度数名配列を正しく返す" time="0.000404541">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: 異なるメジャーキーでも同じ度数名を返す" time="0.000202175">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: 常に同じ参照を返す（メジャーキー）" time="0.000159727">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; japaneseScaleDegreeNames getter &gt; 正常ケース: 常に同じ参照を返す（マイナーキー）" time="0.000190423">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 正常ケース: メジャーキーから相対マイナーキーを取得" time="0.00031795">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 正常ケース: マイナーキーから相対メジャーキーを取得" time="0.000262837">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 正常ケース: G Majorから相対マイナーキー（E Minor）を取得" time="0.000287773">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 正常ケース: E MinorからG Majorを取得" time="0.000305837">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getRelativeKey &gt; 境界値ケース: 五度圏の境界での相対調" time="0.000261576">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getParallelKey &gt; 正常ケース: メジャーキーから同主マイナーキーを取得" time="0.000349218">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getParallelKey &gt; 正常ケース: マイナーキーから同主メジャーキーを取得" time="0.000281021">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getParallelKey &gt; 正常ケース: G Majorから同主マイナーキー（G Minor）を取得" time="0.000291741">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getParallelKey &gt; 正常ケース: G MinorからG Majorを取得" time="0.000282854">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getDominantKey &gt; 正常ケース: C Majorからドミナント調（G Major）を取得" time="0.000323079">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getDominantKey &gt; 正常ケース: A Minorからドミナント調（E Minor）を取得" time="0.000260984">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getDominantKey &gt; 正常ケース: F Majorからドミナント調（C Major）を取得" time="0.000270542">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getDominantKey &gt; 境界値ケース: 五度圏の境界でのドミナント調" time="0.000293615">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getSubdominantKey &gt; 正常ケース: C Majorからサブドミナント調（F Major）を取得" time="0.000338658">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getSubdominantKey &gt; 正常ケース: A Minorからサブドミナント調（D Minor）を取得" time="0.000279468">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getSubdominantKey &gt; 正常ケース: G Majorからサブドミナント調（C Major）を取得" time="0.000312981">
        </testcase>
        <testcase classname="src/domain/key/test/Key.test.ts" name="Key &gt; 関連調メソッド &gt; getSubdominantKey &gt; 境界値ケース: 五度圏の境界でのサブドミナント調" time="0.000246738">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/scale/test/Scale.test.ts" timestamp="2025-09-28T09:49:31.754Z" hostname="runnervm3ublj" tests="32" failures="0" errors="0" skipped="0" time="0.022764647">
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; スケール作成 &gt; 正常ケース: PitchClassとScalePatternからスケールを作成" time="0.002111467">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; スケール作成 &gt; 正常ケース: デフォルトオクターブでスケールを作成" time="0.000318291">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; スケール作成 &gt; 正常ケース: 指定オクターブでスケールを作成" time="0.000293644">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 構成音取得 &gt; 正常ケース: Cメジャースケールの構成音" time="0.000524042">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 構成音取得 &gt; 正常ケース: Aナチュラルマイナースケールの構成音" time="0.000515116">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 構成音取得 &gt; 正常ケース: Gメジャースケールの構成音" time="0.000501951">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 正常ケース: 各度数の音を正しく取得" time="0.000491242">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 境界値ケース: 最初の度数（1度）" time="0.000218025">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 境界値ケース: 最後の度数（7度）" time="0.000345511">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 異常ケース: 無効な度数（0）でundefinedを返す" time="0.000343838">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 異常ケース: 無効な度数（9）でundefinedを返す" time="0.000186676">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 度数指定音取得 &gt; 異常ケース: 負の度数でundefinedを返す" time="0.000181487">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; オクターブ処理 &gt; 正常ケース: 低いオクターブでのスケール" time="0.000221802">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; オクターブ処理 &gt; 正常ケース: 高いオクターブでのスケール" time="0.000478748">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; オクターブ処理 &gt; 正常ケース: オクターブを跨ぐスケール" time="0.000418957">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 異なるスケールパターン &gt; 正常ケース: ミクソリディアンモードの構成音" time="0.000563916">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 異なるスケールパターン &gt; 正常ケース: ドリアンモードの構成音" time="0.000464662">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 音楽理論的検証 &gt; 正常ケース: メジャースケールの音程関係" time="0.003487189">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; 音楽理論的検証 &gt; 正常ケース: ナチュラルマイナーの音程関係" time="0.000320364">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; エッジケース &gt; 境界値ケース: 最低オクターブでのスケール" time="0.000232371">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; エッジケース &gt; 境界値ケース: 高オクターブでのスケール" time="0.000210781">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; ダイアトニック音（スケール構成音）の分析 &gt; 正常ケース: Cメジャースケールのダイアトニック音を正しく分析" time="0.001625526">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; ダイアトニック音（スケール構成音）の分析 &gt; 正常ケース: Aナチュラルマイナースケールのダイアトニック音を正しく分析" time="0.001643409">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; ノンダイアトニック音（変化音）の分析 &gt; 正常ケース: Cメジャースケールのノンダイアトニック音を正しく分析" time="0.000960812">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; ノンダイアトニック音（変化音）の分析 &gt; 正常ケース: マイナースケールでのノンダイアトニック音分析" time="0.000862921">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: step = 0（ルート音）" time="0.000252769">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: step = 11（オクターブ下の音）" time="0.000234776">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: 負の値（正規化される）" time="0.000276703">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: 12以上の値（正規化される）" time="0.00020481">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 境界値とエッジケース &gt; 境界値ケース: 大きな値での正規化" time="0.00019965">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 異なるスケールパターンでの動作確認 &gt; 正常ケース: ドリアンモードでの度数分析" time="0.000776079">
        </testcase>
        <testcase classname="src/domain/scale/test/Scale.test.ts" name="Scale &gt; getDegreeFromSteps - 度数分析機能 &gt; 異なるスケールパターンでの動作確認 &gt; 正常ケース: ミクソリディアンモードでの度数分析" time="0.000567473">
        </testcase>
    </testsuite>
    <testsuite name="src/domain/services/test/AudioEngine.test.ts" timestamp="2025-09-28T09:49:31.759Z" hostname="runnervm3ublj" tests="16" failures="0" errors="0" skipped="0" time="0.025039066">
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setVolume &gt; 正常ケース: 音量設定がconfigに反映される" time="0.002761262">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setVolume &gt; 境界値ケース: 極端な音量値" time="0.000580136">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setArpeggioSpeed &gt; 正常ケース: 有効範囲内の速度設定" time="0.000792279">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setArpeggioSpeed &gt; 境界値ケース: 最小値以下の場合は50msに制限" time="0.000423385">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; setArpeggioSpeed &gt; 境界値ケース: 最大値以上の場合は500msに制限" time="0.000478899">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; play &gt; 正常ケース: 和音再生インターフェースのテスト" time="0.002475953">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; config初期値 &gt; 正常ケース: デフォルト設定値の確認" time="0.000359406">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 設定の統合テスト &gt; 正常ケース: 設定変更後の和音再生" time="0.000978766">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 設定の統合テスト &gt; 正常ケース: 設定のリセット動作" time="0.00042027">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 型安全性の検証 &gt; 正常ケース: Chordエンティティとの統合" time="0.001574531">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 型安全性の検証 &gt; 正常ケース: 音量設定の型安全性" time="0.001777256">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 型安全性の検証 &gt; 正常ケース: アルペジオ速度設定の型安全性" time="0.001089">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 実用的な使用例 &gt; 正常ケース: 基本的な和音進行の再生" time="0.001291736">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 実用的な使用例 &gt; 正常ケース: Toneコンテキストが停止状態の場合にTone.start()が呼ばれる" time="0.002570287">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 実用的な使用例 &gt; 正常ケース: 動的な設定変更とセッション" time="0.001847476">
        </testcase>
        <testcase classname="src/domain/services/test/AudioEngine.test.ts" name="AudioEngine &gt; 実用的な使用例 &gt; 正常ケース: 異なるオクターブでの再生" time="0.002388531">
        </testcase>
    </testsuite>
    <testsuite name="src/features/key-controller/test/KeyController.test.tsx" timestamp="2025-09-28T09:49:31.762Z" hostname="runnervm3ublj" tests="12" failures="0" errors="0" skipped="0" time="0.224812176">
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 基本レンダリング &gt; 正常ケース: コンポーネントが正しくレンダリングされる" time="0.090896614">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 基本レンダリング &gt; 正常ケース: カスタムタイトルが設定される" time="0.010326483">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 基本レンダリング &gt; 正常ケース: className が適用される" time="0.007736089">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 選択状態の表示 &gt; 正常ケース: 現在のキーに対応するボタンが選択状態になる" time="0.013949281">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; 選択状態の表示 &gt; 正常ケース: 現在のキー名が表示される" time="0.00643247">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; ボタンクリック動作 &gt; 正常ケース: トニックボタンクリックでキーが変更される" time="0.013845472">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; ボタンクリック動作 &gt; 正常ケース: 全てのトニックボタンが機能する" time="0.02756118">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; ボタンクリック動作 &gt; 正常ケース: 同じボタンを再度クリックしても動作する" time="0.006305836">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; アクセシビリティ &gt; 正常ケース: 全てのボタンに適切なaria-labelが設定される" time="0.01236839">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; アクセシビリティ &gt; 正常ケース: ボタンにキーボードフォーカスが可能" time="0.02052537">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; レスポンシブデザイン &gt; 正常ケース: グリッドレイアウトのクラスが適用される" time="0.006153022">
        </testcase>
        <testcase classname="src/features/key-controller/test/KeyController.test.tsx" name="KeyController &gt; レスポンシブデザイン &gt; 正常ケース: タイトルがレスポンシブ表示クラスを持つ" time="0.006030445">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/constants/test/hubs.test.ts" timestamp="2025-09-28T09:49:31.765Z" hostname="runnervm3ublj" tests="9" failures="0" errors="0" skipped="0" time="0.010615721">
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubDisplayNameEn関数 &gt; 正常ケース: circle-of-fifthsの英語名を取得" time="0.001840093">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubDisplayNameEn関数 &gt; 正常ケース: chromatic-circleの英語名を取得" time="0.000239204">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubDisplayNameEn関数 &gt; 境界値ケース: 全てのHubTypeの英語名を正しく取得" time="0.0015848">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: 正しいオプション配列を生成" time="0.000705569">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: 配列の各要素が正しい型構造を持つ" time="0.002154978">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: shortNameがlabelに使用される" time="0.000282333">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: descriptionがHUBSデータと一致する" time="0.000349528">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 境界値ケース: 全てのHubTypeがオプションに含まれる" time="0.001138322">
        </testcase>
        <testcase classname="src/shared/constants/test/hubs.test.ts" name="hubs constants &gt; getHubOptions関数 &gt; 正常ケース: 関数の呼び出しが冪等である" time="0.000499387">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/hooks/test/useBodyScrollLock.test.ts" timestamp="2025-09-28T09:49:31.767Z" hostname="runnervm3ublj" tests="9" failures="0" errors="0" skipped="0" time="0.011612458">
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = true の場合 &gt; 正常ケース: bodyのスタイルが正しく設定される" time="0.003147459">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = true の場合 &gt; 正常ケース: クリーンアップ時に元の状態に復元される" time="0.002239274">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = true の場合 &gt; 境界値ケース: scrollY = 0 の場合" time="0.000510297">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = false の場合 &gt; 正常ケース: bodyのスタイルが変更されない" time="0.000504576">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; locked = false の場合 &gt; 正常ケース: scrollToが呼ばれない" time="0.000482315">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; 状態変更 &gt; 正常ケース: locked が true → false に変更された場合" time="0.000552033">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; 状態変更 &gt; 正常ケース: locked が false → true に変更された場合" time="0.000534672">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; 実際のフック使用例 &gt; 正常ケース: フックのAPIが正しく動作する" time="0.001337792">
        </testcase>
        <testcase classname="src/shared/hooks/test/useBodyScrollLock.test.ts" name="useBodyScrollLock &gt; 実際のフック使用例 &gt; 正常ケース: フックが引数を受け取る" time="0.000542667">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/hooks/test/useFixedViewportHeight.test.ts" timestamp="2025-09-28T09:49:31.769Z" hostname="runnervm3ublj" tests="12" failures="0" errors="0" skipped="0" time="0.054536314">
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 初期化 &gt; 正常ケース: 初期状態でwindow.innerHeightを正しく取得する" time="0.013414503">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 初期化 &gt; 境界値ケース: window.innerHeightが0の場合" time="0.001500282">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 初期化 &gt; 境界値ケース: window.innerHeightが極大値の場合" time="0.001779201">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 固定値の維持 &gt; 正常ケース: 初回取得後は値が固定される" time="0.002232912">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 固定値の維持 &gt; 正常ケース: 複数回の再レンダリングでも値が固定される" time="0.003261941">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; SSR対応 &gt; 正常ケース: windowが正常にアクセスできることを確認" time="0.002161229">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; SSR対応 &gt; 正常ケース: useEffectがクライアントサイドでのみ実行される" time="0.001761788">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 複数インスタンス &gt; 正常ケース: 複数のインスタンスが独立して動作する" time="0.004248523">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 複数インスタンス &gt; 正常ケース: 異なるタイミングでマウントされたインスタンス" time="0.004083014">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 戻り値の型 &gt; 正常ケース: 戻り値がnumber型である" time="0.011212428">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 戻り値の型 &gt; 正常ケース: 戻り値が有限数である" time="0.001852786">
        </testcase>
        <testcase classname="src/shared/hooks/test/useFixedViewportHeight.test.ts" name="useFixedViewportHeight &gt; 戻り値の型 &gt; 正常ケース: 戻り値が非負数である" time="0.004574555">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/utils/test/keyColorUtils.test.ts" timestamp="2025-09-28T09:49:31.771Z" hostname="runnervm3ublj" tests="3" failures="0" errors="0" skipped="0" time="0.002650386">
        <testcase classname="src/shared/utils/test/keyColorUtils.test.ts" name="keyColorUtils &gt; getMusicColorKey &gt; 正常ケース: C Majorで正確なCSS変数名を生成する" time="0.001174499">
        </testcase>
        <testcase classname="src/shared/utils/test/keyColorUtils.test.ts" name="keyColorUtils &gt; getMusicColorKey &gt; 正常ケース: A Minorで正確なCSS変数名を生成する" time="0.00019411">
        </testcase>
        <testcase classname="src/shared/utils/test/keyColorUtils.test.ts" name="keyColorUtils &gt; getMusicColorKey &gt; 正常ケース: F# Majorで正確なCSS変数名を生成する" time="0.000222883">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/utils/test/musicColorSystem.test.ts" timestamp="2025-09-28T09:49:31.771Z" hostname="runnervm3ublj" tests="5" failures="0" errors="0" skipped="0" time="0.007142649">
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: 全84色のCSS変数を正確なHSL値で生成する" time="0.002050854">
        </testcase>
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: 84個のCSS変数が生成される" time="0.001324107">
        </testcase>
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: 正確なHSL形式でカラー値が出力される" time="0.000486603">
        </testcase>
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: 五度圏順の色相進行（30°刻み）が正確に生成される" time="0.001155253">
        </testcase>
        <testcase classname="src/shared/utils/test/musicColorSystem.test.ts" name="musicColorSystem generateMusicColorTheme &gt; 正常ケース: モード階層の明度進行（70%→28%）が正確に生成される" time="0.000640188">
        </testcase>
    </testsuite>
    <testsuite name="src/shared/utils/test/scroll.test.ts" timestamp="2025-09-28T09:49:31.772Z" hostname="runnervm3ublj" tests="19" failures="0" errors="0" skipped="0" time="0.01959652">
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 正常系 &gt; 正常ケース: data-scrollable属性がある要素を優先的に検索する" time="0.005827159">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 正常系 &gt; 正常ケース: overflow-y: auto の要素を検索する" time="0.0015041">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 正常系 &gt; 正常ケース: overflow-y: scroll の要素を検索する" time="0.001251301">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 正常系 &gt; 正常ケース: 複数の親要素を遡って検索する" time="0.001448457">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 境界値・異常系 &gt; 境界値ケース: スクロール可能な親要素が存在しない場合はnullを返す" time="0.001201038">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 境界値・異常系 &gt; 境界値ケース: document.bodyに到達した場合はnullを返す" time="0.000848424">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 境界値・異常系 &gt; 境界値ケース: parentElementがnullの場合はnullを返す" time="0.000578784">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; findScrollableParent &gt; 境界値・異常系 &gt; 境界値ケース: targetがdocument.bodyの場合はnullを返す" time="0.000645257">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 正常系 &gt; 上方向ドラッグ + 最上部の場合はドラッグを許可する" time="0.000483907">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 正常系 &gt; 正常ケース: 上方向ドラッグ + 最上部以外の場合はドラッグを不許可にする" time="0.000349017">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 正常系 &gt; 正常ケース: 下方向ドラッグ + 最下部の場合はドラッグを許可する" time="0.000423135">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 正常系 &gt; 正常ケース: 下方向ドラッグ + 最下部以外の場合はドラッグを不許可にする" time="0.00030185">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: scrollTop = 0 の場合（最上部）" time="0.000327798">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: scrollTop + clientHeight = scrollHeight - 1 の場合（1px余裕の境界）" time="0.0005878">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: scrollTop + clientHeight = scrollHeight の場合（完全な最下部）" time="0.000348026">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: scrollTop + clientHeight &gt; scrollHeight の場合（理論的には起こらないが）" time="0.000359447">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; 境界値 &gt; 境界値ケース: スクロールがない場合（scrollHeight = clientHeight）" time="0.00030706">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; DragDirection型の網羅 &gt; 正常ケース: up方向のドラッグをテストする" time="0.000250905">
        </testcase>
        <testcase classname="src/shared/utils/test/scroll.test.ts" name="scroll utils &gt; shouldAllowDrag &gt; DragDirection型の網羅 &gt; 正常ケース: down方向のドラッグをテストする" time="0.000236659">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" timestamp="2025-09-28T09:49:31.775Z" hostname="runnervm3ublj" tests="12" failures="0" errors="0" skipped="0" time="0.070141739">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; 基本機能 &gt; 正常ケース: フックが正しい関数群を返す" time="0.01980108">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; 基本機能 &gt; 正常ケース: 複数回レンダリングでも安定したインスタンスを返す" time="0.003185269">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 正常ケース: 五度圏ポジションからメジャーコードを再生" time="0.004093724">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 正常ケース: 五度圏ポジションからマイナーコードを再生" time="0.003639">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 正常ケース: 異なる五度圏ポジションでの再生" time="0.003915433">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 異常ケース: コード生成でエラーが発生した場合のハンドリング" time="0.005937364">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; playChordAtPosition &gt; 異常ケース: 音響再生でエラーが発生した場合のハンドリング" time="0.002882197">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; setVolume &gt; 正常ケース: 音量設定がAudioEngineに伝達される" time="0.002217042">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; setVolume &gt; 正常ケース: 複数回の音量設定" time="0.00272236">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; setArpeggioSpeed &gt; 正常ケース: アルペジオ速度設定がAudioEngineに伝達される" time="0.006239022">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; setArpeggioSpeed &gt; 正常ケース: 複数回のアルペジオ速度設定" time="0.003156826">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useAudio.test.ts" name="useAudio &gt; 統合テスト &gt; 正常ケース: 設定変更と和音再生の組み合わせ" time="0.00990871">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" timestamp="2025-09-28T09:49:31.777Z" hostname="runnervm3ublj" tests="8" failures="0" errors="0" skipped="0" time="0.048307147">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; 正常ケース: ダイアトニックコード非表示時、常にfalseを返す" time="0.019915763">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; 正常ケース: ダイアトニックコード表示時、該当コードでtrueを返す" time="0.003888914">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; 正常ケース: ダイアトニックコード表示時、非該当コードでfalseを返す" time="0.003425855">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; 境界値ケース: 異なるキーでのダイアトニックコード判定" time="0.002714536">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; ストア変更テスト: layerStore状態変更時の再計算" time="0.005770003">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; キー変更テスト: 異なるキー引数での動作確認" time="0.004505538">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; getHighlightInfo function &gt; メモ化テスト: 同じ引数で複数回呼び出した際の一貫性" time="0.003004363">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useDiatonicChordHighlight.test.ts" name="useDiatonicChordHighlight hook &gt; createCompositeKey utility function &gt; 正常ケース: 異なる引数で異なるキーを生成" time="0.002952367">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" timestamp="2025-09-28T09:49:31.778Z" hostname="runnervm3ublj" tests="11" failures="0" errors="0" skipped="0" time="0.045687606">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 統合機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.018945302">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 統合機能 &gt; 正常ケース: 個別フックが正しい引数で呼ばれる" time="0.004594021">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 統合機能 &gt; 正常ケース: ストア状態変更時の個別フック再実行" time="0.002780949">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 異なるセグメントでの動作 &gt; 正常ケース: 異なるポジションのセグメント" time="0.002178992">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; 異なるセグメントでの動作 &gt; 正常ケース: 異なるキーでの動作" time="0.002550521">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; リップルエフェクト統合 &gt; 正常ケース: リップルトリガーが正しく統合される" time="0.001896477">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; リップルエフェクト統合 &gt; 正常ケース: リップル状態が正しく返される" time="0.001591122">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; Props変更の影響 &gt; 正常ケース: Props変更時の個別フック再実行" time="0.002303864">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; Props変更の影響 &gt; 正常ケース: 同じPropsでの安定性" time="0.002409159">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; エラーハンドリング &gt; 異常ケース: useAudioがundefinedを返す場合" time="0.001907027">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaBehavior.test.ts" name="useKeyAreaBehavior integration hook &gt; エラーハンドリング &gt; 異常ケース: ストア関数がnullの場合" time="0.002144625">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" timestamp="2025-09-28T09:49:31.780Z" hostname="runnervm3ublj" tests="17" failures="0" errors="0" skipped="0" time="0.060748512">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.014493672">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 基本機能 &gt; 正常ケース: layoutオブジェクトが正しい構造を持つ" time="0.001632318">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; ダイアトニックハイライト機能 &gt; 正常ケース: ハイライト非表示時の動作" time="0.002887166">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; ダイアトニックハイライト機能 &gt; 正常ケース: ハイライト表示時の動作" time="0.00166602">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; ダイアトニックハイライト機能 &gt; 正常ケース: 異なるローマ数字での動作確認" time="0.005021795">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 色計算機能 &gt; 正常ケース: keyAreaColorの計算" time="0.001596351">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 色計算機能 &gt; 正常ケース: currentKeyColorの計算" time="0.001629954">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 色計算機能 &gt; 正常ケース: 異なるキーでの色計算" time="0.003707044">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 色計算機能 &gt; 正常ケース: マイナーキーでの色計算" time="0.002540823">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; レイアウト計算機能 &gt; 正常ケース: レイアウトオフセットの適用" time="0.002495569">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; レイアウト計算機能 &gt; 正常ケース: 異なるテキスト位置での計算" time="0.005764011">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 依存関係の管理 &gt; 正常ケース: useDiatonicChordHighlightが正しい引数で呼ばれる" time="0.001501695">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; 依存関係の管理 &gt; 正常ケース: Props変更時の再計算" time="0.002679781">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 同じProps値での複数回レンダリング" time="0.001777156">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 依存配列の動作確認" time="0.001455159">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; エラーハンドリング &gt; 異常ケース: getMusicColorVariableがエラーをスローした場合" time="0.006466564">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyAreaPresentation.test.ts" name="useKeyAreaPresentation hook &gt; エラーハンドリング &gt; 異常ケース: useDiatonicChordHighlightがnullを返した場合" time="0.00147753">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" timestamp="2025-09-28T09:49:31.782Z" hostname="runnervm3ublj" tests="17" failures="0" errors="0" skipped="0" time="0.069169636">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.018748227">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 基本機能 &gt; 正常ケース: 複数回レンダリングで安定した関数参照を返す" time="0.003074944">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; useLongPress統合 &gt; 正常ケース: useLongPressが正しい引数で呼ばれる" time="0.005099228">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; useLongPress統合 &gt; 正常ケース: ハンドラがuseLongPressから返される" time="0.002410231">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; コールバック関数の動作 &gt; 正常ケース: handleClickコールバックの動作" time="0.002848444">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; コールバック関数の動作 &gt; 正常ケース: handleLongPressコールバックの動作" time="0.002936768">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; コールバック関数の動作 &gt; 正常ケース: マイナーキーでのhandleLongPress動作" time="0.002338048">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; コールバック関数の動作 &gt; 正常ケース: handleLongPressStartコールバックの動作" time="0.001747431">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseEnter機能 &gt; 正常ケース: マウス進入時の処理" time="0.00231255">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseEnter機能 &gt; 正常ケース: 異なるキーでのマウス進入" time="0.013160813">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseLeave機能 &gt; 正常ケース: マウス退出時の処理" time="0.001900956">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseLeave機能 &gt; 正常ケース: 複数回のマウス退出" time="0.003334727">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; onMouseLeave機能 &gt; 正常ケース: マウス進入→退出のサイクル" time="0.001657955">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 依存関係とメモ化 &gt; 正常ケース: Props変更時の関数再生成" time="0.001501184">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 依存関係とメモ化 &gt; 正常ケース: 同じPropsでの関数安定性" time="0.001034399">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 統合テスト &gt; 正常ケース: フル操作シーケンス" time="0.00095435">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyInteraction.test.ts" name="useKeyInteraction hook &gt; 統合テスト &gt; 正常ケース: useLongPressの統合テスト" time="0.00097652">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" timestamp="2025-09-28T09:49:31.785Z" hostname="runnervm3ublj" tests="23" failures="0" errors="0" skipped="0" time="0.075985817">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.01371443">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 基本機能 &gt; 正常ケース: 初期状態（選択・ホバーなし）" time="0.001998227">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 選択状態の判定 &gt; 正常ケース: 選択されている場合" time="0.002508422">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 選択状態の判定 &gt; 正常ケース: 異なるキーが選択されている場合" time="0.002049993">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 選択状態の判定 &gt; 正常ケース: メジャー・マイナーキーの判定" time="0.003917437">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 選択状態の判定 &gt; 境界値ケース: fifthsIndexとisMajorの厳密な比較" time="0.00520755">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; ホバー状態の判定 &gt; 正常ケース: ホバーされている場合" time="0.00204311">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; ホバー状態の判定 &gt; 正常ケース: 異なるキーがホバーされている場合" time="0.007669675">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; ホバー状態の判定 &gt; 正常ケース: 選択かつホバーの場合" time="0.003166512">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: メジャーキーの通常状態" time="0.004973124">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: マイナーキーの通常状態" time="0.001439009">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: 選択状態の優先" time="0.001518346">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: ホバー状態" time="0.001274253">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; fillClassName &gt; 正常ケース: 選択状態がホバー状態より優先される" time="0.001537432">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; textClassName &gt; 正常ケース: メジャーキーのテキストクラス" time="0.001089431">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; textClassName &gt; 正常ケース: マイナーキーのテキストクラス" time="0.001044828">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; クラス名の生成 &gt; textClassName &gt; 正常ケース: 状態によらずキータイプでテキストクラスが決まる" time="0.00103005">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 状態変更の反応性 &gt; 正常ケース: ストア状態変更時の再計算" time="0.004531215">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; 状態変更の反応性 &gt; 正常ケース: ホバー状態の変化" time="0.00166611">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 同じProps・ストア状態での結果安定性" time="0.003360215">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; メモ化とパフォーマンス &gt; 正常ケース: Props変更時の再計算" time="0.002038231">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; エッジケース &gt; 正常ケース: nullストア値の処理" time="0.001064104">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useKeyState.test.ts" name="useKeyState hook &gt; エッジケース &gt; 境界値ケース: 極端なfifthsIndex値" time="0.00441563">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" timestamp="2025-09-28T09:49:31.790Z" hostname="runnervm3ublj" tests="16" failures="0" errors="0" skipped="0" time="0.083205607">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.022034048">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; 基本機能 &gt; 正常ケース: 複数回レンダリングで安定した関数参照を返す" time="0.00388744">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: 短時間クリック（onClick）" time="0.004493674">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: 長押し（onLongPress）" time="0.002926358">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: カスタム遅延時間" time="0.003119095">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: マウスムーブでの中断" time="0.003301714">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; マウスイベント処理 &gt; 正常ケース: マウスリーブでの中断" time="0.002837352">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; タッチイベント処理 &gt; 正常ケース: 短時間タッチ（onClick）" time="0.002553005">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; タッチイベント処理 &gt; 正常ケース: 長押しタッチ（onLongPress）" time="0.003248385">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; タッチイベント処理 &gt; 正常ケース: タッチムーブでの中断" time="0.00911178">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; エッジケース &gt; 正常ケース: 遅延時間0での即座実行" time="0.00622732">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; エッジケース &gt; 正常ケース: 負の遅延時間の処理" time="0.006079315">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; エッジケース &gt; 異常ケース: コールバック関数でエラーが発生" time="0.00363928">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 同じPropsでの関数安定性" time="0.002370517">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 異なるコールバックでの再生成" time="0.002175254">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useLongPress.test.ts" name="useLongPress hook &gt; 複雑なシーケンス &gt; 正常ケース: 複数回の操作サイクル" time="0.002424046">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" timestamp="2025-09-28T09:49:31.793Z" hostname="runnervm3ublj" tests="18" failures="0" errors="0" skipped="0" time="0.083387215">
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; 基本機能 &gt; 正常ケース: フックが正しい構造を返す" time="0.020646366">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; 基本機能 &gt; 正常ケース: 初期状態でリップルが非活性" time="0.004409959">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; 基本機能 &gt; 正常ケース: 複数回レンダリングで安定した関数参照を返す" time="0.005354081">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルトリガー機能 &gt; 正常ケース: triggerRippleでリップルが活性化" time="0.003385279">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルトリガー機能 &gt; 正常ケース: 複数回triggerRippleを呼び出し" time="0.003076276">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルトリガー機能 &gt; 正常ケース: triggerRipple後の自動リセット" time="0.003057911">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルトリガー機能 &gt; 正常ケース: 適切なタイムアウト時間での自動リセット" time="0.003279252">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルリセット機能 &gt; 正常ケース: resetRippleで手動リセット" time="0.002391396">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルリセット機能 &gt; 正常ケース: 非活性状態でのresetRipple" time="0.002551122">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; リップルリセット機能 &gt; 正常ケース: 複数回resetRippleを呼び出し" time="0.002782701">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; タイマー管理 &gt; 正常ケース: 手動リセット後の自動リセットタイマー無効化" time="0.005183604">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; タイマー管理 &gt; 正常ケース: 複数回のトリガーでタイマーリセット" time="0.005061719">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; タイマー管理 &gt; 正常ケース: コンポーネントアンマウント時のタイマークリア" time="0.002289947">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; エッジケース &gt; 正常ケース: 高速連続トリガー" time="0.006370366">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; エッジケース &gt; 正常ケース: トリガー→リセット→トリガーのサイクル" time="0.002262928">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 関数の安定性" time="0.001705493">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; メモ化とパフォーマンス &gt; 正常ケース: 状態変更時の適切な再レンダリング" time="0.001605418">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/hooks/test/useRippleEffect.test.ts" name="useRippleEffect hook &gt; 統合テスト &gt; 正常ケース: 完全なリップルライフサイクル" time="0.002099354">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" timestamp="2025-09-28T09:49:31.796Z" hostname="runnervm3ublj" tests="12" failures="0" errors="0" skipped="0" time="0.022046555">
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; 基本機能 &gt; 正常ケース: 関数が正しい構造を返す" time="0.002142955">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; 基本機能 &gt; 正常ケース: 複数回呼び出しで同じ値を返す（事前計算済み）" time="0.000342135">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; viewBox計算 &gt; 正常ケース: 正しいSVGビューボックス形式" time="0.000314474">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; viewBox計算 &gt; 境界値ケース: CIRCLE_LAYOUT.RADIUSの値に基づく計算" time="0.000941576">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; segments配列 &gt; 正常ケース: 12セグメントが生成される" time="0.000196895">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; segments配列 &gt; 正常ケース: 各セグメントが必要なプロパティを持つ" time="0.006622234">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; segments配列 &gt; 正常ケース: セグメントのposition値が0-11の範囲" time="0.001012469">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; segments配列 &gt; 正常ケース: 各セグメントのキー情報が正しく設定される" time="0.002886314">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; textRotation &gt; 正常ケース: textRotationが数値である" time="0.000320285">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; テキスト位置計算 &gt; 正常ケース: 3つの異なる半径でテキスト位置が計算される" time="0.004209689">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; 事前計算の最適化 &gt; パフォーマンステスト: 関数呼び出しが高速である" time="0.000336545">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/circleOfFifthsData.test.ts" name="getCircleOfFifthsData &gt; 事前計算の最適化 &gt; メモ化テスト: 同じオブジェクト参照が返される" time="0.000611745">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/geometry.test.ts" timestamp="2025-09-28T09:49:31.799Z" hostname="runnervm3ublj" tests="18" failures="0" errors="0" skipped="0" time="0.014038992">
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 正常ケース: 位置0で正しい角度を返す" time="0.004775198">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 正常ケース: 各位置（0-11）で正しい角度を計算" time="0.000973376">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 正常ケース: 位置3（A）で正しい角度を返す" time="0.000287784">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 正常ケース: 位置6（F#/G♭）で正しい角度を返す" time="0.000201854">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateAngle &gt; 異常ケース: 無効な位置でCircleOfFifthsErrorをスロー" time="0.000928562">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; normalizeAngle &gt; 正常ケース: 正の角度をそのまま返す" time="0.000303883">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; normalizeAngle &gt; 正常ケース: 負の角度を正規化" time="0.000294576">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; normalizeAngle &gt; 正常ケース: 2π以上の角度を正規化" time="0.000230958">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; normalizeAngle &gt; 境界値ケース: 0度と2π度の処理" time="0.00042052">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 0度で正しい座標を返す" time="0.000321948">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 90度で正しい座標を返す" time="0.000219147">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 180度で正しい座標を返す" time="0.000216">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 270度で正しい座標を返す" time="0.000195382">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; polarToCartesian &gt; 正常ケース: 半径0で原点を返す" time="0.000392017">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateTextPosition &gt; 正常ケース: 各位置で正しいテキスト座標を計算" time="0.001101353">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateTextPosition &gt; 異常ケース: 無効な位置でCircleOfFifthsErrorをスロー" time="0.000507311">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateTextPosition &gt; 異常ケース: 負の半径でCircleOfFifthsErrorをスロー" time="0.000414228">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/geometry.test.ts" name="geometry utils &gt; calculateTextRotation &gt; 正常ケース: 常に0を返す" time="0.000166128">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/index.test.ts" timestamp="2025-09-28T09:49:31.802Z" hostname="runnervm3ublj" tests="3" failures="0" errors="0" skipped="0" time="0.006126604">
        <testcase classname="src/features/circle-of-fifths/utils/test/index.test.ts" name="utils index exports &gt; エクスポートの確認: すべてのモジュールが正しくエクスポートされている" time="0.002511158">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/index.test.ts" name="utils index exports &gt; エクスポートの確認: ネームスペース形式でアクセス可能" time="0.000728732">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/index.test.ts" name="utils index exports &gt; エクスポートの確認: 各モジュールが独立している" time="0.001357558">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" timestamp="2025-09-28T09:49:31.803Z" hostname="runnervm3ublj" tests="11" failures="0" errors="0" skipped="0" time="0.020022038">
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 正常ケース: 有効なパラメータで正しいSVGパスを生成" time="0.002983204">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 正常ケース: 複数の位置で一貫したパス構造を生成" time="0.007608353">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 境界値ケース: large-arc-flagの計算が正しい" time="0.000893868">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 異常ケース: 無効な位置でCircleOfFifthsErrorをスロー" time="0.000764078">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 異常ケース: 負の半径でCircleOfFifthsErrorをスロー" time="0.000546283">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generatePizzaSlicePath &gt; 異常ケース: 内側半径≥外側半径でCircleOfFifthsErrorをスロー" time="0.000741575">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 正常ケース: 有効なパラメータで3つのパスを正しく生成" time="0.001445499">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 正常ケース: 実際のCIRCLE_LAYOUT値で正しく動作" time="0.001302987">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 異常ケース: 無効な位置でCircleOfFifthsErrorをスロー" time="0.000550621">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 異常ケース: 負の半径でCircleOfFifthsErrorをスロー" time="0.00057153">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/pathGeneration.test.ts" name="pathGeneration utils &gt; generateThreeSegmentPaths &gt; 異常ケース: 半径の順序が正しくない場合でErrorをスロー" time="0.000723843">
        </testcase>
    </testsuite>
    <testsuite name="src/features/circle-of-fifths/utils/test/validation.test.ts" timestamp="2025-09-28T09:49:31.805Z" hostname="runnervm3ublj" tests="6" failures="0" errors="0" skipped="0" time="0.007254416">
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 正常ケース: 有効な位置（0-11）でtrueを返す" time="0.004489778">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 境界値ケース: 負の数でfalseを返す" time="0.000234526">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 境界値ケース: getSegmentCount()以上の数でfalseを返す" time="0.000329781">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 異常ケース: 小数でfalseを返す" time="0.000271644">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 異常ケース: NaNでfalseを返す" time="0.000157883">
        </testcase>
        <testcase classname="src/features/circle-of-fifths/utils/test/validation.test.ts" name="validation utils &gt; isValidPosition &gt; 異常ケース: Infinityでfalseを返す" time="0.000205852">
        </testcase>
    </testsuite>
    <testsuite name="src/features/view-controller/hooks/test/useViewController.test.ts" timestamp="2025-09-28T09:49:31.806Z" hostname="runnervm3ublj" tests="28" failures="0" errors="0" skipped="0" time="0.089945417">
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: フックが正常に初期化される" time="0.018344255">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: 初期状態でcircle-of-fifthsが選択されている" time="0.002258298">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: hubOptionsが正しく取得される" time="0.003212558">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: selectedOptionが正しく設定される" time="0.002020257">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; 初期化 &gt; 正常ケース: radioGroupRefが初期化される" time="0.002006291">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; hubType変更 &gt; 正常ケース: hubStoreの状態変更が反映される" time="0.003373076">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; hubType変更 &gt; 正常ケース: hubType変更時にselectedOptionが更新される" time="0.001996192">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleHubTypeChange &gt; 正常ケース: circle-of-fifthsに変更できる" time="0.002111206">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleHubTypeChange &gt; 正常ケース: chromatic-circleに変更できる" time="0.002319713">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleHubTypeChange &gt; 正常ケース: 連続して変更できる" time="0.003135355">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowLeft/ArrowUpキー &gt; 正常ケース: ArrowLeftで前のオプションに移動" time="0.010169562">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowLeft/ArrowUpキー &gt; 正常ケース: ArrowUpで前のオプションに移動" time="0.005757749">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowLeft/ArrowUpキー &gt; 境界値ケース: 最初のオプションで前に移動すると最後のオプションに移動" time="0.002898005">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowRight/ArrowDownキー &gt; 正常ケース: ArrowRightで次のオプションに移動" time="0.002213366">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowRight/ArrowDownキー &gt; 正常ケース: ArrowDownで次のオプションに移動" time="0.001744756">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; ArrowRight/ArrowDownキー &gt; 境界値ケース: 最後のオプションで次に移動すると最初のオプションに移動" time="0.002051845">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; Home/Endキー &gt; 正常ケース: Homeキーで最初のオプションに移動" time="0.001736822">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; Home/Endキー &gt; 正常ケース: Endキーで最後のオプションに移動" time="0.001673354">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; Home/Endキー &gt; 境界値ケース: 既に最初のオプションでHomeキーを押しても変化なし" time="0.001599146">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; Home/Endキー &gt; 境界値ケース: 既に最後のオプションでEndキーを押しても変化なし" time="0.001561867">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; その他のキー &gt; 正常ケース: サポートされていないキーは何も実行しない" time="0.001392112">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; handleKeyDown &gt; その他のキー &gt; 正常ケース: 複数の無効なキーを連続して処理" time="0.00166576">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; フォーカス管理 &gt; 正常ケース: DOM要素が存在しない場合はエラーなし" time="0.002257186">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; フォーカス管理 &gt; 正常ケース: DOM要素が存在する場合のフォーカス処理" time="0.003309038">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; メモ化の動作 &gt; 正常ケース: hubOptionsがメモ化される" time="0.001637417">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; メモ化の動作 &gt; 正常ケース: hubTypeが変更されない場合はselectedOptionがメモ化される" time="0.001440061">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; メモ化の動作 &gt; 正常ケース: hubTypeが変更されるとselectedOptionが更新される" time="0.001739496">
        </testcase>
        <testcase classname="src/features/view-controller/hooks/test/useViewController.test.ts" name="useViewController &gt; メモ化の動作 &gt; 正常ケース: handleHubTypeChangeとhandleKeyDownがメモ化される" time="0.001415445">
        </testcase>
    </testsuite>
</testsuites>
